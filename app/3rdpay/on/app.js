(function () {
    'use strict';
    angular
        .module('parkhero', [
            'app.core',
            'app.routes',
            'app.sidebar',
            'app.navsearch',
            'app.preloader',
            'app.loadingbar',
            'app.translate',
            'app.settings',
            'app.utils',
            'app.login',
            'app.logout',
            'app.operator',
            'app.parking',
            'app.vehicle',
            'app.prepayment',
            'app.bill',
            'app.appupdate',
            'app.picupload',
            'app.user-group',
            'app.mobile-user',
            'app.reconciliation',
            'app.logger',
            'app.welcome',
            'app.auth',
            'app.basicinfo',
            'app.console',
            'app.analysis',
            'app.iotdevice'
        ])
        .config(InitSettingConfig)
        .constant('URL_SEED', {
            // API_URL: 'http://120.24.249.69:8000/parkhero/v0.1/',//哒哒服务器
            // API_URL: 'http://dev.dadapark.com/parkhero/v0.1/', // 测试服务器
            API_URL: 'http://xxtx.cszhjt.com/parkhero/v0.1/', // 湘行天下
            // API_IMGURL:'http://120.24.249.69:8000/park/',
            // API_IMGURL:'http://dev.dadapark.com/park/',
            API_IMGURL:'http://xxtx.cszhjt.com/park/',//静态图片地址
            // IMG_URL:'http://120.24.249.69:8000/parkhero/'//服务器资源地址
            // IMG_URL:'http://dev.dadapark.com/parkhero/'//服务器资源地址
            IMG_URL:'http://xxtx.cszhjt.com/parkhero/'
        });
    InitSettingConfig.$inject = ['$httpProvider', '$compileProvider'];
    function InitSettingConfig($httpProvider, $compileProvider) {
        // 允许跨域请求
        $httpProvider.defaults.useXDomain = true;
        // 删除AngularJS默认的请求头
        delete $httpProvider.defaults.headers.common['X-Requested-With'];
        // 添加CSRF TOKEN header
        $httpProvider.defaults.xsrfCookieName = 'csrftoken';
        $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';
        // 使用$applyAsync 合并http请求
        $httpProvider.useApplyAsync(true);
        // 禁用debug信息
        $compileProvider.debugInfoEnabled(false);
    }
})();


(function () {
    angular.module('app.analysis',['ngFileUpload']);
})();
/**
 * Created by huangxiang  on 2016/11/28 0028.
 * @author:
 * Module:
 * feature:
 */
(function () {
    angular.module('app.appupdate',['ngFileUpload']);
})();
/**
 * Created by huangxiang  on 2016/11/28 0028.
 * @author:
 * Module:
 * feature:
 */
(function () {
    angular.module('app.picupload',[]);
})();
/**
 * auth.module.js.js
 * @author: huangxiang
 * @create 2017-03-30 11:09
 */
(function(){

    'use strict';
    angular.module('app.auth',[]);
})();
/**
 * autor:yumaotao  2017/11/5
 */
(function () {
    angular.module('app.basicinfo',['ngFileUpload']);
})();
(function() {
    'use strict';

    angular
        .module('app.colors', []);
})();
(function() {
    'use strict';
    angular
        .module('app.console', []);
})();
(function () {

    angular
        .module('app.core', [
            'ngRoute',
            'ngAnimate',
            'ngStorage',
            'ngCookies',
            'pascalprecht.translate',
            'ui.bootstrap',
            'ui.router',
            'oc.lazyLoad',
            'cfp.loadingBar',
            'ngSanitize',
            'ngResource',
            'ui.utils',
            'ngAria',
            'ngMessages',
            // 'restangular',
            'toastr',
            'ui.select'
        ]);
})();
/**
 * Created by huangxiang  on 2016/12/20 0020.
 * @author:
 * Module:
 * feature:
 */
(function () {
    angular.module('app.exception',[]);
})();
(function () {
    angular.module('app.iotdevice',['ngFileUpload','baiduMap']);
})();

(function() {
    'use strict';

    angular
        .module('app.lazyload', []);
})();
(function () {
    'use strict';

    angular
        .module('app.loadingbar', []);
})();
/**
 * Created by huangxiang  on 2016/12/20 0020.
 * @author: huangxiang
 * Module: logger.module.js
 * feature: logger 模块引用
 */
(function () {
    angular.module('app.logger',[]);
})();

/**
 * Created by huangxiang on 2016/11/21 0021.
 */
(function () {
    angular
        .module('app.login', ['mdo-angular-cryptography','angular-md5']);
    // use  $crypto md5
})();
/**
 * Created by huangxiang  on 2016/11/22 0022.
 * @author: huangxiang
 * Module: login.service.js
 * feature:
 */
(function () {
    angular.module('app.logout',[]);
})();
/**
 * Created by huangxiang  on 2016/12/1 0001.
 * @author:
 * Module:
 * feature:
 */
(function () {
    angular.module('app.mobile-user',[]);
})();
(function() {
    'use strict';

    angular
        .module('app.navsearch', []);
})();
/**
 * Created by huangxiang  on 2016/11/22 0022.
 * @author: huangxiang
 * Module: operator.module.js
 * feature:
 */
(function () {
    angular.module('app.operator',['datatables',
        'datatables.bootstrap',
        'datatables.buttons']);
})();

/**
 * Created by huangxiang  on 2016/11/28 0028.
 * @author:
 * Module:
 * feature:
 */
(function () {
    angular.module('app.bill', ['ui.bootstrap.datetimepicker','ui.dateTimeInput']);
})();
/**
 * Created by huangxiang  on 2016/11/23 0023.
 * @author:huangxiang
 * Module: parking.module.js
 * feature:
 */
(function () {
    angular.module('app.parking',['ngFileUpload','baiduMap']);
})();

/**
 * Created by huangxiang  on 2016/11/24 0024.
 * @author:huangxiang
 * Module:prepayment.module.js
 * feature:
 */
(function () {
    "use strict";
    angular.module('app.prepayment',['oc.lazyLoad'])
})();
/**
 * Created by huangxiang  on 2016/11/24 0024.
 * @author:
 * Module:
 * feature:
 */
(function () {
    "use strict";
    angular.module('app.vehicle',['oc.lazyLoad']);
})();
(function() {
    'use strict';
    angular
        .module('app.preloader', []);
})();


/**
 * Created by huangxiang  on 2016/11/30 0030.
 * @author:huangxiang
 * Module: reconciliation.module.js
 * feature: 对账 module 第三方引用
 */
(function () {
    angular.module('app.reconciliation',[]);
})();
/**
 * Created by huangxiang  on 2016/11/28 0028.
 * @author:
 * Module:
 * feature:
 */
(function () {
    "use strict";
    angular.module('app.user-group',['datatables',
        'datatables.bootstrap'])
})();
(function() {
    'use strict';

    angular
        .module('app.routes', [
            'app.lazyload'
        ]);
})();
(function() {
    'use strict';

    angular
        .module('app.settings', []);
})();
(function() {
    'use strict';

    angular
        .module('app.sidebar', []);
})();
(function() {
    'use strict';

    angular
        .module('app.translate', []);
})();
(function () {
    angular
        .module('app.utils', [
            'app.colors',
            'ui.select',
            'ngSanitize'
        ]);
})();

/**
 * Created by huangxiang  on 2017/3/24 0024.
 * @author: huangxiang
 * Module:
 * feature:
 */

(function () {
    "use strict";

    angular.module('app.welcome',[]);
})();

(function () {
    angular.module('app.analysis')
        .controller('analysisAccountController', analysisAccountController);
    analysisAccountController.$inject = [ 'analysisAccountService', 'DTColumnDefBuilder','$scope','StatusCode','datatablesOptions','$document','logger'];
    'use strict';
    function analysisAccountController(analysisAccountService, DTColumnDefBuilder,$scope,StatusCode,datatablesOptions,$document,logger) {
        var vm = this;
        vm.chart_time = [];
        vm.wechat_actual_sum =[];
        vm.ali_actual_sum = [];
        vm.app_actual_sum = [];
        vm.actual_sum = [];
        vm.should_sum = [];
        vm.coupon_sum = [];
        vm.arrears_sum = [];
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        vm.dtOptions = datatablesOptions.getDatatableOption(); 
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8)
        ];
        vm.totalServerItems = 0;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            maxid: 0,
            minid: 0,
            pageSize: 50,
            pageNumber: 0,
            next_start_index: 0,
            previous_start_index: 0,
            totalItems: null,
            start_index:0,
            now_start_index:0,
        };
        vm.coupon ={
            valid_begintime:undefined,
            valid_endtime:undefined
        };
        vm.loadPreviousPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                logger.warning('已经到首页！','','没有上一页');
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
            } else {
                analysisAccountService.readRecords(vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                    vm.account_data = response.account_data;
                    angular.forEach(response.account_data, function (value,index) {
                        vm.account_data[index].id = vm.account_data_id-index+1;
                    });
                    vm.account_data_id = vm.account_data[vm.account_data.length-1].id;
                    vm.pagination.next_start_index = response.account_data[response.account_data.length - 1].townid;
                    vm.pagination.previous_start_index = response.account_data[0].townid;
                    vm.pagination.maxid = response.maxid;
                    if (vm.account_data.length < 50) {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }
        };
        vm.loadNextPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if (vm.pagination.next_start_index <= vm.pagination.minid) {
                logger.warning('已经到最后一页！','','没有下一页');
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
            } else {
                analysisAccountService.readRecords(vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.next_page).then(function (response) {
                    vm.account_data = response.account_data;
                    angular.forEach(response.account_data, function (value,index) {
                        vm.account_data[index].id = vm.account_data_id+index+1;
                    });
                    vm.account_data_id = vm.account_data[vm.account_data.length-1].id;
                    vm.pagination.next_start_index = response.account_data[response.account_data.length - 1].townid;
                    vm.pagination.previous_start_index = response.account_data[0].townid;
                    vm.pagination.minid = response.minid;
                    if (vm.account_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });

            }
        };
        vm.loadFistPage = function () {
            vm.pagination.next_start_index = 0;
            vm.pagination.maxid = 0;
            vm.pagination.minid = 0;
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            analysisAccountService.readRecords(vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                if (response.status === StatusCode.SUCCESS) {
                    vm.account_data = response.account_data;
                    angular.forEach(response.account_data, function (value,index) {
                        vm.account_data[index].id = index+1;
                    });
                    vm.account_data_id = vm.account_data[vm.account_data.length-1].id;
                    vm.pagination.next_start_index = response.account_data[response.account_data.length - 1].townid;
                    vm.pagination.previous_start_index = response.account_data[0].townid;
                    vm.pagination.maxid = response.maxid;
                    vm.pagination.pageNumber = 1;
                    // 如果记录少于20条，则灰掉所有翻页按钮
                    if (vm.account_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        // 否则只灰掉上一页按钮，首页留作刷新用
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === 10003) {
                    logger.error('数据库发生错误！',response.detail,'查找失败！');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                } else {
                    logger.warning('没有找到财务记录',response.detail,'没有财务记录');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }

            });
        };
        /*加载末页*/
        vm.loadLastPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            vm.pagination.now_start_index = -1;
            analysisAccountService.readRecords(vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                vm.account_data = response.account_data;
                angular.forEach(response.account_data, function (value,index) {
                    vm.account_data[index].id = vm.pagination.maxid -index+1;
                });
                vm.account_data_id = vm.account_data[vm.account_data.length-1].id;
                vm.pagination.minid = response.minid;
                vm.pagination.next_start_index = response.account_data[response.account_data.length - 1].townid;
                vm.pagination.previous_start_index = response.account_data[0].townid;
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
            });
        };
        vm.loadFistPage();
        vm.menuState = {
            show: false
        };
        vm.toggleMenu = function () {
            vm.menuState.show = !vm.menuState.show;
        };
        vm.changeBtn = function () {
            vm.vehicleIn = !vm.vehicleIn;
        };
        vm.searchRecords = function () {
            vm.pagination.next_start_index = 0;
            vm.display = true;
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
-            analysisAccountService.readRecords(vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                if (response.status === StatusCode.SUCCESS) {
                    vm.account_data = response.account_data;
                    angular.forEach(response.account_data, function (value,index) {
                        vm.account_data[index].id = index+1;
                        vm.chart_time[index] = vm.account_data[index].time;
                        vm.actual_sum[index] =vm.account_data[index].actual_sum/100;
                        vm.coupon_sum[index] =vm.account_data[index].coupon_sum/100;
                        vm.arrears_sum[index] =vm.account_data[index].arrears_sum/100;
                        vm.wechat_actual_sum[index] =vm.account_data[index].wechat_actual_sum/100;
                        vm.ali_actual_sum[index] =vm.account_data[index].ali_actual_sum/100;
                        vm.app_actual_sum[index] =vm.account_data[index].app_actual_sum/100;
                    });
                    vm.showAccountChart();
                    vm.pagination.next_start_index = response.account_data[response.account_data.length - 1].townid;
                    vm.pagination.previous_start_index = response.account_data[0].townid;
                    vm.pagination.maxid = response.maxid;
                    if (vm.account_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === StatusCode.NO_INOUT_RECORD) {
                    logger.warning('没有找到财务记录',response.detail,'没有财务记录');
                } else {
                    logger.error('没有找到财务记录',response.detail,'数据库错误');
                }
            });
        };
        /*清除查找条件*/
        vm.clearAndRefresh = function () {
            vm.eventResult.model = undefined;
            vm.TownAsync.selected = undefined;
            vm.seletTown.id = undefined;
            vm.loadFistPage();
            vm.display = false;
            vm.vehicleIn = false;
            vm.valid_endtime = '';

        };

        //    图标展示区域
        vm.showAccountChart = function () {
            $('#accountChart').highcharts({
                chart: {
                    type: 'column'
                },
                title: {
                    text: '财务报表'
                },
                xAxis: {
                    categories: vm.chart_time,
                    crosshair: true
                },
                yAxis: {
                    min: 0,
                    title: {
                        text: '数量 (次/元/次)'
                    }
                },
                tooltip: {
                    headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                    pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                    '<td style="padding:0"><b>{point.y:.0f}</b></td></tr>',
                    footerFormat: '</table>',
                    shared: true,
                    useHTML: true
                },
                plotOptions: {
                    column: {
                        borderWidth: 0
                    }
                },
                series: [{
                    name: '账户实际收入',
                    data: vm.actual_sum
                }, {
                    name: '账户应收入',
                    data: vm.should_sum
                }, {
                    name: '优惠金额',
                    data: vm.coupon_sum
                }, {
                    name: '欠费金额',
                    data: vm.arrears_sum
                },{
                    name: '微信实际收入金额',
                    data: vm.wechat_actual_sum
                }, {
                    name: '支付宝实际收入金额',
                    data: vm.ali_actual_sum
                }, {
                    name: 'APP实际收入金额',
                    data: vm.app_actual_sum
                }]
            });
        };
    }
})();
(function () {
    angular.module('app.analysis')
        .factory('analysisAccountService', analysisAccountService);
    analysisAccountService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function analysisAccountService($http, URL_SEED) {
        var ANALYSISUSER = URL_SEED.API_URL + 'operation/account_data/';
        return {
            readRecords:readRecords
        };
        function readRecords(startime,endtime,time_type,max_results,start_index,pagedirect) {
            return $http({
                method: 'GET',
                url: ANALYSISUSER,
                params: {
                    startime:startime,
                    endtime:endtime,
                    time_type:time_type,
                    max_results: max_results,
                    start_index: start_index,
                    pagedirect: pagedirect
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
    }
})();
(function () {
    angular.module('app.analysis')
        .controller('analysisAppUserController', analysisAppUserController);
    analysisAppUserController.$inject = [ 'analysisAppUserService', 'datatablesOptions','$scope','StatusCode','DTColumnDefBuilder','$document','logger'];
    'use strict';
    function analysisAppUserController(analysisAppUserService, datatablesOptions,$scope,StatusCode,DTColumnDefBuilder,$document,logger) {
        var vm = this;
        vm.chart_time =[];
        vm.add_user = [];
        vm.pay_num =[];
        vm.pay_sum = [];
        vm.recharge_num = [];
        vm.recharge_sum = [];
        vm.active_user = [];
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        /*时间日历设置------------------------------------------------*/
        // i18nService.setCurrentLang('zh-cn');
        // vm.gridOptions = UiGridOptions.getUiGridOption();
        // vm.gridOptions.enablePaginationControls = false;
        // vm.app_user_data = [];
        // vm.gridOptions.columnDefs = [
        //     {field: 'id', displayName: '序号', width: '10%'},
        //     {field: 'spreader', displayName: '推广者'},
        //     {field: 'user', displayName: '被推广者'},
        //     {field: 'pay_state', displayName: '推广成功状态'},
        //     {field: 'spread_time', displayName: '推广时间'}
        // ];
        vm.dtOptions = datatablesOptions.getDatatableOption(); // 获取datatables表格设置
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4)
        ];
        vm.totalServerItems = 0;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            maxid: 0,
            minid: 0,
            pageSize: 50,
            pageNumber: 0,
            next_start_index: 0,
            previous_start_index: 0,
            totalItems: null,
            start_index:0,
            now_start_index:0,
        };
        vm.coupon ={
            valid_begintime:undefined,
            valid_endtime:undefined
        };
        /*加载上一页*/
        vm.loadPreviousPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                logger.warning('已经到首页！','','没有上一页');
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
            } else {
                analysisAppUserService.readRecords(vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                    vm.app_user_data = response.records;
                    angular.forEach(response.records, function (value,index) {
                        vm.app_user_data[index].id = vm.app_user_data_id-index+1;
                    });
                    vm.app_user_data_id = vm.app_user_data[vm.app_user_data.length-1].id;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].townid;
                    vm.pagination.previous_start_index = response.records[0].townid;
                    vm.pagination.maxid = response.maxid;
                    if (vm.app_user_data.length < 50) {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }
        };
        /*加载下一页*/
        vm.loadNextPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if (vm.pagination.next_start_index <= vm.pagination.minid) {
                logger.warning('已经到最后一页！','','没有下一页');
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
            } else {
                analysisAppUserService.readRecords(vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.next_page).then(function (response) {
                    vm.app_user_data = response.records;
                    angular.forEach(response.records, function (value,index) {
                        vm.app_user_data[index].id = vm.app_user_data_id+index+1;
                    });
                    vm.app_user_data_id = vm.app_user_data[vm.app_user_data.length-1].id;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].townid;
                    vm.pagination.previous_start_index = response.records[0].townid;
                    vm.pagination.minid = response.minid;
                    if (vm.app_user_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });

            }
        };
        /*加载首页*/
        vm.loadFistPage = function () {
            vm.pagination.next_start_index = 0;
            vm.pagination.maxid = 0;
            vm.pagination.minid = 0;
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            analysisAppUserService.readRecords(vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                if (response.status === StatusCode.SUCCESS) {
                    vm.app_user_data = response.records;
                    angular.forEach(response.records, function (value,index) {
                        vm.app_user_data[index].id = index+1;
                    });
                    vm.app_user_data_id = vm.app_user_data[vm.app_user_data.length-1].id;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].townid;
                    vm.pagination.previous_start_index = response.records[0].townid;
                    vm.pagination.maxid = response.maxid;
                    vm.pagination.pageNumber = 1;
                    // 如果记录少于20条，则灰掉所有翻页按钮
                    if (vm.app_user_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        // 否则只灰掉上一页按钮，首页留作刷新用
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === 10003) {
                    logger.error('数据库发生错误！',response.detail,'查找失败！');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                } else {
                    logger.warning('没有找到停车记录',response.detail,'没有停车记录');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }

            });
        };
        /*加载末页*/
        vm.loadLastPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            vm.pagination.now_start_index = -1;
            analysisAppUserService.readRecords(vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                vm.app_user_data = response.records;
                angular.forEach(response.records, function (value,index) {
                    vm.app_user_data[index].id = vm.pagination.maxid -index+1;
                });
                vm.app_user_data_id = vm.app_user_data[vm.app_user_data.length-1].id;
                vm.pagination.minid = response.minid;
                vm.pagination.next_start_index = response.records[response.records.length - 1].townid;
                vm.pagination.previous_start_index = response.records[0].townid;
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
            });
        };
        vm.loadFistPage();
        vm.menuState = {
            show: false
        };
        vm.toggleMenu = function () {
            vm.menuState.show = !vm.menuState.show;
        };
        vm.changeBtn = function () {
            vm.vehicleIn = !vm.vehicleIn;
        };
        vm.searchRecords = function () {
            vm.pagination.next_start_index = 0;
            vm.display = true;
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
-            analysisAppUserService.readRecords(vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                if (response.status === StatusCode.SUCCESS) {
                    vm.app_user_data = response.records;
                    angular.forEach(response.records, function (value,index) {
                        vm.app_user_data[index].id = index+1;
                        vm.chart_time[index] = vm.app_user_data[index].time;
                        vm.active_user[index] =vm.app_user_data[index].active_user;
                        vm.add_user[index] =vm.app_user_data[index].add_user;
                        vm.pay_num[index] =vm.app_user_data[index].pay_num;
                        vm.pay_sum[index] =vm.app_user_data[index].pay_sum/100;
                        vm.recharge_num[index] =vm.app_user_data[index].recharge_num;
                        vm.recharge_sum[index] =vm.app_user_data[index].recharge_sum/100;
                    });
                    vm.showUserChart();
                    vm.pagination.next_start_index = response.records[response.records.length - 1].townid;
                    vm.pagination.previous_start_index = response.records[0].townid;
                    vm.pagination.maxid = response.maxid;
                    if (vm.app_user_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === StatusCode.NO_INOUT_RECORD) {
                    logger.warning('没有找到停车记录',response.detail,'没有停车记录');
                } else {
                    logger.error('没有找到停车记录',response.detail,'数据库错误');
                }
            });
        };
        /*清除查找条件*/
        vm.clearAndRefresh = function () {
            vm.loadFistPage();
            vm.display = false;
            vm.vehicleIn = false;
            vm.valid_endtime = '';
            vm.valid_begintime ='';
            vm.time_type = '';
        };
        //    图标展示区域
        vm.showUserChart = function () {
            $('#userChart').highcharts({
                chart: {
                    type: 'column'
                },
                title: {
                    text: '用户统计表'
                },
                xAxis: {
                    categories: vm.chart_time,
                    crosshair: true
                },
                yAxis: {
                    min: 0,
                    title: {
                        text: '数量 (次/元/次)'
                    }
                },
                tooltip: {
                    headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                    pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                    '<td style="padding:0"><b>{point.y:.0f}</b></td></tr>',
                    footerFormat: '</table>',
                    shared: true,
                    useHTML: true
                },
                plotOptions: {
                    column: {
                        borderWidth: 0
                    }
                },
                series: [{
                    name: '新增用户',
                    data: vm.add_user
                },{
                    name: '活跃用户',
                    data: vm.active_user
                }, {
                    name: '消费次数',
                    data: vm.pay_num
                }, {
                    name: '消费金额',
                    data: vm.pay_sum
                }, {
                    name: '充值次数',
                    data: vm.recharge_num
                }, {
                    name: '充值金额',
                    data: vm.recharge_sum
                }]
            });
        };
    }
})();
(function () {
    angular.module('app.analysis')
        .factory('analysisAppUserService', analysisAppUserService);
    analysisAppUserService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function analysisAppUserService($http, URL_SEED) {
        var ANALYSISUSER = URL_SEED.API_URL + 'operation/spread_statistics/';
        return {
            readRecords:readRecords
        };
        function readRecords(startime,endtime,time_type,max_results,start_index,pagedirect) {
            return $http({
                method: 'GET',
                url: ANALYSISUSER,
                params: {
                    startime:startime,
                    endtime:endtime,
                    time_type:time_type,
                    max_results: max_results,
                    start_index: start_index,
                    pagedirect: pagedirect
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
    }
})();
(function () {
    angular.module('app.analysis')
        .controller('analysisBusTypeController', analysisBusTypeController);
    analysisBusTypeController.$inject = ['$location', 'ManageParkingService', 'analysisBusTypeService', 'DTColumnDefBuilder','datatablesOptions','$scope','StatusCode','UiGridOptions','$interval','$document','busTypeService','logger'];
    'use strict';
    function analysisBusTypeController($location, ManageParkingService, analysisBusTypeService, DTColumnDefBuilder,datatablesOptions,$scope,StatusCode,UiGridOptions,$interval,$document,busTypeService,logger) {
        var vm = this;
        vm.bustype_chart_time = [];
        vm.bustype_chart_bustype_num =[];
        vm.bustype_chart_bustype_sum = [];
        vm.bustype_chart_plsl_num = [];
        vm.bustype_chart_park_sum = [];
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        /*时间日历设置------------------------------------------------*/
        vm.vehicleIn = false;
        var selectBusType = [];//所选择的停车场类型
        vm.BusTypeAsync = [];
        var allBusTypes = [];
        busTypeService.queryBusType().then(function (response) {
            vm.BusTypeAsync = response.records;
            angular.forEach(response.records, function (value,index) {
                vm.BusTypeAsync[index].name = value.genrename;
                allBusTypes.push(value.id);
            });
        });
        vm.onSelectCallbackBusType = function (item) {
            vm.eventResult = {model: item};
            vm.seletBusType.id = vm.eventResult.model.id;
            vm.seletBusType.name = vm.eventResult.model.name;
        };
        vm.seletBusType = {
            id: undefined
        };
        // i18nService.setCurrentLang('zh-cn');
        // vm.gridOptions = UiGridOptions.getUiGridOption();
        // vm.gridOptions.enablePaginationControls = false;
        // vm.busines_data = [];
        // vm.gridOptions.columnDefs = [
        //     {field: 'id', displayName: '序号', width: '10%'},
        //     {field: 'businesid', displayName: '业态ID', width: '10%'},
        //     {field: 'park_sum', displayName: '停车场数', width: '10%'},
        //     {field: 'businesname', displayName: '业态名称'},
        //     {field: 'plsl_num', displayName: '故障次数'},
        //     {field: 'busines_num', displayName: '消费次数'},
        //     {field: 'busines_sum', displayName: '消费金额'},
        //     {field: 'time', displayName: '时间'}
        // ];
        /*停车场选择-------------------------------------------------*/
        vm.dtOptions = datatablesOptions.getDatatableOption(); // 获取datatables表格设置
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7)
        ];
        vm.totalServerItems = 0;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            maxid: 0,
            minid: 0,
            pageSize: 50,
            pageNumber: 0,
            next_start_index: 0,
            previous_start_index: 0,
            totalItems: null,
            start_index:0,
            now_start_index:0,
        };
        vm.coupon ={
            valid_begintime:undefined,
            valid_endtime:undefined
        };
        /*加载上一页*/
        vm.loadPreviousPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                logger.warning('已经到首页！','','没有上一页');
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
            } else {
                analysisBusTypeService.readRecords(vm.seletBusType.id,vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                    vm.busines_data = response.busines_data;
                    angular.forEach(response.busines_data, function (value,index) {
                        vm.busines_data[index].id = vm.busines_data_id-index+1;
                    });
                    vm.busines_data_id = vm.busines_data[vm.busines_data.length-1].id;
                    vm.pagination.next_start_index = response.busines_data[response.busines_data.length - 1].businesid;
                    vm.pagination.previous_start_index = response.busines_data[0].businesid;
                    vm.pagination.maxid = response.maxid;
                    if (vm.busines_data.length < 50) {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }
        };
        /*加载下一页*/
        vm.loadNextPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if (vm.pagination.next_start_index <= vm.pagination.minid) {
                logger.warning('已经到最后一页！','','没有下一页');
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
            } else {
                analysisBusTypeService.readRecords(vm.seletBusType.id,vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.next_page).then(function (response) {
                    vm.busines_data = response.busines_data;
                    angular.forEach(response.busines_data, function (value,index) {
                        vm.busines_data[index].id = vm.busines_data_id+index+1;
                    });
                    vm.busines_data_id = vm.busines_data[vm.busines_data.length-1].id;
                    vm.pagination.next_start_index = response.busines_data[response.busines_data.length - 1].businesid;
                    vm.pagination.previous_start_index = response.busines_data[0].businesid;
                    vm.pagination.minid = response.minid;
                    if (vm.busines_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });

            }
        };
        /*加载首页*/
        vm.loadFistPage = function () {
            vm.pagination.next_start_index = 0;
            vm.pagination.maxid = 0;
            vm.pagination.minid = 0;
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            analysisBusTypeService.readRecords(vm.seletBusType.id,vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                if (response.status === StatusCode.SUCCESS) {
                    vm.busines_data = response.busines_data;
                    angular.forEach(response.busines_data, function (value,index) {
                        vm.busines_data[index].id = index+1;
                    });
                    vm.busines_data_id = vm.busines_data[vm.busines_data.length-1].id;
                    vm.pagination.next_start_index = response.busines_data[response.busines_data.length - 1].businesid;
                    vm.pagination.previous_start_index = response.busines_data[0].businesid;
                    vm.pagination.maxid = response.maxid;
                    vm.pagination.pageNumber = 1;
                    // 如果记录少于20条，则灰掉所有翻页按钮
                    if (vm.busines_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        // 否则只灰掉上一页按钮，首页留作刷新用
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === 10003) {
                    logger.error('数据库发生错误！',response.detail,'查找失败！');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                } else {
                    logger.warning('没有找到停车记录',response.detail,'没有停车记录');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }

            });
        };
        /*加载末页*/
        vm.loadLastPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            vm.pagination.now_start_index = -1;
            analysisBusTypeService.readRecords(vm.seletBusType.id,vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                vm.business_data = response.busines_data;
                angular.forEach(response.busines_data, function (value,index) {
                    vm.busines_data[index].id = vm.pagination.maxid -index+1;
                });
                vm.busines_data_id = vm.busines_data[vm.busines_data.length-1].id;
                vm.pagination.minid = response.minid;
                vm.pagination.next_start_index = response.busines_data[response.busines_data.length - 1].businesid;
                vm.pagination.previous_start_index = response.busines_data[0].businesid;
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
            });
        };
        vm.loadFistPage();
        vm.menuState = {
            show: false
        };
        vm.toggleMenu = function () {
            vm.menuState.show = !vm.menuState.show;
        };
        vm.changeBtn = function () {
            vm.vehicleIn = !vm.vehicleIn;
        };
        vm.searchRecords = function () {
            vm.pagination.next_start_index = 0;
            vm.display = true;
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
-            analysisBusTypeService.readRecords(vm.seletBusType.id,vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                if (response.status === StatusCode.SUCCESS) {
                    vm.busines_data = response.busines_data;
                    angular.forEach(response.busines_data, function (value,index) {
                        vm.busines_data[index].id = index+1;
                        vm.bustype_chart_time[index] = vm.busines_data[index].time;
                        vm.bustype_chart_bustype_num[index] =vm.busines_data[index].busines_num;
                        vm.bustype_chart_bustype_sum[index] =vm.busines_data[index].busines_sum/100;
                        vm.bustype_chart_plsl_num[index] =vm.busines_data[index].plsl_num;
                        vm.bustype_chart_park_sum[index] =vm.busines_data[index].park_sum;
                    });
                    vm.showBusTypeChart();
                    vm.busines_data = vm.busines_data;
                    vm.pagination.next_start_index = response.busines_data[response.busines_data.length - 1].businesid;
                    vm.pagination.previous_start_index = response.busines_data[0].businesid;
                    vm.pagination.maxid = response.maxid;
                    if (vm.busines_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === StatusCode.NO_INOUT_RECORD) {
                    logger.warning('没有找到停车记录',response.detail,'没有停车记录');
                } else {
                    logger.error('没有找到停车记录',response.detail,'数据库错误');
                }
            });
        };
        /*清除查找条件*/
        vm.clearAndRefresh = function () {
            vm.eventResult.model = undefined;
            vm.BusTypeAsync.selected = undefined;
            vm.seletBusType.id = undefined;
            vm.loadFistPage();
            vm.display = false;
            vm.valid_begintime = '';
            vm.valid_endtime = '';
            vm.time_type = '';
        };

        //    图标展示区域
        vm.showBusTypeChart = function () {
            $('#busTypeChart').highcharts({
                chart: {
                    type: 'column'
                },
                title: {
                    text: vm.seletBusType.name
                },
                xAxis: {
                    categories: vm.bustype_chart_time,
                    crosshair: true
                },
                yAxis: {
                    min: 0,
                    title: {
                        text: '数量 (次/元/次)'
                    }
                },
                tooltip: {
                    headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                    pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                    '<td style="padding:0"><b>{point.y:.0f}</b></td></tr>',
                    footerFormat: '</table>',
                    shared: true,
                    useHTML: true
                },
                plotOptions: {
                    column: {
                        borderWidth: 0
                    }
                },
                series: [{
                    name: '停车场数',
                    data: vm.bustype_chart_park_sum
                }, {
                    name: '消费金额',
                    data: vm.bustype_chart_bustype_num
                }, {
                    name: '消费金额',
                    data: vm.bustype_chart_bustype_sum
                },{
                    name: '故障次数',
                    data: vm.bustype_chart_plsl_num
                }]
            });
        };
    }
})();
(function () {
    angular.module('app.analysis')
        .factory('analysisBusTypeService', analysisBusTypeService);
    analysisBusTypeService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function analysisBusTypeService($http, URL_SEED) {
        var ANALYSISBUSINESS = URL_SEED.API_URL + 'operation/consunption_business/';
        return {
            readRecords:readRecords
        };
        function readRecords(busTypeId,startime,endtime,time_type,max_results,start_index,pagedirect) {
            return $http({
                method: 'GET',
                url: ANALYSISBUSINESS,
                params: {
                    businessid: busTypeId,
                    startime:startime,
                    endtime:endtime,
                    time_type:time_type,
                    max_results: max_results,
                    start_index: start_index,
                    pagedirect: pagedirect
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
    }
})();
(function () {
    angular.module('app.analysis')
        .controller('analysisOrganController', analysisOrganController);
    analysisOrganController.$inject = [ 'analysisOrganService', 'DTColumnDefBuilder','$scope','StatusCode','datatablesOptions','$document','logger','organService'];
    'use strict';
    function analysisOrganController(analysisOrganService, DTColumnDefBuilder,$scope,StatusCode,datatablesOptions,$document,logger,organService) {
        var vm = this;
        vm.chart_time = [];
        vm.wechat_actual_sum =[];
        vm.ali_actual_sum = [];
        vm.app_actual_sum = [];
        vm.actual_sum = [];
        vm.should_sum = [];
        vm.coupon_sum = [];
        vm.arrears_sum = [];
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        var selectOrganman = [];//所选择的停车场所有人
        vm.OrganmanAsync = [];
        var allOrganmans = [];
        organService.queryOrgan().then(function (response) {
            vm.OrganmanAsync = response.records;
            angular.forEach(response.records, function (value) {
                allOrganmans.push(value.id);
            });
        });
        vm.onSelectCallbackOrganman = function (item) {
            vm.eventResult = {model: item};
            vm.parkingOrgan = vm.eventResult.model.id;
        };
        vm.dtOptions = datatablesOptions.getDatatableOption(); // 获取datatables表格设置
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8)
        ];
        vm.totalServerItems = 0;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            maxid: 0,
            minid: 0,
            pageSize: 50,
            pageNumber: 0,
            next_start_index: 0,
            previous_start_index: 0,
            totalItems: null,
            start_index:0,
            now_start_index:0,
        };
        vm.coupon ={
            valid_begintime:undefined,
            valid_endtime:undefined
        };
        /*加载上一页*/
        vm.loadPreviousPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                logger.warning('已经到首页！','','没有上一页');
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
            } else {
                analysisOrganService.readRecords(vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page,vm.parkingOrgan).then(function (response) {
                    vm.account_data = response.account_data;
                    angular.forEach(response.account_data, function (value,index) {
                        vm.account_data[index].id = vm.account_data_id-index+1;
                    });
                    vm.account_data_id = vm.account_data[vm.account_data.length-1].id;
                    vm.pagination.next_start_index = response.account_data[response.account_data.length - 1].townid;
                    vm.pagination.previous_start_index = response.account_data[0].townid;
                    vm.pagination.maxid = response.maxid;
                    if (vm.account_data.length < 50) {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }
        };
        /*加载下一页*/
        vm.loadNextPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if (vm.pagination.next_start_index <= vm.pagination.minid) {
                logger.warning('已经到最后一页！','','没有下一页');
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
            } else {
                analysisOrganService.readRecords(vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.next_page,vm.parkingOrgan).then(function (response) {
                    vm.account_data = response.account_data;
                    angular.forEach(response.account_data, function (value,index) {
                        vm.account_data[index].id = vm.account_data_id+index+1;
                    });
                    vm.account_data_id = vm.account_data[vm.account_data.length-1].id;
                    vm.pagination.next_start_index = response.account_data[response.account_data.length - 1].townid;
                    vm.pagination.previous_start_index = response.account_data[0].townid;
                    vm.pagination.minid = response.minid;
                    if (vm.account_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });

            }
        };
        /*加载首页*/
        vm.loadFistPage = function () {
            vm.pagination.next_start_index = 0;
            vm.pagination.maxid = 0;
            vm.pagination.minid = 0;
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            analysisOrganService.readRecords(vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page,vm.parkingOrgan).then(function (response) {
                if (response.status === StatusCode.SUCCESS) {
                    vm.account_data = response.account_data;
                    angular.forEach(response.account_data, function (value,index) {
                        vm.account_data[index].id = index+1;
                    });
                    vm.account_data_id = vm.account_data[vm.account_data.length-1].id;
                    vm.pagination.next_start_index = response.account_data[response.account_data.length - 1].townid;
                    vm.pagination.previous_start_index = response.account_data[0].townid;
                    vm.pagination.maxid = response.maxid;
                    vm.pagination.pageNumber = 1;
                    // 如果记录少于20条，则灰掉所有翻页按钮
                    if (vm.account_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        // 否则只灰掉上一页按钮，首页留作刷新用
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === 10003) {
                    logger.error('数据库发生错误！',response.detail,'查找失败！');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                } else {
                    logger.warning('没有找到财务记录',response.detail,'没有财务记录');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }

            });
        };
        /*加载末页*/
        vm.loadLastPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            vm.pagination.now_start_index = -1;
            analysisOrganService.readRecords(vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page,vm.parkingOrgan).then(function (response) {
                vm.account_data = response.account_data;
                angular.forEach(response.account_data, function (value,index) {
                    vm.account_data[index].id = vm.pagination.maxid -index+1;
                });
                vm.account_data_id = vm.account_data[vm.account_data.length-1].id;
                vm.pagination.minid = response.minid;
                vm.pagination.next_start_index = response.account_data[response.account_data.length - 1].townid;
                vm.pagination.previous_start_index = response.account_data[0].townid;
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
            });
        };
        vm.menuState = {
            show: false
        };
        vm.toggleMenu = function () {
            vm.menuState.show = !vm.menuState.show;
        };
        vm.changeBtn = function () {
            vm.vehicleIn = !vm.vehicleIn;
        };
        vm.searchRecords = function () {
            vm.pagination.next_start_index = 0;
            vm.display = true;
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
-            analysisOrganService.readRecords(vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page,vm.parkingOrgan).then(function (response) {
                if (response.status === StatusCode.SUCCESS) {
                    vm.account_data = response.account_data;
                    angular.forEach(response.account_data, function (value,index) {
                        vm.account_data[index].id = index+1;
                        vm.chart_time[index] = vm.account_data[index].time;
                        vm.actual_sum[index] =vm.account_data[index].actual_sum/100;
                        vm.coupon_sum[index] =vm.account_data[index].coupon_sum/100;
                        vm.arrears_sum[index] =vm.account_data[index].arrears_sum/100;
                        vm.wechat_actual_sum[index] =vm.account_data[index].wechat_actual_sum/100;
                        vm.ali_actual_sum[index] =vm.account_data[index].ali_actual_sum/100;
                        vm.app_actual_sum[index] =vm.account_data[index].app_actual_sum/100;
                    });
                    vm.showAccountChart();
                    vm.pagination.next_start_index = response.account_data[response.account_data.length - 1].townid;
                    vm.pagination.previous_start_index = response.account_data[0].townid;
                    vm.pagination.maxid = response.maxid;
                    if (vm.account_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === StatusCode.NO_INOUT_RECORD) {
                    logger.warning('没有找到财务记录',response.detail,'没有财务记录');
                } else {
                    logger.error('没有找到财务记录',response.detail,'数据库错误');
                }
            });
        };
        /*清除查找条件*/
        vm.clearAndRefresh = function () {
            vm.eventResult.model = undefined;
            vm.TownAsync.selected = undefined;
            vm.seletTown.id = undefined;
            vm.loadFistPage();
            vm.display = false;
            vm.vehicleIn = false;
            vm.valid_endtime = '';

        };

        //    图标展示区域
        vm.showAccountChart = function () {
            $('#accountChart').highcharts({
                chart: {
                    type: 'column'
                },
                title: {
                    text: '财务报表'
                },
                xAxis: {
                    categories: vm.chart_time,
                    crosshair: true
                },
                yAxis: {
                    min: 0,
                    title: {
                        text: '数量 (次/元/次)'
                    }
                },
                tooltip: {
                    headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                    pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                    '<td style="padding:0"><b>{point.y:.0f}</b></td></tr>',
                    footerFormat: '</table>',
                    shared: true,
                    useHTML: true
                },
                plotOptions: {
                    column: {
                        borderWidth: 0
                    }
                },
                series: [{
                    name: '账户实际收入',
                    data: vm.actual_sum
                }, {
                    name: '账户应收入',
                    data: vm.should_sum
                }, {
                    name: '优惠金额',
                    data: vm.coupon_sum
                }, {
                    name: '欠费金额',
                    data: vm.arrears_sum
                },{
                    name: '微信实际收入金额',
                    data: vm.wechat_actual_sum
                }, {
                    name: '支付宝实际收入金额',
                    data: vm.ali_actual_sum
                }, {
                    name: 'APP实际收入金额',
                    data: vm.app_actual_sum
                }]
            });
        };
    }
})();
(function () {
    angular.module('app.analysis')
        .factory('analysisOrganService', analysisOrganService);
    analysisOrganService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function analysisOrganService($http, URL_SEED) {
        var ANALYSISUSER = URL_SEED.API_URL + 'operation/parklot_operator/';
        return {
            readRecords:readRecords
        };
        function readRecords(startime,endtime,time_type,max_results,start_index,pagedirect,a) {
            return $http({
                method: 'GET',
                url: ANALYSISUSER,
                params: {
                    organization:a,
                    startime:startime,
                    endtime:endtime,
                    time_type:time_type,
                    max_results: max_results,
                    start_index: start_index,
                    pagedirect: pagedirect
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
    }
})();
(function () {
    angular.module('app.analysis')
        .controller('analysisPayController', analysisPayController);
    analysisPayController.$inject = ['ManageParkingService', 'analysisPayService','$scope','StatusCode','$document','logger','DTColumnDefBuilder', 'datatablesOptions'];
    'use strict';
    function analysisPayController(ManageParkingService, analysisPayService,$scope,StatusCode,$document,logger,DTColumnDefBuilder, datatablesOptions) {
        var vm = this;
        vm.park_chart_time = [];
        vm.park_chart_park_num =[];
        vm.park_chart_park_sum = [];
        vm.park_chart_plsl_num = [];
        vm.queryBaiDuMapParking = queryBaiDuMapParking;
        vm.queryBaiDuMapParking();
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        /*时间日历设置------------------------------------------------*/
        var selectPark = [];//所选择的停车场
        vm.vehicleIn = false;
        /*停车场选择-------------------------------------------------*/
        vm.disabled = undefined;
        vm.searchEnabled = undefined;
        vm.setInputFocus = function () {
            $scope.$broadcast('UiselectDemo1');
        };
        vm.enable = function () {
            vm.disabled = false;
        };
        vm.display = false;
        vm.disabled = function () {
            vm.disabled = true;
        };
        vm.enableSearch = function () {
            vm.searchEnabled = true;
        };
        vm.disableSearch = function () {
            vm.searchEnabled = false;
        };
        vm.someGroupFn = function (item) {
            if (item.name[0] >= 'A' && item.name[0] <= 'M')
                return 'From A - M';
            if (item.name[0] >= 'N' && item.name[0] <= 'Z')
                return 'From N - Z';
        };
        vm.firstLetterGroupFn = function (item) {
            return item.name[0];
        };
        vm.reverseOrderFilterFn = function (groups) {
            return groups.reverse();
        };
        vm.parkingAsync = [];
        var allParkLots = [];
        var start_index = 0;
        function queryBaiDuMapParking() {
            ManageParkingService.queryBaiDuMapParking(start_index).then(function (response) {
                if(response.parking_lots.length !== 0) {
                    start_index =  response.parking_lots[response.parking_lots.length - 1].id;
                    angular.forEach(response.parking_lots, function (value) {
                        vm.parkingAsync.push(value);
                        allParkLots.push(value.id);
                    });
                    queryBaiDuMapParking();
                }
            });
        }
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.seletPark.id = vm.eventResult.model.id;
            vm.seletPark.name = vm.eventResult.model.name;
        };
        vm.seletPark = {
            id: undefined
        };
        /*停车场选择-------------------------------------------------*/
        vm.dtOptions = datatablesOptions.getDatatableOption(); // 获取datatables表格设置
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5)
        ];
        vm.totalServerItems = 0;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            maxid: 0,
            minid: 0,
            pageSize: 50,
            pageNumber: 0,
            next_start_index: 0,
            previous_start_index: 0,
            totalItems: null,
            start_index:0,
            now_start_index:0,
        };
        vm.coupon ={
            valid_begintime:'',
            valid_endtime:''
        };
        vm.parking={
            time_type:''
        };
        vm.valid_begintime='';
        vm.valid_endtime='';
        /*加载上一页*/
        vm.loadPreviousPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                logger.warning('已经到首页！','','没有上一页');
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
            } else {
                analysisPayService.readRecords(vm.seletPark.id,vm.valid_begintime,vm.valid_endtime,vm.parking.time_type,vm.pagination.pageSize,1,vm.pagination.pagetype.pervious_page).then(function (response) {
                    vm.park_data = response.park_data;
                    angular.forEach(response.park_data, function (value,index) {
                        vm.park_data[index].id = vm.park_data_id-index+1;
                    });
                    vm.park_data_id = vm.park_data[vm.park_data.length-1].id;
                    vm.pagination.next_start_index = response.park_data[response.park_data.length - 1].parkid;
                    vm.pagination.previous_start_index = response.park_data[0].parkid;
                    vm.pagination.maxid = response.maxid;
                    if (vm.park_data.length < 50) {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }
        };
        /*加载下一页*/
        vm.loadNextPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if (vm.pagination.next_start_index <= vm.pagination.minid) {
                logger.warning('已经到最后一页！','','没有下一页');
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
            } else {
                analysisPayService.readRecords(vm.seletPark.id,vm.valid_begintime,vm.valid_endtime,vm.parking.time_type,vm.pagination.pageSize,-1,vm.pagination.pagetype.next_page).then(function (response) {
                    vm.park_data = response.park_data;
                    angular.forEach(response.park_data, function (value,index) {
                        vm.park_data[index].id = vm.park_data_id+index+1;
                    });
                    vm.park_data_id = vm.park_data[vm.park_data.length-1].id;
                    vm.pagination.next_start_index = response.park_data[response.park_data.length - 1].parkid;
                    vm.pagination.previous_start_index = response.park_data[0].parkid;
                    vm.pagination.minid = response.minid;
                    if (vm.park_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });

            }
        };
        /*加载首页*/
        vm.loadFistPage = function () {
            vm.pagination.next_start_index = 0;
            vm.pagination.maxid = 0;
            vm.pagination.minid = 0;
            vm.pagination.previous_start_index = 0;
            vm.pagination.pagetype.pervious_page = '';
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            analysisPayService.readRecords(vm.seletPark.id,vm.valid_begintime,vm.valid_endtime,vm.parking.time_type,vm.pagination.pageSize,0,vm.pagination.pagetype.pervious_page).then(function (response) {
                if (response.status === StatusCode.SUCCESS) {
                    vm.park_data = response.park_data;
                    angular.forEach(response.park_data, function (value,index) {
                        vm.park_data[index].id = index+1;
                    });
                    vm.park_data_id = vm.park_data[vm.park_data.length-1].id;
                    vm.pagination.next_start_index = response.park_data[response.park_data.length - 1].parkid;
                    vm.pagination.previous_start_index = response.park_data[0].parkid;
                    vm.pagination.maxid = response.maxid;
                    vm.pagination.pageNumber = 1;
                    // 如果记录少于20条，则灰掉所有翻页按钮
                    if (vm.park_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        // 否则只灰掉上一页按钮，首页留作刷新用
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === 10003) {
                    logger.error('数据库发生错误！',response.detail,'查找失败！');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                } else {
                    logger.warning('没有找到停车记录',response.detail,'没有停车记录');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }

            });
        };
        /*加载末页*/
        vm.loadLastPage = function () {
            vm.pagination.now_start_index = -1;
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            analysisPayService.readRecords(vm.seletPark.id,vm.valid_begintime,vm.valid_endtime,vm.parking.time_type,vm.pagination.pageSize,-1,vm.pagination.pagetype.pervious_page).then(function (response) {
                vm.park_data = response.park_data;
                angular.forEach(response.park_data, function (value,index) {
                    vm.park_data[index].id = vm.pagination.maxid -index+1;
                });
                vm.park_data_id = vm.park_data[vm.park_data.length-1].id;
                vm.pagination.minid = response.minid;
                vm.pagination.next_start_index = response.park_data[response.park_data.length - 1].id;
                vm.pagination.previous_start_index = response.park_data[0].id;
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
            });
        };
        vm.loadFistPage();
        vm.menuState = {
            show: false
        };
        vm.toggleMenu = function () {
            vm.menuState.show = !vm.menuState.show;
        };
        vm.changeBtn = function () {
            vm.vehicleIn = !vm.vehicleIn;
        };
        vm.searchRecords = function () {
            vm.pagination.next_start_index = 0
            vm.park_chart_time = [];
            vm.park_chart_park_num =[];
            vm.park_chart_park_sum = [];
            vm.park_chart_plsl_num = [];
            vm.display = true;
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
-            analysisPayService.readRecords(vm.seletPark.id,vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                if (response.status === 0) {
                    vm.park_data = response.park_data
                    angular.forEach(response.park_data, function (value,index) {
                        vm.park_data[index].id = index+1;
                        vm.park_chart_time[index] = vm.park_data[index].time;
                        vm.park_chart_park_num[index] =vm.park_data[index].park_num;
                        vm.park_chart_park_sum[index] =vm.park_data[index].park_sum/100;
                        vm.park_chart_plsl_num[index] =vm.park_data[index].plsl_num;
                    });
                    vm.showChart();
                    vm.pagination.next_start_index = response.park_data[response.park_data.length - 1].id;
                    vm.pagination.previous_start_index = response.park_data[0].id;
                    vm.pagination.maxid = response.maxid;
                    if (vm.park_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === StatusCode.NO_INOUT_RECORD) {
                    logger.warning('没有找到停车记录',response.detail,'没有停车记录');
                } else {
                    logger.error('没有找到停车记录',response.detail,'数据库错误');
                }
            });

        };
        /*清除查找条件*/
        vm.clearAndRefresh = function () {
            vm.eventResult.model = undefined;
            vm.parkingAsync.selected = undefined;
            vm.seletPark.id = undefined;
            vm.loadFistPage();
            vm.display = false;
            vm.vehicleIn = false;
            vm.valid_begintime = '';
            vm.valid_endtime = '';
            vm.time_type = '';
        };
      vm.showChart = function () {
          $('#parkchart').highcharts({
              chart: {
                  type: 'column'
              },
              title: {
                  text: vm.seletPark.name
              },
              xAxis: {
                  categories: vm.park_chart_time,
                  crosshair: true
              },
              yAxis: {
                  min: 0,
                  title: {
                      text: '数量 (次/元/次)'
                  }
              },
              tooltip: {
                  headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                  pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                  '<td style="padding:0"><b>{point.y:.0f}</b></td></tr>',
                  footerFormat: '</table>',
                  shared: true,
                  useHTML: true
              },
              plotOptions: {
                  column: {
                      borderWidth: 0
                  }
              },
              series: [{
                  name: '消费次数',
                  data: vm.park_chart_park_num
              }, {
                  name: '消费金额',
                  data: vm.park_chart_park_sum
              }, {
                  name: '故障次数',
                  data: vm.park_chart_plsl_num
              }]
          });
      };
    }
})();
(function () {
    angular.module('app.analysis')
        .factory('analysisPayService', analysisPayService);
    analysisPayService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function analysisPayService($http, URL_SEED) {
        var ANALYSISPAY = URL_SEED.API_URL + 'operation/consunption_park/';
        return {
            readRecords:readRecords
        };
        function readRecords(parkid,startime,endtime,time_type,max_results,start_index,pagedirect) {
            return $http({
                method: 'GET',
                url: ANALYSISPAY,
                params: {
                    parkid: parkid,
                    startime:startime,
                    endtime:endtime,
                    time_type:time_type,
                    max_results: max_results,
                    start_index: start_index,
                    pagedirect: pagedirect
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
    }
})();
(function () {
    angular.module('app.analysis')
        .controller('analysisRegionController', analysisRegionController);
    analysisRegionController.$inject = ['$location', 'ManageParkingService', 'analysisRegionService', 'DTColumnDefBuilder','$scope','StatusCode','datatablesOptions','$interval','$document','regionService','logger'];
    'use strict';
    function analysisRegionController($location, ManageParkingService, analysisRegionService, DTColumnDefBuilder,$scope,StatusCode,datatablesOptions,$interval,$document,regionService,logger) {
        var vm = this;
        vm.region_chart_time = [];
        vm.region_chart_park_num =[];
        vm.region_chart_park_sum = [];
        vm.region_chart_plsl_num = [];
        vm.region_chart_park_sum = [];
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        /*时间日历设置------------------------------------------------*/
        var selectPark = [];//所选择的停车场
        vm.vehicleIn = false;
        /*区域选择-------------------------------------------------*/
        var selectRegion = [];//所选择的区域
        vm.regiongAsync = [];
        var allRegions = [];
        regionService.queryRegion().then(function (response) {
            vm.regiongAsync = response.records;
            angular.forEach(response.records, function (value) {
                allRegions.push(value.id);
            });
        });
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.selectRegion.id = vm.eventResult.model.id;
            vm.selectRegion.name = vm.eventResult.model.name;
        };
        vm.selectRegion = {
            id: undefined
        };
        // i18nService.setCurrentLang('zh-cn');
        // vm.gridOptions = UiGridOptions.getUiGridOption();
        // vm.gridOptions.enablePaginationControls = false;
        // vm.region_data = [];
        // vm.gridOptions.columnDefs = [
        //     {field: 'id', displayName: '序号', width: '10%'},
        //     {field: 'regionid', displayName: '区域ID', width: '10%'},
        //     {field: 'park_sum', displayName: '停车场数', width: '10%'},
        //     {field: 'regionname', displayName: '区域名称'},
        //     {field: 'plsl_num', displayName: '故障次数'},
        //     {field: 'reg_num', displayName: '消费次数'},
        //     {field: 'reg_sum', displayName: '消费金额'},
        //     {field: 'time', displayName: '时间'}
        // ];
        /*停车场选择-------------------------------------------------*/
        vm.dtOptions = datatablesOptions.getDatatableOption(); // 获取datatables表格设置
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6)
        ];
        vm.totalServerItems = 0;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            maxid: 0,
            minid: 0,
            pageSize: 50,
            pageNumber: 0,
            next_start_index: 0,
            previous_start_index: 0,
            totalItems: null,
            start_index:0,
            now_start_index:0,
        };
        vm.coupon ={
            valid_begintime:undefined,
            valid_endtime:undefined
        };
        /*加载上一页*/
        vm.loadPreviousPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                logger.warning('已经到首页！','','没有上一页');
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
            } else {
                analysisRegionService.readRecords(vm.selectRegion.id,vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                    vm.region_data = response.region_data;
                    angular.forEach(response.region_data, function (value,index) {
                        vm.region_data[index].id = vm.region_data_id-index+1;
                    });
                    vm.region_data_id = vm.region_data[vm.region_data.length-1].id;
                    vm.pagination.next_start_index = response.region_data[response.region_data.length - 1].regionid;
                    vm.pagination.previous_start_index = response.region_data[0].regionid;
                    vm.pagination.maxid = response.maxid;
                    if (vm.region_data.length < 50) {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }
        };
        /*加载下一页*/
        vm.loadNextPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if (vm.pagination.next_start_index <= vm.pagination.minid) {
                alert('已经到最后一页！','','没有下一页');
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
            } else {
                analysisRegionService.readRecords(vm.selectRegion.id,vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.next_page).then(function (response) {
                    vm.region_data = response.region_data;
                    angular.forEach(response.region_data, function (value,index) {
                        vm.region_data[index].id = vm.region_data_id+index+1;
                    });
                    vm.region_data_id = vm.park_data[vm.region_data.length-1].id;
                    vm.pagination.next_start_index = response.region_data[response.region_data.length - 1].regionid;
                    vm.pagination.previous_start_index = response.region_data[0].regionid;
                    vm.pagination.minid = response.minid;
                    if (vm.region_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });

            }
        };

        /*加载首页*/
        vm.loadFistPage = function () {
            vm.pagination.next_start_index = 0;
            vm.pagination.maxid = 0;
            vm.pagination.minid = 0;
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            analysisRegionService.readRecords(vm.selectRegion.id,vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                if (response.status === StatusCode.SUCCESS) {
                    vm.region_data = response.region_data;
                    angular.forEach(response.region_data, function (value,index) {
                        vm.region_data[index].id = index+1;
                    });
                    vm.region_data_id = vm.region_data[vm.region_data.length-1].id;
                    vm.pagination.next_start_index = response.region_data[response.region_data.length - 1].regionid;
                    vm.pagination.previous_start_index = response.region_data[0].regionid;
                    vm.pagination.maxid = response.maxid;
                    vm.pagination.pageNumber = 1;
                    // 如果记录少于20条，则灰掉所有翻页按钮
                    if (vm.region_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        // 否则只灰掉上一页按钮，首页留作刷新用
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === 10003) {
                    alert('数据库发生错误！',response.detail,'查找失败！');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                } else {
                    alert('没有找到停车记录',response.detail,'没有停车记录');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }

            });
        };
        /*加载末页*/
        vm.loadLastPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            vm.pagination.now_start_index = -1;
            analysisRegionService.readRecords(vm.selectRegion.id,vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                vm.region_data = response.region_data;
                angular.forEach(response.region_data, function (value,index) {
                    vm.region_data[index].id = vm.pagination.maxid -index+1;
                });
                vm.region_data_id = vm.region_data[vm.region_data.length-1].id;
                vm.pagination.minid = response.minid;
                vm.pagination.next_start_index = response.region_data[response.region_data.length - 1].regionid;
                vm.pagination.previous_start_index = response.region_data[0].regionid;
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
            });
        };
        vm.loadFistPage();
        vm.menuState = {
            show: false
        };
        vm.toggleMenu = function () {
            vm.menuState.show = !vm.menuState.show;
        };
        vm.changeBtn = function () {
            vm.vehicleIn = !vm.vehicleIn;
        };
        vm.searchRecords = function () {
            vm.pagination.next_start_index = 0;
            vm.region_chart_time = [];
            vm.region_chart_reg_num =[];
            vm.region_chart_reg_sum = [];
            vm.region_chart_plsl_num = [];
            vm.display = true;
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
-            analysisRegionService.readRecords(vm.selectRegion.id,vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                if (response.status === StatusCode.SUCCESS) {
                    vm.region_data = response.region_data;
                    angular.forEach(response.region_data, function (value,index) {
                        vm.region_data[index].id = index+1;
                        vm.region_chart_time[index] = vm.region_data[index].time;
                        vm.region_chart_reg_num[index] =vm.region_data[index].reg_num;
                        vm.region_chart_reg_sum[index] =vm.region_data[index].reg_sum/100;
                        vm.region_chart_plsl_num[index] =vm.region_data[index].plsl_num;
                        vm.region_chart_park_sum[index] =vm.region_data[index].park_sum;
                    });
                    vm.showRegionChart();
                    vm.pagination.next_start_index = response.region_data[response.region_data.length - 1].regionid;
                    vm.pagination.previous_start_index = response.region_data[0].regionid;
                    vm.pagination.maxid = response.maxid;
                    if (vm.region_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === StatusCode.NO_INOUT_RECORD) {
                    alert('没有找到区域记录',response.detail,'没有找到区域记录');
                } else {
                    alert('没有找到区域记录',response.detail,'数据库错误');
                }
            });
        };
        /*清除查找条件*/
        vm.clearAndRefresh = function () {
            vm.eventResult.model = undefined;
            vm.regiongAsync.selected = undefined;
            vm.selectRegion.id = undefined;
            vm.loadFistPage();
            vm.display = false;
            vm.vehicleIn = false;
            vm.valid_begintime = '';
            vm.valid_endtime = '';
            vm.time_type = '';
        };

        //    图标展示区域
        vm.showRegionChart = function () {
            $('#regionChart').highcharts({
                chart: {
                    type: 'column'
                },
                title: {
                    text: vm.selectRegion.name
                },
                xAxis: {
                    categories: vm.region_chart_time,
                    crosshair: true
                },
                yAxis: {
                    min: 0,
                    title: {
                        text: '数量 (次/元/次)'
                    }
                },
                tooltip: {
                    headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                    pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                    '<td style="padding:0"><b>{point.y:.0f}</b></td></tr>',
                    footerFormat: '</table>',
                    shared: true,
                    useHTML: true
                },
                plotOptions: {
                    column: {
                        borderWidth: 0
                    }
                },
                series: [{
                    name: '停车场数',
                    data: vm.region_chart_park_sum
                },{
                    name: '消费次数',
                    data: vm.region_chart_reg_num
                }, {
                    name: '消费金额',
                    data: vm.region_chart_reg_sum
                }, {
                    name: '故障次数',
                    data: vm.region_chart_plsl_num
                }]
            });
        };
    }
})();
(function () {
    angular.module('app.analysis')
        .factory('analysisRegionService', analysisRegionService);
    analysisRegionService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function analysisRegionService($http, URL_SEED) {
        var ANALYSISREGION = URL_SEED.API_URL + 'operation/consunption_reg/';
        // var ANALYSISREGION = "../acttst/data/analysis.json";
        return {
            readRecords:readRecords
        };
        function readRecords(regionId,startime,endtime,time_type,max_results,start_index,pagedirect) {
            return $http({
                method: 'GET',
                url: ANALYSISREGION,
                params: {
                    regionid: regionId,
                    startime:startime,
                    endtime:endtime,
                    time_type:time_type,
                    max_results: max_results,
                    start_index: start_index,
                    pagedirect: pagedirect
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
    }
})();
(function () {
    angular.module('app.analysis')
        .controller('analysisTownController', analysisTownController);
    analysisTownController.$inject = ['$location', 'ManageParkingService', 'analysisTownService', 'DTColumnDefBuilder','$scope','StatusCode','datatablesOptions','$interval','$document','townService','logger'];
    'use strict';
    function analysisTownController($location, ManageParkingService, analysisTownService, DTColumnDefBuilder,$scope,StatusCode,datatablesOptions,$interval,$document,townService,logger) {
        var vm = this;
        vm.town_chart_time = [];
        vm.town_chart_town_num =[];
        vm.town_chart_town_sum = [];
        vm.town_chart_plsl_num = [];
        vm.town_chart_park_sum = [];
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        /*时间日历设置------------------------------------------------*/
        var selectPark = [];//所选择的停车场
        vm.vehicleIn = false;
        var selectTown = [];//所选择的商圈
        vm.TownAsync = [];
        var allTowns = [];
        townService.queryTown().then(function (response) {
            vm.TownAsync = response.data;
            angular.forEach(response.data, function (value) {
                allTowns.push(value.id);
            });
        });
        vm.onSelectCallbackTown = function (item) {
            vm.eventResult = {model: item};
            vm.seletTown.id = vm.eventResult.model.id;
            vm.seletTown.name = vm.eventResult.model.name;
        };
        vm.seletTown = {
            id: undefined
        };
        // i18nService.setCurrentLang('zh-cn');
        // vm.gridOptions = UiGridOptions.getUiGridOption();
        // vm.gridOptions.enablePaginationControls = false;
        // vm.town_data = [];
        // vm.gridOptions.columnDefs = [
        //     {field: 'id', displayName: '序号', width: '10%'},
        //     {field: 'townid', displayName: '商圈ID', width: '10%'},
        //     {field: 'park_sum', displayName: '停车场数', width: '10%'},
        //     {field: 'townname', displayName: '商圈名称'},
        //     {field: 'plsl_num', displayName: '故障次数'},
        //     {field: 'town_num', displayName: '消费次数'},
        //     {field: 'town_sum', displayName: '消费金额'},
        //     {field: 'time', displayName: '时间'}
        // ];
        vm.dtOptions = datatablesOptions.getDatatableOption(); // 获取datatables表格设置
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6)
        ];
        vm.totalServerItems = 0;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            maxid: 0,
            minid: 0,
            pageSize: 50,
            pageNumber: 0,
            next_start_index: 0,
            previous_start_index: 0,
            totalItems: null,
            start_index:0,
            now_start_index:0,
        };
        vm.coupon ={
            valid_begintime:undefined,
            valid_endtime:undefined
        };
        /*加载上一页*/
        vm.loadPreviousPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                logger.warning('已经到首页！','','没有上一页');
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
            } else {
                analysisTownService.readRecords(vm.seletTown.id,vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                    vm.town_data = response.town_data;
                    angular.forEach(response.town_data, function (value,index) {
                        vm.town_data[index].id = vm.town_data_id-index+1;
                    });
                    vm.town_data_id = vm.town_data[vm.town_data.length-1].id;
                    vm.pagination.next_start_index = response.town_data[response.town_data.length - 1].townid;
                    vm.pagination.previous_start_index = response.town_data[0].townid;
                    vm.pagination.maxid = response.maxid;
                    if (vm.town_data.length < 50) {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }
        };
        /*加载下一页*/
        vm.loadNextPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if (vm.pagination.next_start_index <= vm.pagination.minid) {
                logger.warning('已经到最后一页！','','没有下一页');
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
            } else {
                analysisTownService.readRecords(vm.seletTown.id,vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.next_page).then(function (response) {
                    vm.town_data = response.town_data;
                    angular.forEach(response.town_data, function (value,index) {
                        vm.town_data[index].id = vm.town_data_id+index+1;
                    });
                    vm.town_data_id = vm.town_data[vm.town_data.length-1].id;
                    vm.pagination.next_start_index = response.town_data[response.town_data.length - 1].townid;
                    vm.pagination.previous_start_index = response.town_data[0].townid;
                    vm.pagination.minid = response.minid;
                    if (vm.town_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });

            }
        };
        /*加载首页*/
        vm.loadFistPage = function () {
            vm.pagination.next_start_index = 0;
            vm.pagination.maxid = 0;
            vm.pagination.minid = 0;
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            analysisTownService.readRecords(vm.seletTown.id,vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                if (response.status === StatusCode.SUCCESS) {
                    vm.town_data = response.town_data;
                    angular.forEach(response.town_data, function (value,index) {
                        vm.town_data[index].id = index+1;
                    });
                    vm.town_data_id = vm.town_data[vm.town_data.length-1].id;
                    vm.pagination.next_start_index = response.town_data[response.town_data.length - 1].townid;
                    vm.pagination.previous_start_index = response.town_data[0].townid;
                    vm.pagination.maxid = response.maxid;
                    vm.pagination.pageNumber = 1;
                    // 如果记录少于20条，则灰掉所有翻页按钮
                    if (vm.town_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        // 否则只灰掉上一页按钮，首页留作刷新用
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === 10003) {
                    logger.error('数据库发生错误！',response.detail,'查找失败！');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                } else {
                    logger.warning('没有找到停车记录',response.detail,'没有停车记录');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }

            });
        };
        /*加载末页*/
        vm.loadLastPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            vm.pagination.now_start_index = -1;
            analysisTownService.readRecords(vm.seletTown.id,vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                vm.town_data = response.town_data;
                angular.forEach(response.town_data, function (value,index) {
                    vm.town_data[index].id = vm.pagination.maxid -index+1;
                });
                vm.town_data_id = vm.town_data[vm.town_data.length-1].id;
                vm.pagination.minid = response.minid;
                vm.pagination.next_start_index = response.town_data[response.town_data.length - 1].townid;
                vm.pagination.previous_start_index = response.town_data[0].townid;
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
            });
        };
        vm.loadFistPage();
        vm.menuState = {
            show: false
        };
        vm.toggleMenu = function () {
            vm.menuState.show = !vm.menuState.show;
        };
        vm.changeBtn = function () {
            vm.vehicleIn = !vm.vehicleIn;
        };
        vm.searchRecords = function () {
            vm.pagination.next_start_index = 0;
            vm.display = true;
            selectPark.push(vm.eventResult.model.id);
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
-            analysisTownService.readRecords(vm.seletTown.id,vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                if (response.status === StatusCode.SUCCESS) {
                    vm.town_data = response.town_data;
                    angular.forEach(response.town_data, function (value,index) {
                        vm.town_data[index].id = index+1;
                        vm.town_chart_time[index] = vm.town_data[index].time;
                        vm.town_chart_town_num[index] =vm.town_data[index].town_num;
                        vm.town_chart_town_sum[index] =vm.town_data[index].town_sum/100;
                        vm.town_chart_plsl_num[index] =vm.town_data[index].plsl_num;
                        vm.town_chart_park_sum[index] =vm.town_data[index].park_sum;
                    });
                    vm.showTownChart();
                    vm.pagination.next_start_index = response.town_data[response.town_data.length - 1].townid;
                    vm.pagination.previous_start_index = response.town_data[0].townid;
                    vm.pagination.maxid = response.maxid;
                    if (vm.town_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === StatusCode.NO_INOUT_RECORD) {
                    logger.warning('没有找到停车记录',response.detail,'没有停车记录');
                } else {
                    logger.error('没有找到停车记录',response.detail,'数据库错误');
                }
            });
        };
        /*清除查找条件*/
        vm.clearAndRefresh = function () {
            vm.eventResult.model = undefined;
            vm.TownAsync.selected = undefined;
            vm.seletTown.id = undefined;
            vm.loadFistPage();
            vm.display = false;
            vm.vehicleIn = false;
            vm.valid_endtime = '';

        };

        //    图标展示区域
        vm.showTownChart = function () {
            $('#townChart').highcharts({
                chart: {
                    type: 'column'
                },
                title: {
                    text: vm.seletTown.name
                },
                xAxis: {
                    categories: vm.town_chart_time,
                    crosshair: true
                },
                yAxis: {
                    min: 0,
                    title: {
                        text: '数量 (次/元/次)'
                    }
                },
                tooltip: {
                    headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                    pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                    '<td style="padding:0"><b>{point.y:.0f}</b></td></tr>',
                    footerFormat: '</table>',
                    shared: true,
                    useHTML: true
                },
                plotOptions: {
                    column: {
                        borderWidth: 0
                    }
                },
                series: [{
                    name: '停车场数',
                    data: vm.town_chart_park_sum
                }, {
                    name: '消费次数',
                    data: vm.town_chart_town_num
                }, {
                    name: '消费金额',
                    data: vm.town_chart_town_sum
                }, {
                    name: '故障次数',
                    data: vm.town_chart_plsl_num
                }]
            });
        };
    }
})();
(function () {
    angular.module('app.analysis')
        .factory('analysisTownService', analysisTownService);
    analysisTownService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function analysisTownService($http, URL_SEED) {
        var ANALYSISTOWN = URL_SEED.API_URL + 'operation/consunption_town/';
        return {
            readRecords:readRecords
        };
        function readRecords(townId,startime,endtime,time_type,max_results,start_index,pagedirect) {
            return $http({
                method: 'GET',
                url: ANALYSISTOWN,
                params: {
                    townid: townId,
                    startime:startime,
                    endtime:endtime,
                    time_type:time_type,
                    max_results: max_results,
                    start_index: start_index,
                    pagedirect: pagedirect
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
    }
})();
(function () {
    angular.module('app.analysis')
        .controller('analysisUserController', analysisUserController);
    analysisUserController.$inject = [ 'analysisUserService','$scope','StatusCode','datatablesOptions','DTColumnDefBuilder','$document','townService','logger'];
    'use strict';
    function analysisUserController(analysisUserService,$scope,StatusCode,datatablesOptions,DTColumnDefBuilder,$document,townService,logger) {
        var vm = this;
        vm.chart_time =[];
        vm.add_user = [];
        vm.pay_num =[];
        vm.pay_sum = [];
        vm.recharge_num = [];
        vm.recharge_sum = [];
        vm.active_user = [];
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        /*时间日历设置------------------------------------------------*/
        // i18nService.setCurrentLang('zh-cn');
        // vm.gridOptions = UiGridOptions.getUiGridOption();
        // vm.gridOptions.enablePaginationControls = false;
        // vm.user_data = [];
        // vm.gridOptions.columnDefs = [
        //     {field: 'id', displayName: '序号', width: '10%'},
        //     {field: 'user_all', displayName: '总用户数'},
        //     {field: 'add_user', displayName: '新增用户数'},
        //     {field: 'active_user', displayName: '活跃用户数'},
        //     {field: 'recharge_num', displayName: '充值次数'},
        //     {field: 'recharge_sum', displayName: '充值金额'},
        //     {field: 'pay_num', displayName: '消费次数'},
        //     {field: 'pay_sum', displayName: '消费金额'},
        //     {field: 'time', displayName: '时间'}
        // ];
        /*停车场选择-------------------------------------------------*/
        vm.dtOptions = datatablesOptions.getDatatableOption(); // 获取datatables表格设置
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8)
        ];
        vm.totalServerItems = 0;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            maxid: 0,
            minid: 0,
            pageSize: 50,
            pageNumber: 0,
            next_start_index: 0,
            previous_start_index: 0,
            totalItems: null,
            start_index:0,
            now_start_index:0,
        };
        vm.coupon ={
            valid_begintime:undefined,
            valid_endtime:undefined
        };
        /*加载上一页*/
        vm.loadPreviousPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                logger.warning('已经到首页！','','没有上一页');
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
            } else {
                analysisUserService.readRecords(vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                    vm.user_data = response.user_data;
                    angular.forEach(response.user_data, function (value,index) {
                        vm.user_data[index].id = vm.user_data_id-index+1;
                    });
                    vm.user_data_id = vm.user_data[vm.user_data.length-1].id;
                    vm.pagination.next_start_index = response.user_data[response.user_data.length - 1].townid;
                    vm.pagination.previous_start_index = response.user_data[0].townid;
                    vm.pagination.maxid = response.maxid;
                    if (vm.user_data.length < 50) {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }
        };
        /*加载下一页*/
        vm.loadNextPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if (vm.pagination.next_start_index <= vm.pagination.minid) {
                logger.warning('已经到最后一页！','','没有下一页');
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
            } else {
                analysisUserService.readRecords(vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.next_page).then(function (response) {
                    vm.user_data = response.user_data;
                    angular.forEach(response.user_data, function (value,index) {
                        vm.user_data[index].id = vm.user_data_id+index+1;
                    });
                    vm.user_data_id = vm.user_data[vm.user_data.length-1].id;
                    vm.pagination.next_start_index = response.user_data[response.user_data.length - 1].townid;
                    vm.pagination.previous_start_index = response.user_data[0].townid;
                    vm.pagination.minid = response.minid;
                    if (vm.user_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });

            }
        };
        /*加载首页*/
        vm.loadFistPage = function () {
            vm.pagination.next_start_index = 0;
            vm.pagination.maxid = 0;
            vm.pagination.minid = 0;
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            analysisUserService.readRecords(vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                if (response.status === StatusCode.SUCCESS) {
                    vm.user_data = response.user_data;
                    angular.forEach(response.user_data, function (value,index) {
                        vm.user_data[index].id = index+1;
                    });
                    vm.user_data_id = vm.user_data[vm.user_data.length-1].id;
                    vm.pagination.next_start_index = response.user_data[response.user_data.length - 1].townid;
                    vm.pagination.previous_start_index = response.user_data[0].townid;
                    vm.pagination.maxid = response.maxid;
                    vm.pagination.pageNumber = 1;
                    // 如果记录少于20条，则灰掉所有翻页按钮
                    if (vm.user_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        // 否则只灰掉上一页按钮，首页留作刷新用
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === 10003) {
                    logger.error('数据库发生错误！',response.detail,'查找失败！');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                } else {
                    logger.warning('没有找到停车记录',response.detail,'没有停车记录');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }

            });
        };
        /*加载末页*/
        vm.loadLastPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            vm.pagination.now_start_index = -1;
            analysisUserService.readRecords(vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                vm.user_data = response.user_data;
                angular.forEach(response.user_data, function (value,index) {
                    vm.user_data[index].id = vm.pagination.maxid -index+1;
                });
                vm.user_data_id = vm.user_data[vm.user_data.length-1].id;
                vm.pagination.minid = response.minid;
                vm.pagination.next_start_index = response.user_data[response.user_data.length - 1].townid;
                vm.pagination.previous_start_index = response.user_data[0].townid;
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
            });
        };
        vm.loadFistPage();
        vm.menuState = {
            show: false
        };
        vm.toggleMenu = function () {
            vm.menuState.show = !vm.menuState.show;
        };
        vm.changeBtn = function () {
            vm.vehicleIn = !vm.vehicleIn;
        };
        vm.searchRecords = function () {
            vm.pagination.next_start_index = 0;
            vm.display = true;
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
-            analysisUserService.readRecords(vm.valid_begintime,vm.valid_endtime,vm.time_type,vm.pagination.pageSize,vm.pagination.previous_start_index,vm.pagination.pagetype.pervious_page).then(function (response) {
                if (response.status === StatusCode.SUCCESS) {
                    vm.user_data = response.user_data;
                    angular.forEach(response.user_data, function (value,index) {
                        vm.user_data[index].id = index+1;
                        vm.chart_time[index] = vm.user_data[index].time;
                        vm.active_user[index] =vm.user_data[index].active_user;
                        vm.add_user[index] =vm.user_data[index].add_user;
                        vm.pay_num[index] =vm.user_data[index].pay_num;
                        vm.pay_sum[index] =vm.user_data[index].pay_sum/100;
                        vm.recharge_num[index] =vm.user_data[index].recharge_num;
                        vm.recharge_sum[index] =vm.user_data[index].recharge_sum/100;
                    });
                    vm.showUserChart();
                    vm.pagination.next_start_index = response.user_data[response.user_data.length - 1].townid;
                    vm.pagination.previous_start_index = response.user_data[0].townid;
                    vm.pagination.maxid = response.maxid;
                    if (vm.user_data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === StatusCode.NO_INOUT_RECORD) {
                    logger.warning('没有找到停车记录',response.detail,'没有停车记录');
                } else {
                    logger.error('没有找到停车记录',response.detail,'数据库错误');
                }
            });
        };
        /*清除查找条件*/
        vm.clearAndRefresh = function () {
            vm.loadFistPage();
            vm.display = false;
            vm.vehicleIn = false;
            vm.valid_endtime = '';
            vm.valid_begintime ='';
            vm.time_type = '';
        };
        //    图标展示区域
        vm.showUserChart = function () {
            $('#userChart').highcharts({
                chart: {
                    type: 'column'
                },
                title: {
                    text: '用户统计表'
                },
                xAxis: {
                    categories: vm.chart_time,
                    crosshair: true
                },
                yAxis: {
                    min: 0,
                    title: {
                        text: '数量 (次/元/次)'
                    }
                },
                tooltip: {
                    headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                    pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                    '<td style="padding:0"><b>{point.y:.0f}</b></td></tr>',
                    footerFormat: '</table>',
                    shared: true,
                    useHTML: true
                },
                plotOptions: {
                    column: {
                        borderWidth: 0
                    }
                },
                series: [{
                    name: '新增用户',
                    data: vm.add_user
                },{
                    name: '活跃用户',
                    data: vm.active_user
                }, {
                    name: '消费次数',
                    data: vm.pay_num
                }, {
                    name: '消费金额',
                    data: vm.pay_sum
                }, {
                    name: '充值次数',
                    data: vm.recharge_num
                }, {
                    name: '充值金额',
                    data: vm.recharge_sum
                }]
            });
        };
    }
})();
(function () {
    angular.module('app.analysis')
        .factory('analysisUserService', analysisUserService);
    analysisUserService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function analysisUserService($http, URL_SEED) {
        var ANALYSISUSER = URL_SEED.API_URL + 'operation/consunption_appuser/';
        return {
            readRecords:readRecords
        };
        function readRecords(startime,endtime,time_type,max_results,start_index,pagedirect) {
            return $http({
                method: 'GET',
                url: ANALYSISUSER,
                params: {
                    startime:startime,
                    endtime:endtime,
                    time_type:time_type,
                    max_results: max_results,
                    start_index: start_index,
                    pagedirect: pagedirect
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
    }
})();
/**
 * Created by huangxiang  on 2016/11/28 0028.
 * @author:
 * Module:
 * feature:
 */
(function () {
    "use strict";
    angular.module('app.appupdate')
        .controller('AppUploadController', AppUploadController);

    AppUploadController.$inject = ['$scope', '$filter', 'Upload', '$timeout', '$location', 'URL_SEED', 'toastr', '$route'];

    function AppUploadController($scope, $filter, Upload, $timeout, $location, URL_SEED, toastr, $route) {
        /*表单样式设置----------------*/
        $(":file").filestyle({buttonName: "btn-primary", buttonText: "选择要上传的APK文件"});
        /*表单样式设置--------------------------*/
        $scope.queryRecords = function () {
            $location.path('app/update-history');
        };

        $scope.currentTime = new Date();

        $scope.apk = {
            version_code: 0,
            version_name: '',
            package_name: '',
            release_date: $filter('date')(new Date(), 'yyyy-MM-dd HH:mm:ss'),
            release_notes: ''
        };

        // APP上传URL
        var UPDATE_APP_URL = URL_SEED.API_URL + "appman/version";

        /*上传apk*/
        $scope.uploadAppPackage = function (file) {
            file.upload = Upload.upload({
                url: UPDATE_APP_URL,
                data: {
                    file_name: file,
                    package_name: $scope.apk.package_name,
                    version_code: $scope.apk.version_code,
                    version_name: $scope.apk.version_name,
                    release_date: $scope.apk.release_date,
                    release_notes: $scope.apk.release_notes
                },
                headers: {
                    'Content-Type': 'multipart/form-data'
                },
                withCredentials: true
            });

            file.upload.then(function (response) {
                $timeout(function () {
                    file.result = response.data;
                });
                if (response.data.status === 0) {
                    $timeout(function () {
                        toastr.success('操作成功，你已经成功上传该APK！', {
                            closeButton: true,
                            progressBar: true,
                            positionClass: 'toast-top-center'
                        });
                    });
                    // 上传成功刷新页面。
                    $route.reload();
                } else {
                    $timeout(function () {
                        toastr.error('上传失败！！请尝试重新上传!', {
                            closeButton: true,
                            progressBar: true,
                            positionClass: 'toast-top-center'
                        });
                    });
                }
            }, function (response) {
                if (response.status > 0) {
                    $scope.errorMsg = response.status + ': ' + response.data;
                }
            }, function (evt) {
                // Math.min is to fix IE which reports 200% sometimes
                file.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));
            });
        };
    }
})();
/**
 * Created by huangxiang  on 2016/11/28 0028.
 * @author:
 * Module:
 * feature:
 */
(function () {
    "use strict";
    angular.module('app.appupdate')
        .service('appupdateService',appupdateService);

    function appupdateService() {
        // TODO apk在线升级service
    }
})();
/**
 * Created by huangxiang  on 2016/11/28 0028.
 * @author:
 * Module:
 * feature:
 */
(function () {
    angular.module('app.picupload')
        .controller('AdSettingController', AdSettingController);

    AdSettingController.$inject = ['$scope', 'Upload', '$timeout', 'URL_SEED', 'toastr', '$route'];

    'use strict';
    function AdSettingController($scope, Upload, $timeout, URL_SEED, toastr, $route) {
        /*表单样式设置----------------*/
        angular.element(':file').filestyle({buttonName: 'btn-primary', buttonText: '请选择图片'});
        /*表单样式设置--------------------------*/

        $scope.mySelectVal = 'app_start_page';

        var IMAGE_UPLOAD_URL = URL_SEED.API_URL + 'appman/appimage';
        /*
         *filename:文件
         * index:key
         */
        /*上传启动页图片*/
        $scope.uploadStartupPic = function (file) {
            file.upload = Upload.upload({
                url: IMAGE_UPLOAD_URL,
                data: {filename: file, index: 1, page_type: 'startup_page',owner:$scope.owner},
                headers: {
                    'Content-Type': 'multipart/form-data'
                },
                withCredentials: true
            });

            file.upload.then(function (response) {
                $timeout(function () {
                    file.result = response.data;
                });
                if (response.data.status == '0') {
                    $timeout(function () {
                        toastr.success('操作成功，你已经成功上传该图片！', {
                            closeButton: true,
                            progressBar: true,
                            positionClass: 'toast-top-center'
                        });
                        // 上传成功刷新页面。
                        $route.reload();
                    });

                } else {
                    $timeout(function () {
                        toastr.error('上传失败！！请尝试重新上传!', {
                            closeButton: true,
                            progressBar: true,
                            positionClass: 'toast-top-center'
                        });
                    });
                }

            }, function (response) {
                if (response.status > 0)
                    $scope.errorMsg = response.status + ': ' + response.data;
            }, function (evt) {
                // Math.min is to fix IE which reports 200% sometimes
                file.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));
            });
        };

        /*上传APP轮播页图片*/

        $scope.uploadCoverPic = function (file) {
            file.upload = Upload.upload({
                url: IMAGE_UPLOAD_URL,
                data: {filename: file, index: $scope.ad_index, page_type: 'cover_page',owner:$scope.owner},
                headers: {
                    'Content-Type': 'multipart/form-data'
                },
                withCredentials: true
            });

            file.upload.then(function (response) {
                $timeout(function () {
                    file.result = response.data;
                });
                if (response.data.status == '0') {
                    $timeout(function () {
                        toastr.success('操作成功，你已经成功上传该图片！', {
                            closeButton: true,
                            progressBar: true,
                            positionClass: 'toast-top-center'
                        });
                    });
                    // 上传成功刷新页面。
                    $route.reload();
                } else {
                    $timeout(function () {
                        toastr.error('上传失败！！请尝试重新上传!', {
                            closeButton: true,
                            progressBar: true,
                            positionClass: 'toast-top-center'
                        });
                    });
                }
            }, function (response) {
                if (response.status > 0) {
                    $scope.errorMsg = response.status + ': ' + response.data;
                }
            }, function (evt) {
                // Math.min is to fix IE which reports 200% sometimes
                file.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));
            });
        };

        /*上传APP引导图*/
        $scope.uploadIndexPic = function (file) {
            file.upload = Upload.upload({
                url: IMAGE_UPLOAD_URL,
                data: {index: $scope.car_pic_index, filename: file, page_type: 'index_page',owner:$scope.owner},
                headers: {
                    'Content-Type': 'multipart/form-data'
                },
                withCredentials: true
            });

            file.upload.then(function (response) {
                $timeout(function () {
                    file.result = response.data;
                });
                if (response.data.status == '0') {
                    $timeout(function () {
                        toastr.success('操作成功，你已经成功上传该图片！', {
                            closeButton: true,
                            progressBar: true,
                            positionClass: 'toast-top-center'
                        });
                    });
                    // 上传成功刷新页面。
                    $route.reload();
                } else {
                    $timeout(function () {
                        toastr.error('上传失败！！请尝试重新上传!', {
                            closeButton: true,
                            progressBar: true,
                            positionClass: 'toast-top-center'
                        });
                    });
                }
            }, function (response) {
                if (response.status > 0) {
                    $scope.errorMsg = response.status + ': ' + response.data;
                }
            }, function (evt) {
                // Math.min is to fix IE which reports 200% sometimes
                file.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));
            });
        };
    }
})();
/**
 * Created by huangxiang  on 2016/11/28 0028.
 * @author:
 * Module:
 * feature:
 */

/**
 * authorization.factory.js
 * @author: huangxiang
 * @create 2017-03-30 11:28
 */
(function () {

    angular.module('app.auth')
        .factory('authorization', authorization);

    authorization.$inject = ['$rootScope', '$state', 'principal','PermissionErrorModal'];

    'use strict';
    function authorization($rootScope, $state, principal,PermissionErrorModal) {
        return {
            authorize: function () {
                return principal.identity()
                    .then(function () {
                        var isAuthenticated = principal.isAuthenticated();

                        if ($rootScope.toState.data.roles && $rootScope.toState.data.roles.length > 0 && !principal.isInAnyRole($rootScope.toState.data.roles)) {
                            console.log('data.roles == ' + $rootScope.toState.data.roles);
                            if (isAuthenticated) {
                                $state.go('app.no-auth');
                                var modalInstance = PermissionErrorModal.open('sm','/park/app/views/no-auth.html','');

                                modalInstance.result.then(function (result) {
                                    console.log(result);
                                },function (reason) {
                                    console.log(reason);
                                });
                            } // user is signed in but not authorized for desired state
                            else {
                                // user is not authenticated. stow the state they wanted before you
                                // send them to the signin state, so you can return them when you're done
                                $rootScope.returnToState = $rootScope.toState;
                                $rootScope.returnToStateParams = $rootScope.toStateParams;

                                // now, send them to the signin state so they can log in
                                $state.go('page.login');
                            }
                        }
                    });
            }
        };
    }
})();

/**
 * error.modal.controller.js
 * @author: huangxiang
 * @create 2017-04-01 16:47
 */

(function(){

    angular.module('app.auth')
        .controller('ModalResultInstanceController',ModalResultInstanceController);

    ModalResultInstanceController.$inject = ['$uibModalInstance','PermissionErrorModal','$state'];

    'use strict';

    function ModalResultInstanceController($uibModalInstance,PermissionErrorModal,$state) {
        var vm = this;

        vm.alertWarn = function () {
            var modalInstance = PermissionErrorModal.open('lg','/park/app/views/no-auth.html','');

            modalInstance.result.then(function (result) {
                console.log(result);
            },function (reason) {
                console.log(reason);
            });
        };

        vm.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };

        vm.backToHome = function () {
            $uibModalInstance.dismiss('cancel');
            $state.go('app.welcome');
        };
    }
})();

/**
 * error.modal.factory.js
 * @author: huangxiang
 * @create 2017-04-01 16:41
 */
(function(){

    angular.module('app.auth')
        .factory('PermissionErrorModal',PermissionErrorModal);

    PermissionErrorModal.$inject = ['$uibModal'];

    'use strict';
    function PermissionErrorModal($uibModal) {
        return{
          open: function (size, template, params) {
              return $uibModal.open(({
                  animation: true,
                  backdrop:'static',
                  templateUrl: template || '/park/app/views/myModalContent.html',
                  controller: 'ModalResultInstanceController',
                  controllerAs: 'vm',
                  size: size,
                  resolve: {
                      params: function () {
                          return params || '';
                      }
                  }
              }));
          }
        };
    }
})();

/**
 * principal.factory.js.js
 * @author: huangxiang
 * @create 2017-03-30 11:08
 */
(function () {

    angular.module('app.auth')
        .factory('principal', principal);

    principal.$inject = ['$q', '$http', '$timeout'];

    'use strict';
    function principal($q, $http, $timeout) {
        var _identity = undefined,
            _authenticated = false;

        return {
            isIdentityResolved: function () {
                return angular.isDefined(_identity);
            },
            isAuthenticated: function () {
                return _authenticated;
            },
            isInRole: function (role) {
                if (!_authenticated || !_identity) {
                    return false;
                }
                return _identity.roles.indexOf(role) !== -1;
            },
            isInAnyRole: function (roles) {
                if (!_authenticated || !_identity.roles) {
                    return false;
                }
                for (var i = 0; i < roles.length; i++) {
                    if (this.isInRole(roles[i])) {
                        return true;
                    }
                }
                return false;
            },
            authenticate: function (identity) {
                _identity = identity;
                _authenticated = identity !== null;

                if(identity){
                    localStorage.setItem('park.identity',angular.toJson(identity));
                }else {
                    localStorage.removeItem('park.identity');
                }
            },
            identity: function (force) {
                var deferred = $q.defer();

                if(force === true){
                    _identity = undefined;
                }

                if(angular.isDefined(_identity)){
                    deferred.resolve(_identity);
                    return deferred.promise;
                }
                var self = this;
                $timeout(function () {
                    _identity = angular.fromJson(localStorage.getItem('park.identity'));
                    self.authenticate(_identity);
                    deferred.resolve(_identity);
                },1000);

                return deferred.promise;
            }
        };
    }
})();
/**
 * park.add.controller.js
 * @author: huangxiang
 * @create 2016-12-23 16:43
 */
(function () {
    angular.module('app.basicinfo')
        .controller('addBureauController', addBureauController);
    addBureauController.$inject = ['$location', 'bureauService', 'logger','regionService'];
    'use strict';
    function addBureauController($location, bureauService, logger,regionService) {
        var vm = this;
        var selectRegion = [];
        vm.regiongAsync = [];
        var allRegions = [];
        regionService.queryRegion().then(function (response) {
            vm.regiongAsync = response.records;
            angular.forEach(response.records, function (value) {
                allRegions.push(value.id);
            });
        });
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.selectRegion.id = vm.eventResult.model.id;
        };
        vm.selectRegion = {
            id: undefined
        };
        vm.addBureau = addBureau;
        vm.backToPrevious = backToPrevious;
        function addBureau() {
            vm.bureau.region = vm.selectRegion.id ;
            bureauService.addBureau(vm.bureau.cityproperCode,vm.bureau.cityproperName,vm.bureau.region).then(function (response) {
                if (response.status === 0) {
                    logger.success('添加成功'+'警局：'+vm.bureau.stationName,'操作成功');
                    $location.path('/app/bureau');
                }else if (response.status === 40004) {
                    logger.error('添加失败' + '"' + vm.bureau.stationName + '"' + '失败!', vm.bureau.stationName, '该警局已经存在！');
                }  else {
                    logger.error('添加失败');
                }
            });
        }
        function backToPrevious() {
            $location.path('/app/bureau');
        }
    }
})();
/**
 * Town.controller.js
 * @author: yumaotao
 * @create 2017/11/6
 * @feather: 区域信息表单初始化配置
 */
(function () {
    angular.module('app.basicinfo')
        .controller('bureauController', bureauController);
    bureauController.$inject = ['$location', 'bureauService', 'DTColumnDefBuilder', 'datatablesOptions', 'bureauFactory', '$uibModal','$document','logger','regionService'];
    'use strict';
    function bureauController($location, bureauService, DTColumnDefBuilder, datatablesOptions, bureauFactory, $uibModal,$document,logger,regionService) {
        var vm = this;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            next_start_index:0,
            previous_start_index:0,
            maxid: 0,
            minid: 0
        };
        vm.number={
            start:0,
            next:0
        };
        /*区域选择-------------------------------------------------*/
        vm.regiongAsync = [];
        var allRegions = [];
        regionService.queryRegion().then(function (response) {
            vm.regiongAsync = response.records;
            angular.forEach(response.records, function (value) {
                allRegions.push(value.id);
            });
        });
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.selectRegionId= vm.eventResult.model.id;
        };
        vm.bureaugAsync = [];
        var allBureaus = [];
        bureauService.queryBureau().then(function (response) {
            // vm.bureaugAsync = response.records;
            angular.forEach(response.records, function (value,index) {
                vm.bureaugAsync.push(value);
                vm.bureaugAsync[index].name = value.cityproperName;
                allBureaus.push(value.id);
            });
        });
        vm.onSelectCallbackBureau = function (item) {
            vm.eventResult = {model: item};
            vm.selectBureauId = vm.eventResult.model.id;
        };
        vm.queryBureau = queryBureau;
        vm.addBureau = addBureau;
        vm.deleteBureau = deleteBureau;
        vm.modifyBureau = modifyBureau;
        vm.readRecords = readRecords;
        vm.readRecords(0);
        vm.dtOptions = datatablesOptions.getDatatableOption(); // 获取datatables表格设置
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5).notSortable()
        ];
        function queryBureau() {
            bureauService.queryBureau().then(function (response) {
                vm.bureau = response.records;
            });
        }
        function addBureau() {
            $location.path('/app/bureau/add-new-bureau');
        }
        function deleteBureau(bureau) {
            bureauFactory.setBureau(bureau);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: 'deleteBureau.html',
                size: 'sm',
                controller: 'bureauDeleteController',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                vm.queryBureau();
            });
        }
        function modifyBureau(bureau) {
            bureauFactory.setBureau(bureau);
            $location.path('/app/bureau/modify-bureau');
        }
        function readRecords(start_index){
            if(start_index == 0){//首页index
                bureauService.readRecords(0,'',vm.selectRegionId,vm.selectBureauId).then(function (response) {
                    vm.bureau = response.records;
                    vm.parkNumber = response.parklot_sum;
                    angular.forEach(response.records, function (value,index) {
                        vm.bureau[index].number =index+1;
                    });
                    vm.number.start = vm.bureau[0].number;
                    vm.number.next = vm.bureau[vm.bureau.length - 1].number;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.maxid = response.maxid;
                    if (response.records.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else{
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                });
            }else if(start_index == 1){//上一页
                if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                    logger.warning('已经到首页！','','没有上一页');
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }else{
                    bureauService.readRecords(vm.pagination.previous_start_index,0,vm.selectRegionId,vm.selectBureauId).then(function (response) {
                        vm.bureau = response.records;
                        vm.parkNumber = response.parklot_sum;
                        angular.forEach(response.records, function (value,index) {
                            vm.bureau[index].number = vm.number.start+index-response.records.length+1;
                        });
                        vm.number.start = vm.bureau[0].number;
                        vm.number.next = vm.bureau[vm.bureau.length - 1].number;
                        vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                        vm.pagination.previous_start_index = response.records[0].id;
                        vm.pagination.maxid = response.maxid;
                        if (response.records.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        }
                    });
                }
            }else if(start_index == 2){//下一页
                if (vm.pagination.next_start_index <= vm.pagination.minid) {
                    logger.warning('已经到最后一页！','','没有下一页');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                }else{
                    bureauService.readRecords(vm.pagination.next_start_index,1,vm.selectRegionId,vm.selectBureauId).then(function (response) {
                        vm.bureau = response.records;
                        vm.parkNumber = response.parklot_sum;
                        angular.forEach(response.records, function (value,index) {
                            vm.bureau[index].number = vm.number.number+index;
                        });
                        vm.number.start = vm.bureau[0].number;
                        vm.number.next = vm.bureau[vm.bureau.length - 1].number;
                        vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                        vm.pagination.previous_start_index = response.records[0].id;
                        vm.pagination.minid = response.minid;
                        if (response.records.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        }
                    });
                }
            }else if(start_index == 3){//加载最后一页
                bureauService.readRecords(-1,'',vm.selectRegionId,vm.selectBureauId).then(function (response) {
                    vm.bureau = response.records;
                    vm.parkNumber = response.parklot_sum;
                    angular.forEach(response.records, function (value,index) {
                        vm.bureau[index].number = response.records[0].id+index;
                    });
                    vm.number.start = vm.bureau[0].number;
                    vm.number.next = vm.bureau[vm.bureau.length - 1].number;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.minid = response.minid;
                    if (response.records.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else{
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    }
                });
            }
        }
        vm.clearAndRefresh = function () {
            vm.regiongAsync.selected = '';
            vm.bureaugAsync.selected = '';
            vm.selectRegionId = '';
            vm.selectBureauId = '';
            vm.readRecords(0);
        };
    }
})();
(function(){
    angular.module('app.basicinfo')
        .controller('bureauDeleteController',bureauDeleteController);
    bureauDeleteController.$inject = ['$uibModalInstance','bureauService','bureauFactory','logger'];
    'use strict';
    function bureauDeleteController($uibModalInstance,bureauService,bureauFactory,logger) {
        var vm = this;
        vm.deleteBureau = deleteBureau;
        vm.cancel = cancel;
        function deleteBureau() {
            bureauService.deleteBureau(bureauFactory.getBureau().id).then(function (response) {
                if(response.status === 0){
                    $uibModalInstance.close('closed');
                    logger.success('成功刪除'+bureauFactory.stationName,response.data,'操作成功！');
                }else {
                    logger.error('删除失败'+bureauFactory.stationName + '失败！！',response.data,'操作失败！');
                }
            });
        }
        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
/**
 * basic.bureau.factory.js
 * @author: yumaotao
 * @create 2017/12/2
 */
(function () {
    angular.module('app.basicinfo')
        .factory('bureauFactory', bureauFactory);
    'use strict';
    function bureauFactory(){
        var bureau = {
            id:'',//派出所id
            cityproperCode:'',//分县市局代码
            cityproperName:'',//分县市局名称
            region:'',//所属区域
            regionName:'',//所属区域名称
            regionCode:'',//所属区域代码
            regionId:''//所属区域id
        };
        return {
            setBureau: setBureau,
            getBureau: getBureau
        };
        function setBureau(cBureau) {
            bureau.id = cBureau.id;
            bureau.cityproperCode = cBureau.cityproperCode;
            bureau.cityproperName = cBureau.cityproperName;
            bureau.region = cBureau.region;
            bureau.regionName = cBureau.regionName;
            bureau.regionCode = cBureau.regionCode;
            bureau.regionId = cBureau.regionId;
        }
        function getBureau() {
            return bureau;
        }
    }
})();
(function () {
    "use strict";
    angular.module('app.basicinfo')
        .controller('modifyBureauController', modifyBureauController);
    modifyBureauController.$inject = ['$scope', '$timeout', '$location', 'bureauFactory', 'bureauService', 'toastr','regionService'];
    function modifyBureauController($scope, $timeout, $location, bureauFactory, bureauService, toastr,regionService) {
        var vm = this;
        var selectRegion = [];
        vm.regiongAsync = [];
        var allRegions = [];
        regionService.queryRegion().then(function (response) {
            vm.regiongAsync = response.records;
            angular.forEach(response.records, function (value) {
                allRegions.push(value.id);
            });
        });
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.selectRegionId = vm.eventResult.model.id;
        };
        vm.getBureau =  getBureau;
        vm.getBureau();
        function getBureau() {
            $timeout(function () {
                vm.bureau = bureauFactory.getBureau();
                vm.selectRegionId = vm.bureau.regionId;
                vm.regiongAsync.selected = vm.bureau.regionName;
            }, 500);
        };
        // 点击确认修改区域的操作
        vm.modifyBureau = function () {
            bureauService.modifyBureau(vm.bureau.id,vm.bureau.cityproperCode,vm.bureau.cityproperName,vm.selectRegionId).then(function (response) {
                if (response.status == 0) {
                    toastr.success('修改成功!!', response, {
                        closeButton: true,
                        progressBar: true,
                        positionClass: 'toast-top-center'
                    });
                    $location.path('/app/bureau');
                }
            });
        };
        // 返回上一层
        vm.backToPrevious = function () {
            $location.path('/app/bureau');
        };
    }
})();
/**
 * basic.bureau.factory.js
 * @author: yumaotao
 * @create 2016-12-29 16:01
 */
(function () {
    angular.module('app.basicinfo')
        .factory('bureauService', bureauService);
    bureauService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function bureauService($http, URL_SEED) {
        var BUREAU_URL = URL_SEED.API_URL + 'baseinfo/bureau/';
        return {
            queryBureau:queryBureau,
            addBureau: addBureau,
            deleteBureau:deleteBureau,
            modifyBureau:modifyBureau,
            readRecords:readRecords
        };
        function queryBureau() {
            return $http({
                method: 'GET',
                url: BUREAU_URL,
                params: {
                    querytype: 'all',
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function addBureau(cityproperCode,cityproperName,region) {
            var bureau = angular.toJson({
                cityproperCode: cityproperCode,
                cityproperName: cityproperName,
                region:region
            });
            return $http({
                method: 'POST',
                url: BUREAU_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: bureau,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function deleteBureau(id) {
            var bureau = angular.toJson({bureauid: id});
            return $http({
                method: 'DELETE',
                url: BUREAU_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: bureau,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function modifyBureau(bureauid,cityproperCode,cityproperName,region) {
            var bureau = angular.toJson({
                bureauid:bureauid,
                cityproperCode: cityproperCode,
                cityproperName: cityproperName,
                region:region
            });
            return $http({
                method: 'PUT',
                url: BUREAU_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: bureau,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function readRecords(start_index,pagedirect,regionId,bureauId) {
            return $http({
                method: 'GET',
                url: BUREAU_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    start_index:start_index,
                    pagedirect : pagedirect,
                    regionid:regionId,
                    bureauid:bureauId,
                    max_results: 50
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
    }
})();
/**
 * park.add.controller.js
 * @author: huangxiang
 * @create 2016-12-23 16:43
 */
(function () {
    angular.module('app.basicinfo')
        .controller('AddBusTypeCtr', AddBusTypeCtr);
    AddBusTypeCtr.$inject = ['$location', 'busTypeService', 'logger'];
    'use strict';
    function AddBusTypeCtr($location, busTypeService, logger) {
        var vm = this;
        vm.addBusType = addBusType; // 添加停车场
        vm.backToPrevious = backToPrevious; // 返回上一层菜单
        function addBusType() {
            busTypeService.addBusType(vm.bustype.genrecode,vm.bustype.genrename).then(function (response) {
                if (response.status === 0) {
                    logger.success('添加成功'+'商圈：'+vm.bustype.genrename,'操作成功');
                    $location.path('/app/bustype');
                }else if (response.status === 40004) {
                    logger.error('添加失败' + '"' + vm.bustype.genrename + '"' + '失败!', bustype.genrename, '该商圈已经存在！');
                }  else {
                    logger.error('添加失败');
                }
            });
        }
        function backToPrevious() {
            $location.path('/app/bustype');
        }
    }
})();
(function () {
    angular.module('app.basicinfo')
        .controller('BusTypeCtr', BusTypeCtr);
    BusTypeCtr.$inject = ['$location', 'busTypeService', 'DTColumnDefBuilder', 'datatablesOptions', 'busTypeFactory', '$uibModal','$document','logger'];
    'use strict';
    function BusTypeCtr($location, busTypeService, DTColumnDefBuilder, datatablesOptions, busTypeFactory, $uibModal,$document,logger) {
        var vm = this;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            next_start_index:0,
            previous_start_index:0,
            maxid: 0,
            minid: 0
        };
        vm.number={
            start:0,
            next:0
        };
        vm.BusTypeAsync = [];
        var allBusTypes = [];
        busTypeService.queryBusType().then(function (response) {
            vm.BusTypeAsync = response.records;
            angular.forEach(response.records, function (value,index) {
                vm.BusTypeAsync[index].name = value.genrename;
                allBusTypes.push(value.id);
            });
        });
        vm.onSelectCallbackBusType = function (item) {
            vm.eventResult = {model: item};
            vm.selectBusTypeId = vm.eventResult.model.id;
        };
        vm.queryBusType = queryBusType;
        vm.addBusType = addBusType;
        vm.deleteBusType = deleteBusType;
        vm.modifyBusType = modifyBusType;
        vm.readRecords = readRecords;
        vm.readRecords(0);
        vm.dtOptions = datatablesOptions.getDatatableOption();
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3).notSortable()
        ];
        function queryBusType() {
            busTypeService.queryBusType().then(function (response) {
                vm.bustype= response.records;
            });
        }
        function addBusType() {
            $location.path('/app/bustype/add-new-bustype');
        }
        function deleteBusType(busType) {
            busTypeFactory.setBusType(busType);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: 'deleteBusType.html',
                size: 'sm',
                controller: 'busTypeDeteleCtr',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                vm.queryBusType();
            });
        }
        function modifyBusType(busType) {
            busTypeFactory.setBusType(busType);
            $location.path('/app/bustype/modify-bustype');
        }
        function readRecords(start_index){
            if(start_index == 0){
                busTypeService.readRecords(0,'',vm.selectBusTypeId).then(function (response) {
                    vm.bustype= response.records;
                    angular.forEach(response.records, function (value,index) {
                        vm.bustype[index].number =index+1;
                    });
                    vm.number.start = vm.bustype[0].number;
                    vm.number.next = vm.bustype[vm.bustype.length - 1].number;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.maxid = response.maxid;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }else if(start_index == 1){
                if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                    logger.warning('已经到首页！','','没有上一页');
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }else{
                    busTypeService.readRecords(vm.pagination.previous_start_index,0,vm.selectBusTypeId).then(function (response) {
                        vm.bustype= response.records;
                        angular.forEach(response.records, function (value,index) {
                            vm.bustype[index].number = vm.number.start+index-response.records.length+1;
                        });
                        vm.number.start = vm.bustype[0].number;
                        vm.number.next = vm.bustype[vm.bustype.length - 1].number;
                        vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                        vm.pagination.previous_start_index = response.records[0].id;
                        vm.pagination.maxid = response.maxid;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    });
                }
            }else if(start_index == 2){
                if (vm.pagination.next_start_index <= vm.pagination.minid) {
                    logger.warning('已经到最后一页！','','没有下一页');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                }else{
                    busTypeService.readRecords(vm.pagination.next_start_index,1,vm.selectBusTypeId).then(function (response) {
                        vm.bustype= response.records;
                        angular.forEach(response.records, function (value,index) {
                            vm.bustype[index].number = vm.number.number+index;
                        });
                        vm.number.start = vm.bustype[0].number;
                        vm.number.next = vm.bustype[vm.bustype.length - 1].number;
                        vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                        vm.pagination.previous_start_index = response.records[0].id;
                        vm.pagination.minid = response.minid;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    });
                }
            }else if(start_index == 3){
                busTypeService.readRecords(-1,'',vm.selectBusTypeId).then(function (response) {
                    vm.bustype= response.records;
                    angular.forEach(response.records, function (value,index) {
                        vm.bustype[index].number = response.records[0].id+index;
                    });
                    vm.number.start = vm.bustype[0].number;
                    vm.number.next = vm.bustype[vm.bustype.length - 1].number;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.minid = response.minid;
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                });
            }
        }
        vm.clearAndRefresh = function () {
            vm.BusTypeAsync.selected = '';
            vm.selectBusTypeId = '';
            vm.readRecords(0);
        };
    }
})();
/**
 * park.modal.controller.js
 * @author: huangxiang
 * @create 2016-12-23 15:52
 */
(function(){
    angular.module('app.basicinfo')
        .controller('busTypeDeteleCtr',busTypeDeteleCtr);
    busTypeDeteleCtr.$inject = ['$uibModalInstance','busTypeService','busTypeFactory','logger'];
    'use strict';
    function busTypeDeteleCtr($uibModalInstance,busTypeService,busTypeFactory,logger) {
        var vm = this;
        vm.deleteBusType = deleteBusType;
        vm.cancel = cancel;
        function deleteBusType() {
            busTypeService.deleteBusType(busTypeFactory.getBusType().id).then(function (response) {
                if(response.status === 0){
                    $uibModalInstance.close('closed');
                    logger.success('成功刪除'+busTypeFactory.name,response.data,'操作成功！');
                }else {
                    logger.error('删除失败'+busTypeFactory.name + '失败！！',response.data,'操作失败！');
                }
            });
        }

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
/**
 * basic.region.factory.js
 * @author: yumaotao
 * 停车场性质信息表
 * @create 2017/11/6
 */
(function () {
    angular.module('app.basicinfo')
        .factory('busTypeFactory', busTypeFactory);
    'use strict';
    function busTypeFactory(){
        var busType = {
            id:'',//序号
            genrecode:'',//类型代码
            genrename:'',//类型名称
        };
        return {
            setBusType: setBusType,
            getBusType: getBusType
        };
        function setBusType(cBusType) {
            busType.id = cBusType.id;
            busType.genrecode = cBusType.genrecode;
            busType.genrename = cBusType.genrename;
        }
        function getBusType() {
            return busType;
        }
    }
})();
/**
 * Created by huangxiang  on 2016/11/23 0023.
 * @author:
 * Module:
 * feature:
 */
(function () {
    "use strict";
    angular.module('app.basicinfo')
        .controller('ModifyBusTypeCtr', ModifyBusTypeCtr);
    ModifyBusTypeCtr.$inject = ['$scope', '$timeout', '$location', 'busTypeFactory', 'busTypeService', 'toastr'];
    function ModifyBusTypeCtr($scope, $timeout, $location, busTypeFactory, busTypeService, toastr) {
        var vm = this;
        vm.getBusType =  getBusType;
        vm.getBusType();
        function getBusType() {
            $timeout(function () {
                vm.bustype = busTypeFactory.getBusType();
            }, 500);
        };
        // 点击确认修改区域的操作
        vm.modifyBusType = function () {
            busTypeService.modifyBusType(vm.bustype.id,vm.bustype.genrecode,vm.bustype.genrename).then(function (response) {
                if (response.status === 0) {
                    toastr.success('修改成功!!', response, {
                        closeButton: true,
                        progressBar: true,
                        positionClass: 'toast-top-center'
                    });
                    $location.path('/app/bustype');
                }
            });
        };
        // 返回上一层
        vm.backToPrevious = function () {
            $location.path('/app/bustype');
        };
    }
})();
/**
 * bill.online.service.js.js
 * @author: huangxiang
 * @create 2016-12-29 16:01
 */
(function () {
    angular.module('app.basicinfo')
        .factory('busTypeService', busTypeService);
    busTypeService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function busTypeService($http, URL_SEED) {
        // var ACCOUNT_BALANCE_URL = URL_SEED.API_URL + 'operation/reconcile/';
        var BUSTYPE_URL = URL_SEED.API_URL + 'baseinfo/businesstype/'
        return {
            queryBusType:queryBusType,
            addBusType: addBusType,
            deleteBusType:deleteBusType,
            modifyBusType:modifyBusType,
            readRecords:readRecords
        };
        function queryBusType() {
            return $http({
                method: 'GET',
                url: BUSTYPE_URL,
                params: {
                    querytype: 'all',
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function addBusType(genrecode,genrename) {
            var busType = angular.toJson({
                genrecode: genrecode,
                genrename:genrename
            });
            return $http({
                method: 'POST',
                url: BUSTYPE_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: busType,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function deleteBusType(id) {
            var busType = angular.toJson({businid: id});
            return $http({
                method: 'DELETE',
                url: BUSTYPE_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: busType,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function modifyBusType(id,genrecode,genrename) {
            var busType = angular.toJson({
                businid:id,
                genrecode: genrecode,
                genrename: genrename
            });
            return $http({
                method: 'PUT',
                url: BUSTYPE_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: busType,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function readRecords(start_index,pagedirect,bustypeId) {
            return $http({
                method: 'GET',
                url: BUSTYPE_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    start_index:start_index,
                    pagedirect : pagedirect,
                    businid:bustypeId
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
    }
})();
(function () {
    angular.module('app.basicinfo')
        .controller('AddCommunityCtr', AddCommunityCtr);
    AddCommunityCtr.$inject = ['$location', 'communityService', 'logger','policeService'];
    'use strict';
    function AddCommunityCtr($location, communityService, logger,policeService) {
        var vm = this;
        vm.addCommunity = addCommunity; // 添加停车场
        vm.backToPrevious = backToPrevious; // 返回上一层菜单
        //派出所信息
        var selectPolice = [];//派出所信息
        vm.policeAsync = [];
        var allPolices = [];
        policeService.queryPolice().then(function (response) {
            angular.forEach(response.records, function (value,index) {
                vm.policeAsync.push(value);
                vm.policeAsync[index].name = value.stationName;
                allPolices.push(value.id);
            });
        });
        vm.onSelectCallbackPolice = function (item) {
            vm.eventResult = {model: item};
            vm.seletPolice.id = vm.eventResult.model.id;
        };
        vm.seletPolice = {
            id: undefined
        };
        function addCommunity() {
            communityService.addCommunity(vm.community.code,vm.community.name,vm.seletPolice.id).then(function (response) {
                if (response.status === 0) {
                    logger.success('添加成功'+'社区：'+vm.community.name,'操作成功');
                    $location.path('/app/community');
                }else if (response.status === 40004) {
                    logger.error('添加失败' + '"' + vm.community.name + '"' + '失败!', vm.community.name, '该商圈已经存在！');
                }  else {
                    logger.error('添加失败');
                }
            });
        }
        function backToPrevious() {
            $location.path('/app/community');
        }
    }
})();
(function () {
    angular.module('app.basicinfo')
        .controller('communityCtr', communityCtr);
    communityCtr.$inject = ['$location', 'communityService', 'DTColumnDefBuilder', 'datatablesOptions', 'communityFactory', '$uibModal','$document','logger'];
    'use strict';
    function communityCtr($location, communityService, DTColumnDefBuilder, datatablesOptions, communityFactory, $uibModal,$document,logger) {
        var vm = this;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            next_start_index:0,
            previous_start_index:0,
            maxid: 0,
            minid: 0
        };
        vm.number={
            start:0,
            next:0
        };
        vm.queryCommunity = queryCommunity;
        vm.addCommunity = addCommunity;
        vm.deleteCommunity = deleteCommunity;
        vm.modifyCommunity = modifyCommunity;
        vm.readRecords = readRecords;
        vm.readRecords(0);
        vm.dtOptions = datatablesOptions.getDatatableOption();
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6).notSortable()
        ];
        function queryCommunity() {
            communityService.queryCommunity().then(function (response) {
                vm.community = response.records;
            });
        }
        function addCommunity() {
            $location.path('/app/community/add-new-community');
        }
        function deleteCommunity(Community) {
            communityFactory.setCommunity(Community);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: 'deleteCommunity.html',
                size: 'sm',
                controller: 'CommunityDeteleCtr',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                vm.queryCommunity();
            });
        }
        function modifyCommunity(Community) {
            communityFactory.setCommunity(Community);
            $location.path('/app/community/modify-community');
        }
        function readRecords(start_index){
            if(start_index == 0){//首页index
                communityService.readRecords(0,'').then(function (response) {
                    vm.community = response.records;
                    vm.parkNumber = response.parklot_sum;
                    angular.forEach(response.records, function (value,index) {
                        vm.community[index].number =index+1;
                    });
                    vm.number.start = vm.community[0];
                    vm.number.next = vm.community[vm.community.length - 1].number;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.maxid = response.maxid;
                    if (response.records.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else{
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                });
            }else if(start_index == 1){//上一页
                if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                    logger.warning('已经到首页！','','没有上一页');
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }else{
                    communityService.readRecords(vm.pagination.previous_start_index,0).then(function (response) {
                        vm.community = response.records;
                        vm.parkNumber = response.parklot_sum;
                        angular.forEach(response.records, function (value,index) {
                            vm.community[index].number = vm.number.start+index-response.records.length+1;
                        });
                        vm.number.start = vm.community[0];
                        vm.number.next = vm.community[vm.community.length - 1].number;
                        vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                        vm.pagination.previous_start_index = response.records[0].id;
                        vm.pagination.maxid = response.maxid;
                        if (response.records.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        }
                    });
                }
            }else if(start_index == 2){//下一页
                if (vm.pagination.next_start_index <= vm.pagination.minid) {
                    logger.warning('已经到最后一页！','','没有下一页');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                }else{
                    communityService.readRecords(vm.pagination.next_start_index,1).then(function (response) {
                        vm.community = response.records;
                        vm.parkNumber = response.parklot_sum;
                        angular.forEach(response.records, function (value,index) {
                            vm.community[index].number = vm.number.number+index;
                        });
                        vm.number.start = vm.community[0];
                        vm.number.next = vm.community[vm.community.length - 1].number;
                        vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                        vm.pagination.previous_start_index = response.records[0].id;
                        vm.pagination.minid = response.minid;
                        if (response.records.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        }
                    });
                }
            }else if(start_index == 3){//加载最后一页
                communityService.readRecords(-1,'').then(function (response) {
                    vm.community = response.records;
                    vm.parkNumber = response.parklot_sum;
                    angular.forEach(response.records, function (value,index) {
                        vm.community[index].number = response.records[0].id+index;
                    });
                    vm.number.start = vm.community[0];
                    vm.number.next = vm.community[vm.community.length - 1].number;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.minid = response.minid;
                    if (response.records.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else{
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    }
                });
            }
        }
    }
})();
(function () {
    angular.module('app.basicinfo')
        .factory('communityFactory', communityFactory);
    'use strict';
    function communityFactory(){
        var community = {
            id:'',//序号
            code:'',//类型代码
            name:'',//类型名称
            policeStationid:'',//所属警局id
            policeStationCode:'',//所属警局代码
            policeStationName:''//所属警局名称
        };
        return {
            setCommunity: setCommunity,
            getCommunity: getCommunity
        };
        function setCommunity(cCommunity) {
            community.id = cCommunity.id;
            community.code = cCommunity.code;
            community.name = cCommunity.name;
            community.policeStationid = cCommunity.policeStationid;
            community.policeStationCode = cCommunity.policeStationCode;
            community.policeStationName = cCommunity.policeStationName;
        }
        function getCommunity() {
            return community;
        }
    }
})();
(function () {
    "use strict";
    angular.module('app.basicinfo')
        .controller('ModifyCommunityCtr', ModifyCommunityCtr);
    ModifyCommunityCtr.$inject = ['$scope', '$timeout', '$location', 'communityFactory', 'communityService', 'toastr','policeService'];
    function ModifyCommunityCtr($scope, $timeout, $location, communityFactory, communityService, toastr,policeService) {
        var vm = this;
        vm.getCommunity =  getCommunity;
        vm.getCommunity();
        function getCommunity() {
            $timeout(function () {
                vm.community = communityFactory.getCommunity();
            }, 500);
        };
        //派出所信息
        var selectPolice = [];//派出所信息
        vm.policeAsync = [];
        var allPolices = [];
        policeService.queryPolice().then(function (response) {
            angular.forEach(response.records, function (value,index) {
                vm.policeAsync.push(value);
                vm.policeAsync[index].name = value.stationName;
                allPolices.push(value.id);
            });
        });
        vm.onSelectCallbackPolice = function (item) {
            vm.eventResult = {model: item};
            vm.seletPolice.id = vm.eventResult.model.id;
        };
        vm.seletPolice = {
            id: undefined
        };
        // 点击确认修改区域的操作
        vm.modifyCommunity = function () {
            communityService.modifyCommunity(vm.community.id,vm.community.code,vm.community.name,vm.seletPolice.id).then(function (response) {
                if (response.status === 0) {
                    toastr.success('修改成功!!', response, {
                        closeButton: true,
                        progressBar: true,
                        positionClass: 'toast-top-center'
                    });
                    $location.path('/app/community');
                }
            });
        };
        // 返回上一层
        vm.backToPrevious = function () {
            $location.path('/app/community');
        };
    }
})();
(function () {
    angular.module('app.basicinfo')
        .factory('communityService', communityService);
    communityService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function communityService($http, URL_SEED) {
        var COMMUNITY_URL = URL_SEED.API_URL + 'baseinfo/community/'
        return {
            queryCommunity:queryCommunity,
            addCommunity: addCommunity,
            deleteCommunity:deleteCommunity,
            modifyCommunity:modifyCommunity,
            readRecords:readRecords
        };
        //查询区域信息
        function queryCommunity() {
            return $http({
                method: 'GET',
                url: COMMUNITY_URL,
                params: {
                    querytype: 'all',
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        //新增区域信息
        function addCommunity(code,name,policeStation) {
            var Community = angular.toJson({
                code: code,
                name:name,
                policeStation:policeStation
            });
            return $http({
                method: 'POST',
                url: COMMUNITY_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: Community,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        //删除区域信息
        function deleteCommunity(commid) {
            var Community = angular.toJson({commid: commid});
            return $http({
                method: 'DELETE',
                url: COMMUNITY_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: Community,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        //修改区域信息
        function modifyCommunity(commid,code,name,policeStation) {
            var Community = angular.toJson({
                commid:commid,
                code: code,
                name: name,
                policeStation:policeStation
            });
            return $http({
                method: 'PUT',
                url: COMMUNITY_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: Community,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function readRecords(start_index,pagedirect) {
            var readRecords = angular.toJson({
                start_index:start_index,
                pagedirect : pagedirect       // 组织名称
            });
            return $http({
                method: 'GET',
                url: COMMUNITY_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: readRecords,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
    }
})();
/**
 * park.add.controller.js
 * @author: huangxiang
 * @create 2016-12-23 16:43
 */
(function () {
    angular.module('app.basicinfo')
        .controller('AddCouponCtr', AddCouponCtr);
    AddCouponCtr.$inject = ['$location', 'couponService', 'logger','$scope'];
    'use strict';
    function AddCouponCtr($location, couponService, logger,$scope) {
        var vm = this;
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        /*时间日历设置------------------------------------------------*/
        vm.addCoupon = addCoupon; // 添加停车场
        vm.backToPrevious = backToPrevious; // 返回上一层菜单
        function addCoupon() {
            moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD')
            vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
            vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            vm.coupon_valid_begintime = moment(new Date(new Date(vm.coupon.coupon_valid_begintime))).format('YYYY-MM-DD');
            vm.coupon_valid_endtime = moment(new Date(new Date(vm.coupon.coupon_valid_endtime))).format('YYYY-MM-DD');
            couponService.addCoupon(vm.coupon.campaign,vm.coupon.campaign_displayname,vm.coupon.denomination*100,vm.coupon.num_per_user,vm.coupon.total,vm.valid_begintime,vm.valid_endtime,vm.coupon_valid_begintime,vm.coupon_valid_endtime,vm.coupon.isvalid,vm.coupon.usemode).then(function (response) {
                if (response.status === 0) {
                    logger.success('添加成功'+'优惠券：'+vm.coupon.campaign,'操作成功');
                    $location.path('/app/coupon');
                }else if (response.status === 40004) {
                    logger.error('添加失败' + '"' + vm.coupon.campaign + '"' + '失败!', response.data, '该区域已经存在！');
                }  else {
                    logger.error('添加失败');
                }
            });
        }
        function backToPrevious() {
            $location.path('/app/coupon');
        }
    }
})();
/**
 * region.controller.js
 * @author: yumaotao
 * @create 2017/11/6
 * @feather: 区域信息表单初始化配置
 */
(function () {
    angular.module('app.basicinfo')
        .controller('CouponCtr', CouponCtr);
    CouponCtr.$inject = ['$location', 'couponService', 'DTColumnDefBuilder', 'datatablesOptions', 'couponFactory', '$uibModal','$document','logger'];
    'use strict';
    function CouponCtr($location, couponService, DTColumnDefBuilder, datatablesOptions, couponFactory, $uibModal,$document,logger) {
        var vm = this;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            next_start_index:0,
            previous_start_index:0,
            maxid: 0,
            minid: 0
        };
        vm.number={
            start:0,
            next:0
        };
        vm.queryCoupon = queryCoupon; // 查询所有信息
        vm.addCoupon = addCoupon; //新增优惠券
        vm.deleteCoupon = deleteCoupon; //删除优惠券
        vm.modifyCoupon = modifyCoupon; //修改优惠券
        vm.readRecords = readRecords;
        vm.readRecords(0); // 初始化优惠券表格数据
        vm.dtOptions = datatablesOptions.getDatatableOption(); // 获取datatables表格设置
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8),
            DTColumnDefBuilder.newColumnDef(9),
            DTColumnDefBuilder.newColumnDef(10),
            DTColumnDefBuilder.newColumnDef(11),
            DTColumnDefBuilder.newColumnDef(12).notSortable()
        ];
        /**
         * 查询所有优惠券
         */
        function queryCoupon() {
            couponService.queryCoupon().then(function (response) {
                vm.coupon = response.data.records;
                angular.forEach(response.data.records, function (value,index) {
                    vm.coupon[index].mony = response.data.records[index].denomination/100;
                });
            });
        }
        /**
         * 新增区域.跳转至新增优惠券界面
         */
        function addCoupon() {
            $location.path('/app/coupon/add-new-coupon');
        }
        /**
         * 打开删除优惠券的modal;
         * @param parking
         */
        function deleteCoupon(coupon) {
            couponFactory.setCoupon(coupon);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: 'deleteCoupon.html',
                size: 'sm',
                controller: 'CouponDeteleCtr',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                vm.readRecords(0);
            });
        }
        /**
         * 修改优惠券信息，跳转至修改优惠券信息界面
         * @param region 当前要修改的区域
         */
        function modifyCoupon(coupon) {
            couponFactory.setCoupon(coupon);
            $location.path('/app/coupon/modify-coupon');
        }
        function readRecords(start_index){
            if(start_index == 0){//首页index
                couponService.readRecords(0,'').then(function (response) {
                    vm.coupon =  response.data.records;
                    angular.forEach( response.data.records, function (value,index) {
                        vm.coupon[index].mony = response.data.records[index].denomination/100;
                    });
                    vm.number.start = vm.coupon[0];
                    vm.number.next = vm.coupon[vm.coupon.length - 1].number;
                    vm.pagination.next_start_index =  response.data.records[ response.data.records.length - 1].id;
                    vm.pagination.previous_start_index =  response.data.records[0].id;
                    vm.pagination.maxid = response.maxid;
                    if ( response.data.records.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else{
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                });
            }else if(start_index == 1){//上一页
                if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                    logger.warning('已经到首页！','','没有上一页');
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }else{
                    couponService.readRecords(vm.pagination.previous_start_index,0).then(function (response) {
                        vm.coupon =  response.data.records;
                        angular.forEach( response.data.records, function (value,index) {
                            vm.coupon[index].mony = response.data.records[index].denomination/100;
                        });
                        vm.number.start = vm.coupon[0];
                        vm.number.next = vm.coupon[vm.coupon.length - 1].number;
                        vm.pagination.next_start_index =  response.data.records[ response.data.records.length - 1].id;
                        vm.pagination.previous_start_index =  response.data.records[0].id;
                        vm.pagination.maxid = response.maxid;
                        if ( response.data.records.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        }
                    });
                }
            }else if(start_index == 2){//下一页
                if (vm.pagination.next_start_index <= vm.pagination.minid) {
                    logger.warning('已经到最后一页！','','没有下一页');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                }else{
                    couponService.readRecords(vm.pagination.next_start_index,1).then(function (response) {
                        vm.coupon =  response.data.records;
                        angular.forEach( response.data.records, function (value,index) {
                            vm.coupon[index].mony = response.data.records[index].denomination/100;
                        });
                        vm.number.start = vm.coupon[0];
                        vm.number.next = vm.coupon[vm.coupon.length - 1].number;
                        vm.pagination.next_start_index =  response.data.records[ response.data.records.length - 1].id;
                        vm.pagination.previous_start_index =  response.data.records[0].id;
                        vm.pagination.minid = response.minid;
                        if ( response.data.records.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        }
                    });
                }
            }else if(start_index == 3){//加载最后一页
                couponService.readRecords(-1,'').then(function (response) {
                    vm.coupon =  response.data.records;
                    angular.forEach( response.data.records, function (value,index) {
                        vm.coupon[index].mony = response.data.records[index].denomination/100;
                    });
                    vm.number.start = vm.coupon[0];
                    vm.number.next = vm.coupon[vm.coupon.length - 1].number;
                    vm.pagination.next_start_index =  response.data.records[ response.data.records.length - 1].id;
                    vm.pagination.previous_start_index =  response.data.records[0].id;
                    vm.pagination.minid = response.minid;
                    if ( response.data.records.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else{
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    }
                });
            }
        }
    }
})();
/**
 * park.modal.controller.js
 * @author: huangxiang
 * @create 2016-12-23 15:52
 */
(function(){
    angular.module('app.basicinfo')
        .controller('CouponDeteleCtr',CouponDeteleCtr);
    CouponDeteleCtr.$inject = ['$uibModalInstance','couponService','couponFactory','logger'];
    'use strict';
    function CouponDeteleCtr($uibModalInstance,couponService,couponFactory,logger) {
        var vm = this;
        vm.deleteCoupon = deleteCoupon;
        vm.cancel = cancel;
        function deleteCoupon() {
            couponService.deleteRegion(couponFactory.getCoupon().id).then(function (response) {
                if(response.status === 0){
                    $uibModalInstance.close('closed');
                    logger.success('成功刪除'+couponFactory.name,response.data,'操作成功！');
                }else {
                    logger.error('删除失败'+couponFactory.name + '失败！！',response.data,'操作失败！');
                }
            });
        }
        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
/**
 * basic.region.factory.js
 * @author: yumaotao
 * @create 2017/11/6
 */
(function () {
    angular.module('app.basicinfo')
        .factory('couponFactory', couponFactory);
    'use strict';
    function couponFactory(){
        var coupon = {
            id:'',//序号
            campaign:'',//促销活动名称
            campaign_displayname:'',//促销活动显示名称
            denomination:'',//面额，单位元
            num_per_user:'',//每用户该券的数额
            total:'',//优惠券总数
            valid_begintime:'',//活动开始时间
            valid_endtime:'',//活动结束时间
            coupon_valid_begintime:'',//券有效开始时间
            coupon_valid_endtime:'',//券有效结束时间
            isvalid:false,//该标志只控制活动，不控制券
            usemode:''//是否能多张一起使用或者和其它的优惠券一起使用
        };
        return {
            setCoupon: setCoupon,
            getCoupon: getCoupon
        };
        function setCoupon(cCoupon) {
            coupon.id = cCoupon.id;
            coupon.campaign = cCoupon.campaign;
            coupon.campaign_displayname = cCoupon.campaign_displayname;
            coupon.denomination = cCoupon.denomination;
            coupon.num_per_user = cCoupon.num_per_user;
            coupon.total = cCoupon.total;
            coupon.valid_begintime = cCoupon.valid_begintime;
            coupon.valid_endtime = cCoupon.valid_endtime;
            coupon.coupon_valid_begintime = cCoupon.coupon_valid_begintime;
            coupon.coupon_valid_endtime = cCoupon.coupon_valid_endtime;
            coupon.isvalid = cCoupon.isvalid;
            coupon.usemode = cCoupon.usemode;
        }
        function getCoupon() {
            return coupon;
        }
    }
})();
(function () {
    angular.module('app.basicinfo')
        .controller('CouponManController', CouponManController);
    CouponManController.$inject = ['CouponManService', '$scope', 'DTColumnDefBuilder', '$document','StatusCode','logger', 'datatablesOptions'];
    'use strict';
    function CouponManController(CouponManService, $scope, DTColumnDefBuilder, $document,StatusCode,logger,datatablesOptions) {
        var vm = this;
        // i18nService.setCurrentLang('zh-cn');
        // vm.gridOptions = UiGridOptions.getUiGridOption();
        // vm.gridOptions.enablePaginationControls = false;
        // vm.coupon = [];
        // vm.gridOptions.columnDefs = [
        //     {field: 'id', displayName: '序号', width: '10%',
        //         headerCellFilter: 'translate',
        //         headerCellClass: 'grid-align',
        //         cellClass: 'grid-align'
        //     },
        //     {field: 'meta', displayName: '活动id',
        //         headerCellFilter: 'translate',
        //         headerCellClass: 'grid-align',
        //         cellClass: 'grid-align'
        //     },
        //     {field: 'user', displayName: '用户ID',
        //         headerCellFilter: 'translate',
        //         headerCellClass: 'grid-align',
        //         cellClass: 'grid-align'
        //     },
        //     {field: 'campaign', displayName: '活动名称',
        //         headerCellFilter: 'translate',
        //         headerCellClass: 'grid-align',
        //         cellClass: 'grid-align'
        //     },
        //     {field: 'campaign_displayname', displayName: '活动显示名称',
        //         headerCellFilter: 'translate',
        //         headerCellClass: 'grid-align',
        //         cellClass: 'grid-align'
        //     },
        //     {field: 'valid_begintime', displayName: '有效起始时间',
        //         headerCellFilter: 'translate',
        //         headerCellClass: 'grid-align',
        //         cellClass: 'grid-align',
        //     },
        //     {field: 'valid_endtime', displayName: '终止时间',
        //         headerCellFilter: 'translate',
        //         headerCellClass: 'grid-align',
        //         cellClass: 'grid-align',
        //     },
        //     {field: 'createdtime', displayName: '创建时间',
        //         headerCellFilter: 'translate',
        //         headerCellClass: 'grid-align',
        //         cellClass: 'grid-align',
        //     }
        // ];
        vm.dtOptions = datatablesOptions.getDatatableOption();
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8)
        ];
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            maxid: 0,
            minid: 0,
            pageSize: 100,
            pageNumber: 0,
            next_start_index: 0,
            previous_start_index: 0,
            totalItems: null,
            now_start_index:0
        };

        /*加载上一页*/
        vm.loadPreviousPage = function () {
            if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                logger.warning('已经到首页！','','没有上一页');
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
            } else {
                CouponManService.readRecords(vm.pagination.previous_start_index, vm.pagination.pageSize, vm.pagination.pagetype.pervious_page).then(function (response) {
                    vm.coupon = response.records;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.maxid = response.maxid;
                    if (vm.coupon.length < 50) {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }
        };
        /*加载下一页*/
        vm.loadNextPage = function () {
            if (vm.pagination.next_start_index <= vm.pagination.minid || vm.coupon.length < 50) {
                logger.warning('已经到最后一页！','','没有下一页');
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
            } else {
                CouponManService.readRecords(vm.pagination.next_start_index, vm.pagination.pageSize, vm.pagination.pagetype.next_page).then(function (response) {
                    vm.coupon = response.records;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.minid = response.minid;
                    if (vm.coupon.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });
            }
        };
        /*加载首页*/
        vm.loadFistPage = function () {
            CouponManService.readHome().then(function (response) {
                if (response.status === StatusCode.SUCCESS && response.records.length !== 0) {
                    vm.coupon = response.records;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.maxid = response.maxid;
                    vm.pagination.pageNumber = 1;
                    // 如果记录少于20条，则灰掉所有翻页按钮
                    if (vm.coupon.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        // 否则只灰掉上一页按钮，首页留作刷新用
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === 10003) {
                    logger.error('数据库发生错误！',response.detail,'查找失败！');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                } else {
                    logger.warning('没有找到停车状态情况',response.detail,'没有停车记录');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }
            });
        };
        /*加载末页*/
        vm.loadLastPage = function () {
            ParkingStateService.readLastPage().then(function (response) {
                vm.coupon = response.records;
                vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                vm.pagination.previous_start_index = response.records[0].id;
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
            });
        };
        vm.loadFistPage();
        /*清除查找条件*/
        vm.clearAndRefresh = function () {
            vm.eventResult.model = undefined;
            vm.parkingAsync.selected = undefined;
            vm.seletPark.id = undefined;
            vm.search_plate_number = undefined;
            vm.loadFistPage();
        };
    }
})();
/**
 * Created by huangxiang  on 2016/11/24 0024.
 * @author: huangxiang
 * Module: vehicle.in.service.js
 * feature: 停车入场记录与后台交互service
 */
(function () {
    angular.module('app.basicinfo')
        .service('CouponManService',CouponManService);
    CouponManService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function CouponManService($http, URL_SEED) {
        var self = this;
        var COUPONMAN_URL = URL_SEED.API_URL + 'operation/couponman/';
        /*获取首页记录*/
        self.readHome = function () {
            return $http({
                method: 'GET',
                url: COUPONMAN_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    max_results: 100,
                    start_index: 0,
                },
                withCredentials: true,
                ignoreLoadingBar: true
            }).then(function (response) {
                return response.data;
            });
        };
        self.readRecords = function (start_index, max_result, pagetype) {
            return $http({
                method: 'GET',
                url: COUPONMAN_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    start_index: start_index,
                    max_results: max_result,
                    pagedirect: pagetype
                },
                withCredentials: true,
                ignoreLoadingBar: true
            }).then(function (response) {
                return response.data;
            });
        };

        /*获取尾页记录*/
        self.readLastPage = function () {
            return $http({
                method: 'GET',
                url: COUPONMAN_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    max_results: 50,
                    start_index: -1
                },
                withCredentials: true,
                ignoreLoadingBar: true
            }).then(function (response) {
                return response.data;
            });
        };
    }
})();
/**
 * Created by huangxiang  on 2016/11/23 0023.
 * @author:
 * Module:
 * feature:
 */
(function () {
    "use strict";
    angular.module('app.basicinfo')
        .controller('ModifyCouponCtr', ModifyCouponCtr);
    ModifyCouponCtr.$inject = ['$scope', '$timeout', '$location', 'couponFactory', 'couponService', 'toastr'];
    function ModifyCouponCtr($scope, $timeout, $location, couponFactory, couponService, toastr) {
        var vm = this;
        vm.getCoupon =  getCoupon;
        vm.getCoupon();
        function getCoupon() {
            $timeout(function () {
                vm.coupon = couponFactory.getCoupon();
            }, 500);
        };
        // 点击确认修改区域的操作
        vm.modifyRegion = function () {
            couponService.modifyCoupon(vm.coupon.id,vm.coupon.isvalid).then(function (response) {
                if (response.status ==  0) {
                    toastr.success('修改成功!!', response, {
                        closeButton: true,
                        progressBar: true,
                        positionClass: 'toast-top-center'
                    });
                    $location.path('/app/coupon');
                }
            });
        };
        // 返回上一层
        vm.backToPrevious = function () {
            $location.path('/app/coupon');
        };
    }
})();
/**
 * bill.online.service.js.js
 * @author: huangxiang
 * @create 2016-12-29 16:01
 */
(function () {
    angular.module('app.basicinfo')
        .factory('couponService', couponService);
    couponService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function couponService($http, URL_SEED) {
        // var COUPON_URl =URL_SEED.API_URL+'';
        var COUPON_URL =URL_SEED.API_URL+'operation/couponmetaman/';
        return {
            queryCoupon:queryCoupon,//查询优惠券信息
            addCoupon: addCoupon,//新增优惠券信息
            deleteCoupon:deleteCoupon,//删除优惠券信息
            modifyCoupon:modifyCoupon,//修改优惠券信息
            readRecords:readRecords
        };
        //查询区域信息
        function queryCoupon() {
            return $http({
                method: 'GET',
                url: COUPON_URL,
                params: {
                    querytype: 'all',
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        //新增区域信息
        function addCoupon(campaign,campaign_displayname,denomination,num_per_user,total,valid_begintime,valid_endtime,coupon_valid_begintime,coupon_valid_endtime,isvalid,usemode) {
            var coupon = angular.toJson({
                campaign:campaign,
                campaign_displayname:campaign_displayname,
                denomination:denomination,
                num_per_user:num_per_user,
                total:total,
                valid_begintime:valid_begintime,
                valid_endtime:valid_endtime,
                coupon_valid_begintime:coupon_valid_begintime,
                coupon_valid_endtime:coupon_valid_endtime,
                isvalid:isvalid,
                usemode:usemode
            });
            return $http({
                method: 'POST',
                url: COUPON_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: coupon,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        //删除区域信息
        function deleteCoupon(id) {
            var coupon = angular.toJson({id: id});
            return $http({
                method: 'DELETE',
                url: COUPON_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: coupon,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        //修改区域信息
        function modifyCoupon(id,isvalid) {
            var coupon = angular.toJson({
                couponmetaid:id,
                isvalid:isvalid
            });
            return $http({
                method: 'PUT',
                url: COUPON_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: coupon,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function readRecords(start_index,pagedirect) {
            var readRecords = angular.toJson({
                start_index:start_index,
                pagedirect : pagedirect       // 组织名称
            });
            return $http({
                method: 'GET',
                url: COUPON_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: readRecords,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
    }
})();
/**
 * park.add.controller.js
 * @author: huangxiang
 * @create 2016-12-23 16:43
 */
(function () {
    angular.module('app.basicinfo')
        .controller('addPoliceController', addPoliceController);
    addPoliceController.$inject = ['$location', 'policeService', 'logger','bureauService'];
    'use strict';
    function addPoliceController($location, policeService, logger,bureauService) {
        var vm = this;
        var selectRegion = [];
        vm.bureaugAsync = [];
        var allBureaus = [];
        bureauService.queryBureau().then(function (response) {
            // vm.bureaugAsync = response.records;
            angular.forEach(response.records, function (value,index) {
                vm.bureaugAsync.push(value);
                vm.bureaugAsync[index].name = value.cityproperName;
                allBureaus.push(value.id);
            });
        });
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.selectBureau.id = vm.eventResult.model.id;
        };
        vm.selectBureau = {
            id: undefined
        };
        vm.addPolice = addPolice;
        vm.backToPrevious = backToPrevious;
        function addPolice() {
            vm.police.bureauid = vm.selectBureau.id ;
            policeService.addPolice(vm.police.stationCode,vm.police.stationName,vm.police.bureauid).then(function (response) {
                if (response.status === 0) {
                    logger.success('添加成功'+'警局：'+vm.police.stationName,'操作成功');
                    $location.path('/app/police');
                }else if (response.status === 40004) {
                    logger.error('添加失败' + '"' + vm.police.stationName + '"' + '失败!', vm.police.stationName, '该警局已经存在！');
                }  else {
                    logger.error('添加失败');
                }
            });
        }
        function backToPrevious() {
            $location.path('/app/police');
        }
    }
})();
/**
 * Town.controller.js
 * @author: yumaotao
 * @create 2017/11/6
 * @feather: 区域信息表单初始化配置
 */
(function () {
    angular.module('app.basicinfo')
        .controller('policeController', policeController);
    policeController.$inject = ['$location', 'policeService', 'DTColumnDefBuilder', 'datatablesOptions', 'policeFactory', '$uibModal','logger','$document','regionService','bureauService'];
    'use strict';
    function policeController($location, policeService, DTColumnDefBuilder, datatablesOptions, policeFactory, $uibModal,logger,$document,regionService,bureauService) {
        var vm = this;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            next_start_index:0,
            previous_start_index:0,
            maxid: 0,
            minid: 0
        };
        vm.number={
            start:0,
            next:0
        };
        vm.regiongAsync = [];
        var allRegions = [];
        policeService.queryPolice().then(function (response) {
            // vm.regiongAsync = response.records;
            angular.forEach(response.records, function (value,index) {
                vm.regiongAsync.push(value);
                vm.regiongAsync[index].name = value.stationName;
                allRegions.push(value.id);
            });
            console.log(vm.regiongAsync);
        });
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.selectRegionId= vm.eventResult.model.id;
        };
        vm.bureaugAsync = [];
        var allBureaus = [];
        bureauService.queryBureau().then(function (response) {
            // vm.bureaugAsync = response.records;
            angular.forEach(response.records, function (value,index) {
                vm.bureaugAsync.push(value);
                vm.bureaugAsync[index].name = value.cityproperName;
                allBureaus.push(value.id);
            });
        });
        vm.onSelectCallbackBureau = function (item) {
            vm.eventResult = {model: item};
            vm.selectBureauId = vm.eventResult.model.id;
        };
        vm.queryPolice = queryPolice;
        vm.addPolice = addPolice;
        vm.deletePolice = deletePolice;
        vm.modifyPolice = modifyPolice;
        vm.readRecords = readRecords;
        vm.readRecords(0);
        vm.dtOptions = datatablesOptions.getDatatableOption(); // 获取datatables表格设置
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5).notSortable()
        ];
        function queryPolice() {
            policeService.queryPolice().then(function (response) {
                vm.police = response.records;
            });
        }
        function addPolice() {
            $location.path('/app/police/add-new-police');
        }
        function deletePolice(police) {
            policeFactory.setPolice(police);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: 'deletePolice.html',
                size: 'sm',
                controller: 'policeDeleteController',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                vm.queryPolice();
            });
        }
        function modifyPolice(police) {
            policeFactory.setPolice(police);
            $location.path('/app/police/modify-police');
        }
        function readRecords(start_index){
            if(start_index == 0){//首页index
                policeService.readRecords(0,'',vm.selectRegionId,vm.selectBureauId).then(function (response) {
                    vm.police = response.records;
                    vm.parkNumber = response.parklot_sum;
                    angular.forEach(response.records, function (value,index) {
                        vm.police[index].number =index+1;
                    });
                    vm.number.start = vm.police[0].number;
                    vm.number.next = vm.police[vm.police.length - 1].number;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.maxid = response.maxid;
                    if (response.records.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else{
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                });
            }else if(start_index == 1){//上一页
                if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                    logger.warning('已经到首页！','','没有上一页');
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }else{
                    policeService.readRecords(vm.pagination.previous_start_index,0,vm.selectRegionId,vm.selectBureauId).then(function (response) {
                        vm.police = response.records;
                        vm.parkNumber = response.parklot_sum;
                        angular.forEach(response.records, function (value,index) {
                            vm.police[index].number = vm.number.start+index-response.records.length+1;
                        });
                        vm.number.start = vm.police[0].number;
                        vm.number.next = vm.police[vm.police.length - 1].number;
                        vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                        vm.pagination.previous_start_index = response.records[0].id;
                        vm.pagination.maxid = response.maxid;
                        if (response.records.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        }
                    });
                }
            }else if(start_index == 2){//下一页
                if (vm.pagination.next_start_index <= vm.pagination.minid) {
                    logger.warning('已经到最后一页！','','没有下一页');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                }else{
                    policeService.readRecords(vm.pagination.next_start_index,1,vm.selectRegionId,vm.selectBureauId).then(function (response) {
                        vm.police = response.records;
                        vm.parkNumber = response.parklot_sum;
                        angular.forEach(response.records, function (value,index) {
                            vm.police[index].number = vm.number.number+index+1;
                        });
                        vm.number.start = vm.police[0].number;
                        vm.number.next = vm.police[vm.police.length - 1].number;
                        vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                        vm.pagination.previous_start_index = response.records[0].id;
                        vm.pagination.minid = response.minid;
                        if (response.records.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        }
                    });
                }
            }else if(start_index == 3){//加载最后一页
                policeService.readRecords(-1,'',vm.selectRegionId,vm.selectBureauId).then(function (response) {
                    vm.police = response.records;
                    vm.parkNumber = response.parklot_sum;
                    angular.forEach(response.records, function (value,index) {
                        vm.police[index].number = vm.pagination.maxid -response.data.length+index+1;
                    });
                    vm.number.start = vm.police[0].number;
                    vm.number.next = vm.police[vm.police.length - 1].number;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.minid = response.minid;
                    if (response.records.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                    }else{
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    }
                });
            }
        }
        vm.clearAndRefresh = function () {
            vm.regiongAsync.selected = '';
            vm.bureaugAsync.selected = '';
            vm.selectRegionId = '';
            vm.selectBureauId = '';
            vm.readRecords(0);
        };
    }
})();
(function(){
    angular.module('app.basicinfo')
        .controller('policeDeleteController',policeDeleteController);
    policeDeleteController.$inject = ['$uibModalInstance','policeService','policeFactory','logger'];
    'use strict';
    function policeDeleteController($uibModalInstance,policeService,policeFactory,logger) {
        var vm = this;
        vm.deletePolice = deletePolice;
        vm.cancel = cancel;
        function deletePolice() {
            policeService.deletePolice(policeFactory.getPolice().id).then(function (response) {
                if(response.status === 0){
                    $uibModalInstance.close('closed');
                    logger.success('成功刪除'+policeFactory.stationName,response.data,'操作成功！');
                }else {
                    logger.error('删除失败'+policeFactory.stationName + '失败！！',response.data,'操作失败！');
                }
            });
        }

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
/**
 * basic.police.factory.js
 * @author: yumaotao
 * @create 2017/12/2
 */
(function () {
    angular.module('app.basicinfo')
        .factory('policeFactory', policeFactory);
    'use strict';
    function policeFactory(){
        var police = {
            id:'',//派出所id
            stationCode:'',//派出所代码
            stationName:'',//派出所名称
            bureauid:'',//所属市局id
            bureauName:''
        };
        return {
            setPolice: setPolice,
            getPolice: getPolice
        };
        function setPolice(cPolice) {
            police.id = cPolice.id;
            police.stationCode = cPolice.stationCode;
            police.stationName = cPolice.stationName;
            police.bureauid = cPolice.bureauid;
            police.bureauName = cPolice.bureauName;
        }
        function getPolice() {
            return police;
        }
    }
})();
(function () {
    "use strict";
    angular.module('app.basicinfo')
        .controller('modifyPoliceController', modifyPoliceController);
    modifyPoliceController.$inject = ['$scope', '$timeout', '$location', 'policeFactory', 'policeService', 'toastr','bureauService'];
    function modifyPoliceController($scope, $timeout, $location, policeFactory, policeService, toastr,bureauService) {
        var vm = this;
        var selectRegion = [];
        vm.bureaugAsync = [];
        var allBureaus = [];
        bureauService.queryBureau().then(function (response) {
            // vm.bureaugAsync = response.records;
            angular.forEach(response.records, function (value,index) {
                vm.bureaugAsync.push(value);
                vm.bureaugAsync[index].name = value.cityproperName;
                allBureaus.push(value.id);
            });
        });
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.selectBureauId = vm.eventResult.model.id;
        };
        vm.getPolice =  getPolice;
        vm.getPolice();
        function getPolice() {
            $timeout(function () {
                vm.police = policeFactory.getPolice();
                vm.selectBureauId = vm.police.bureauid;
                vm.bureaugAsync.selected = vm.police.bureauName;
            }, 500);
        };
        // 点击确认修改区域的操作
        vm.modifyPolice = function () {
            policeService.modifyPolice(vm.police.id,vm.police.stationCode,vm.police.stationName,vm.selectBureauId).then(function (response) {
                if (response.status == 0) {
                    toastr.success('修改成功!!', response, {
                        closeButton: true,
                        progressBar: true,
                        positionClass: 'toast-top-center'
                    });
                    $location.path('/app/police');
                }
            });
        };
        // 返回上一层
        vm.backToPrevious = function () {
            $location.path('/app/police');
        };
    }
})();
/**
 * basic.police.factory.js
 * @author: yumaotao
 * @create 2016-12-29 16:01
 */
(function () {
    angular.module('app.basicinfo')
        .factory('policeService', policeService);
    policeService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function policeService($http, URL_SEED) {
        var POLICE_URL = URL_SEED.API_URL + 'baseinfo/policeStation/';
        return {
            queryPolice:queryPolice,
            addPolice: addPolice,
            deletePolice:deletePolice,
            modifyPolice:modifyPolice,
            readRecords:readRecords
        };
        function queryPolice() {
            return $http({
                method: 'GET',
                url: POLICE_URL,
                params: {
                    querytype: 'all',
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function addPolice(stationCode,stationName,bureauid) {
            var police = angular.toJson({
                stationCode:stationCode,
                stationName:stationName,
                bureau:bureauid
            });
            return $http({
                method: 'POST',
                url: POLICE_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: police,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function deletePolice(id) {
            var police = angular.toJson({policeid: id});
            return $http({
                method: 'DELETE',
                url: POLICE_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: police,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function modifyPolice(policeid,stationCode,stationName,bureauid) {
            var police = angular.toJson({
                policeid:policeid,
                stationCode:stationCode,
                stationName:stationName,
                bureau:bureauid
            });
            return $http({
                method: 'PUT',
                url: POLICE_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: police,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function readRecords(start_index,pagedirect,a,b) {
            return $http({
                method: 'GET',
                url: POLICE_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    start_index:start_index,
                    pagedirect : pagedirect,
                    policeid:a,
                    bureauid:b,
                    max_results: 50
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
    }
})();
/**
 * park.add.controller.js
 * @author: huangxiang
 * @create 2016-12-23 16:43
 */
(function () {
    angular.module('app.basicinfo')
        .controller('AddRegionCtr', AddRegionCtr);
    AddRegionCtr.$inject = ['$location', 'regionService', 'logger'];
    'use strict';
    function AddRegionCtr($location, regionService, logger) {
        var vm = this;
        var selectPark = [];//所选择的停车场
        /*停车场选择-------------------------------------------------*/
        vm.regiongAsync = [];
        var allRegions = [];
        vm.eventResult = {
            model:{
                id :undefined
            }
        }
        regionService.queryRegion().then(function (response) {
            vm.regiongAsync = response.records;
            angular.forEach(response.records, function (value) {
                allRegions.push(value.id);
            });
        });
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.seletPark.id = vm.eventResult.model.id;
        };
        vm.seletPark = {
            id: undefined
        };
        vm.addRegion = addRegion; // 添加停车场
        vm.backToPrevious = backToPrevious; // 返回上一层菜单
        function addRegion() {
            if(vm.eventResult.model.id !== undefined){
                vm.region.pcode = vm.eventResult.model.id;
            };
            regionService.addRegion(vm.region.code,vm.region.pcode,vm.region.name,vm.region.suffix,vm.region.fullname,vm.region.pinyin,vm.region.py,vm.region.level).then(function (response) {
                if (response.status === 0) {
                    logger.success('添加成功'+'区域：'+vm.region.name,'操作成功');
                    $location.path('/app/region');
                }else if (response.status === 40004) {
                    logger.error('添加失败' + '"' + vm.region.name + '"' + '失败!', region.status, '该区域已经存在！');
                }  else {
                    logger.error('添加失败');
                }
            });
        }
        function backToPrevious() {
            $location.path('/app/region');
        }
    }
})();
(function () {
    angular.module('app.basicinfo')
        .controller('RegionCtr', RegionCtr);
    RegionCtr.$inject = ['$location', 'regionService', 'DTColumnDefBuilder', 'datatablesOptions', 'regionFactory', '$uibModal','$document','logger'];
    'use strict';
    function RegionCtr($location, regionService, DTColumnDefBuilder, datatablesOptions, regionFactory, $uibModal,$document,logger) {
        var vm = this;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            next_start_index:0,
            previous_start_index:0,
            maxid: 0,
            minid: 0
        };
        vm.number={
            start:0,
            next:0
        };
        vm.regiongAsync = [];
        var allRegions = [];
        regionService.queryRegion().then(function (response) {
            vm.regiongAsync = response.records;
            angular.forEach(response.records, function (value) {
                allRegions.push(value.id);
            });
        });
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.selectRegionId = vm.eventResult.model.id;
        };
        vm.queryRegion = queryRegion;
        vm.addRegion = addRegion;
        vm.deleteRegion = deleteRegion;
        vm.modifyRegion = modifyRegion;
        vm.readRecords = readRecords;
        vm.readRecords(0);
        vm.dtOptions = datatablesOptions.getDatatableOption();
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8),
            DTColumnDefBuilder.newColumnDef(9).notSortable()
        ];
        function queryRegion() {
            regionService.queryRegion().then(function (response) {
                vm.region = response.records;
            });
        }
        function addRegion() {
            $location.path('/app/region/add-new-region');
        }
        function deleteRegion(region) {
            regionFactory.setRegion(region);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: 'deleteRegion.html',
                size: 'sm',
                controller: 'RegionDeteleCtr',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                vm.queryRegion();
            });
        }
        function modifyRegion(region) {
            regionFactory.setRegion(region);
            $location.path('/app/region/modify-region');
        }
        function readRecords(start_index){
            if(start_index == 0){
                regionService.readRecords(0,'',vm.selectRegionId).then(function (response) {
                    vm.region = response.records;
                    vm.parkNumber = response.parklot_sum;
                    angular.forEach(response.records, function (value,index) {
                        vm.region[index].number =index+1;
                    });
                    vm.number.start = vm.region[0];
                    vm.number.next = vm.region[vm.region.length - 1].number;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.maxid = response.maxid;
                    if (response.records.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else{
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                });
            }else if(start_index == 1){
                if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                    logger.warning('已经到首页！','','没有上一页');
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }else{
                    regionService.readRecords(vm.pagination.previous_start_index,0,vm.selectRegionId).then(function (response) {
                        vm.region = response.records;
                        vm.parkNumber = response.parklot_sum;
                        angular.forEach(response.records, function (value,index) {
                            vm.region[index].number = vm.number.start+index-response.records.length+1;
                        });
                        vm.number.start = vm.region[0];
                        vm.number.next = vm.region[vm.region.length - 1].number;
                        vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                        vm.pagination.previous_start_index = response.records[0].id;
                        vm.pagination.maxid = response.maxid;
                        if (response.records.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        }
                    });
                }
            }else if(start_index == 2){
                if (vm.pagination.next_start_index <= vm.pagination.minid) {
                    logger.warning('已经到最后一页！','','没有下一页');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                }else{
                    regionService.readRecords(vm.pagination.next_start_index,1,vm.selectRegionId).then(function (response) {
                        vm.region = response.records;
                        vm.parkNumber = response.parklot_sum;
                        angular.forEach(response.records, function (value,index) {
                            vm.region[index].number = vm.number.next+index+1;
                        });
                        vm.number.start = vm.region[0];
                        vm.number.next = vm.region[vm.region.length - 1].number;
                        vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                        vm.pagination.previous_start_index = response.records[0].id;
                        vm.pagination.minid = response.minid;
                        if (response.records.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        }
                    });
                }
            }else if(start_index == 3){
                regionService.readRecords(-1,'',vm.selectRegionId).then(function (response) {
                    vm.region = response.records;
                    vm.parkNumber = response.parklot_sum;
                    angular.forEach(response.records, function (value,index) {
                        vm.region[index].number = vm.pagination.maxid -response.data.length+index+1;
                    });
                    vm.number.start = vm.region[0];
                    vm.number.next = vm.region[vm.region.length - 1].number;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.minid = response.minid;
                    if (response.records.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                    }else{
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    }
                });
            }
        }
        vm.clearAndRefresh = function () {
            vm.selectRegionId = '';
            vm.regiongAsync.selected = '';
            vm.readRecords(0);
        };
    }
})();
/**
 * park.modal.controller.js
 * @author: huangxiang
 * @create 2016-12-23 15:52
 */
(function(){
    angular.module('app.basicinfo')
        .controller('RegionDeteleCtr',RegionDeteleCtr);
    RegionDeteleCtr.$inject = ['$uibModalInstance','regionService','regionFactory','logger'];
    'use strict';
    function RegionDeteleCtr($uibModalInstance,regionService,regionFactory,logger) {
        var vm = this;
        vm.deleteRegion = deleteRegion;
        vm.cancel = cancel;
        function deleteRegion() {
            regionService.deleteRegion(regionFactory.getRegion().id).then(function (response) {
                if(response.status === 0){
                    $uibModalInstance.close('closed');
                    logger.success('成功刪除'+regionFactory.name,response.data,'操作成功！');
                }else {
                    logger.error('删除失败'+regionFactory.name + '失败！！',response.data,'操作失败！');
                }
            });
        }

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
/**
 * basic.region.factory.js
 * @author: yumaotao
 * @create 2017/11/6
 */
(function () {
    angular.module('app.basicinfo')
        .factory('regionFactory', regionFactory);
    'use strict';
    function regionFactory(){
        var region = {
            id:'',//序号
            code:'',//区域代码
            pcode:'',//父区域代码，父区域的id
            name:'',//区域名称
            suffix:'',//行政单位
            fullname:'',//行政全名
            pinyin:'',//区域名字拼音全称
            py:'',//区域名字拼音简称
            level:'',//区域级别：1-省级，2-地市级，3-区县级，4-乡镇级
            pname:'',//父区域名称
            pid:''//父区域id
        };
        return {
            setRegion: setRegion,
            getRegion: getRegion
        };
        function setRegion(cRegion) {
            region.id = cRegion.id;
            region.code = cRegion.code;
            region.pcode = cRegion.pcode;
            region.name = cRegion.name;
            region.suffix = cRegion.suffix;
            region.fullname = cRegion.fullname;
            region.pinyin = cRegion.pinyin;
            region.pinyin = cRegion.pinyin;
            region.py = cRegion.py;
            region.level = cRegion.level;
            region.pname = cRegion.pname;
            region.pid = cRegion.pid;
        }
        function getRegion() {
            return region;
        }
    }
})();
/**
 * Created by huangxiang  on 2016/11/23 0023.
 * @author:
 * Module:
 * feature:
 */
(function () {
    "use strict";
    angular.module('app.basicinfo')
        .controller('ModifyRegionCtr', ModifyRegionCtr);
    ModifyRegionCtr.$inject = ['$scope', '$timeout', '$location', 'regionFactory', 'regionService', 'toastr'];
    function ModifyRegionCtr($scope, $timeout, $location, regionFactory, regionService, toastr) {
        var vm = this;
        var selectPark = [];//所选择的停车场
        /*停车场选择-------------------------------------------------*/
        vm.regiongAsync = [];
        var allRegions = [];
        regionService.queryRegion().then(function (response) {
            vm.regiongAsync = response.records;
            angular.forEach(response.records, function (value) {
                allRegions.push(value.id);
            });
        });
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.seletRegion.id = vm.eventResult.model.id;
        };
        vm.seletRegion = {
            id: undefined
        };
        vm.getRegion =  getRegion;
        vm.getRegion();
        function getRegion() {
            $timeout(function () {
                vm.region = regionFactory.getRegion();
                vm.regiongAsync.selected = vm.region.pname;
                vm.seletRegion.id = vm.region.pid;
            }, 500);
        };
        // 点击确认修改区域的操作
        vm.modifyRegion = function () {
            vm.region.pcode = vm.seletRegion.id;
            regionService.modifyRegion(vm.region.id,vm.region.code,vm.region.pcode,vm.region.name,vm.region.suffix,vm.region.fullname,vm.region.pinyin,vm.region.py,vm.region.level).then(function (response) {
                if (response.status == 0) {
                    toastr.success('修改成功!!', response, {
                        closeButton: true,
                        progressBar: true,
                        positionClass: 'toast-top-center'
                    });
                    $location.path('/app/region');
                }
            });
        };
        // 返回上一层
        vm.backToPrevious = function () {
            $location.path('/app/region');
        };
    }
})();
(function () {
    angular.module('app.basicinfo')
        .factory('regionService', regionService);
    regionService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function regionService($http, URL_SEED) {
        var REGION_URL =  URL_SEED.API_URL + 'baseinfo/region/';
        return {
            queryRegion:queryRegion,
            addRegion: addRegion,
            deleteRegion:deleteRegion,
            modifyRegion:modifyRegion,
        　　readRecords:readRecords
        };
        //查询区域信息
        function queryRegion() {
            return $http({
                method: 'GET',
                url: REGION_URL,
                params: {
                    querytype: 'all',
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function addRegion(code,pcode,name,suffix,fullname,pinyin,py,level) {
            var region = angular.toJson({
                code: code,
                pcode: pcode,
                name: name,
                suffix: suffix,
                fullname: fullname,
                pinyin: pinyin,
                py:py,
                level:level
            });
            return $http({
                method: 'POST',
                url: REGION_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: region,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function deleteRegion(id) {
            var region = angular.toJson({regionid: id});
            return $http({
                method: 'DELETE',
                url: REGION_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: region,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function modifyRegion(id,code,pcode,name,suffix,fullname,pinyin,py,level) {
            var region = angular.toJson({
                regionid:id,
                code: code,
                pcode: pcode,
                name: name,
                suffix: suffix,
                fullname: fullname,
                pinyin: pinyin,
                py:py,
                level:level
            });
            return $http({
                method: 'PUT',
                url: REGION_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: region,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function readRecords(start_index,pagedirect,id) {
            return $http({
                method: 'GET',
                url: REGION_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    max_results: 50,
                    start_index:start_index,
                    pagedirect: pagedirect,
                    regionid:id
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

    }
})();
/**
 * park.add.controller.js
 * @author: huangxiang
 * @create 2016-12-23 16:43
 */
(function () {
    angular.module('app.basicinfo')
        .controller('AddTownCtr', AddTownCtr);
    AddTownCtr.$inject = ['$location', 'townService', 'logger','regionService'];
    'use strict';
    function AddTownCtr($location, townService, logger,regionService) {
        var vm = this;
        var selectPark = [];//所选择的停车场
        /*停车场选择-------------------------------------------------*/
        vm.regiongAsync = [];
        var allRegions = [];
        regionService.queryRegion().then(function (response) {
            vm.regiongAsync = response.records;
            angular.forEach(response.records, function (value) {
                allRegions.push(value.id);
            });
        });
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.seletPark.id = vm.eventResult.model.id;
        };
        vm.seletPark = {
            id: undefined
        };
        vm.addTown = addTown; // 添加停车场
        vm.backToPrevious = backToPrevious; // 返回上一层菜单
        function addTown() {
            vm.town.region = vm.eventResult.model.id;
            townService.addTown(vm.town.code,vm.town.name,vm.town.region).then(function (response) {
                if (response.status === 0) {
                    logger.success('添加成功'+'商圈：'+vm.town.name,'操作成功');
                    $location.path('/app/town');
                }else if (response.status === 40004) {
                    logger.error('添加失败' + '"' + vm.town.name + '"' + '失败!', vm.town.name, '该商圈已经存在！');
                }  else {
                    logger.error('添加失败');
                }
            });
        }
        function backToPrevious() {
            $location.path('/app/town');
        }
    }
})();
(function () {
    angular.module('app.basicinfo')
        .controller('TownCtr', TownCtr);
    TownCtr.$inject = ['$location', 'townService', 'DTColumnDefBuilder', 'datatablesOptions', 'townFactory', '$uibModal','$document','logger','regionService'];
    'use strict';
    function TownCtr($location, townService, DTColumnDefBuilder, datatablesOptions, townFactory, $uibModal,$document,logger,regionService) {
        var vm = this;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            next_start_index:0,
            previous_start_index:0,
            maxid: 0,
            minid: 0
        };
        vm.number={
            start:0,
            next:0
        };
        vm.regiongAsync = [];
        var allRegions = [];
        regionService.queryRegion().then(function (response) {
            vm.regiongAsync = response.records;
            angular.forEach(response.records, function (value) {
                allRegions.push(value.id);
            });
        });
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.selectRegionId = vm.eventResult.model.id;
        };
        vm.TownAsync = [];
        var allTowns = [];
        townService.queryTown().then(function (response) {
            vm.TownAsync = response.data;
            angular.forEach(response.data, function (value) {
                allTowns.push(value.id);
            });
        });
        vm.onSelectCallbackTown = function (item) {
            vm.eventResult = {model: item};
            vm.seletTownId = vm.eventResult.model.id;
        };
        vm.queryTown = queryTown;
        vm.addTown = addTown;
        vm.deleteTown = deleteTown;
        vm.modifyTown = modifyTown;
        vm.readRecords = readRecords;
        vm.readRecords(0);
        vm.dtOptions = datatablesOptions.getDatatableOption();
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4).notSortable()
        ];
        function queryTown() {
            townService.queryTown().then(function (response) {
                vm.town = response.data;
            });
        }
        function addTown() {
            $location.path('/app/town/add-new-town');
        }
        function deleteTown(town) {
            townFactory.setTown(town);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: 'deleteTown.html',
                size: 'sm',
                controller: 'TownDeteleCtr',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                vm.queryTown();
            });
        }
        function modifyTown(town) {
            townFactory.setTown(town);
            $location.path('/app/town/modify-town');
        }
        function readRecords(start_index){
            if(start_index == 0){
                townService.readRecords(0,'',vm.selectRegionId,vm.seletTownId).then(function (response) {
                    vm.town = response.data;
                    vm.parkNumber = response.parklot_sum;
                    angular.forEach(response.data, function (value,index) {
                        vm.town[index].number =index+1;
                    });
                    vm.number.start = vm.town[0].number;
                    vm.number.next = vm.town[vm.town.length - 1].number;
                    vm.pagination.next_start_index = response.data[response.data.length - 1].id;
                    vm.pagination.previous_start_index = response.data[0].id;
                    vm.pagination.maxid = response.maxid;
                    if (response.data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else{
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                });
            }else if(start_index == 1){
                if (vm.pagination.previous_start_index >= vm.pagination.maxid || vm.number.start == 0) {
                    logger.warning('已经到首页！','','没有上一页');
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }else{
                    townService.readRecords(vm.pagination.previous_start_index,0,vm.selectRegionId,vm.seletTownId).then(function (response) {
                        vm.town = response.data;
                        vm.parkNumber = response.parklot_sum;
                        angular.forEach(response.data, function (value,index) {
                            vm.town[index].number = vm.number.start+index-response.data.length+1;
                        });
                        vm.number.start = vm.town[0].number-1;
                        vm.number.next = vm.town[vm.town.length - 1].number;
                        vm.pagination.next_start_index = response.data[response.data.length - 1].id;
                        vm.pagination.previous_start_index = response.data[0].id;
                        vm.pagination.maxid = response.maxid;
                        if (response.data.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        }
                    });
                }
            }else if(start_index == 2){
                if (vm.pagination.next_start_index <= vm.pagination.minid) {
                    logger.warning('已经到最后一页！','','没有下一页');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                }else{
                    townService.readRecords(vm.pagination.next_start_index,1,vm.selectRegionId,vm.seletTownId).then(function (response) {
                        vm.town = response.data;
                        vm.parkNumber = response.parklot_sum;
                        angular.forEach(response.data, function (value,index) {
                            vm.town[index].number = vm.number.next+index+1;
                        });
                        vm.number.start = vm.town[0].number-1;
                        vm.number.next = vm.town[vm.town.length - 1].number;
                        vm.pagination.next_start_index = response.data[response.data.length - 1].id;
                        vm.pagination.previous_start_index = response.data[0].id;
                        vm.pagination.minid = response.minid;
                        if (response.data.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        }
                    });
                }
            }else if(start_index == 3){
                townService.readRecords(-1,'',vm.selectRegionId,vm.seletTownId).then(function (response) {
                    vm.town = response.data;
                    vm.parkNumber = response.parklot_sum;
                    angular.forEach(response.data, function (value,index) {
                        vm.town[index].number = vm.pagination.maxid -response.data.length+index+1;
                    });
                    vm.number.start = vm.town[0].number-1;
                    vm.number.next = vm.town[vm.town.length - 1].number;
                    vm.pagination.next_start_index = response.data[response.data.length - 1].id;
                    vm.pagination.previous_start_index = response.data[0].id;
                    vm.pagination.minid = response.minid;
                    if (response.data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                    }else{
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    }
                });
            }
        }
        vm.clearAndRefresh = function () {
            vm.selectRegionId = '';
            vm.seletTownId = '';
            vm.regiongAsync.selected = '';
            vm.TownAsync.selected = '';
            vm.readRecords(0);
        };
    }
})();
/**
 * park.modal.controller.js
 * @author: huangxiang
 * @create 2016-12-23 15:52
 */
(function(){
    angular.module('app.basicinfo')
        .controller('TownDeteleCtr',TownDeteleCtr);
    TownDeteleCtr.$inject = ['$uibModalInstance','townService','townFactory','logger'];
    'use strict';
    function TownDeteleCtr($uibModalInstance,townService,townFactory,logger) {
        var vm = this;
        vm.deleteTown = deleteTown;
        vm.cancel = cancel;
        function deleteTown() {
            townService.deleteTown(townFactory.getTown().id).then(function (response) {
                if(response.status === 0){
                    $uibModalInstance.close('closed');
                    logger.success('成功刪除'+townFactory.name,response.data,'操作成功！');
                }else {
                    logger.error('删除失败'+townFactory.name + '失败！！',response.data,'操作失败！');
                }
            });
        }

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
/**
 * basic.region.factory.js
 * @author: yumaotao
 * @create 2017/11/6
 */
(function () {
    angular.module('app.basicinfo')
        .factory('townFactory', townFactory);
    'use strict';
    function townFactory(){
        var town = {
            id:'',//序号
            code:'',//
            name:'',//
            region:'',//行政区代码
            rid:'',//行政区域ID
            rname:''//行政区域名字
        };
        return {
            setTown: setTown,
            getTown: getTown
        };
        function setTown(cTown) {
            town.id = cTown.id;
            town.code = cTown.code;
            town.name = cTown.name;
            town.region = cTown.region;
            town.rid = cTown.rid;
            town.rname = cTown.rname;
        }
        function getTown() {
            return town;
        }
    }
})();
/**
 * Created by huangxiang  on 2016/11/23 0023.
 * @author:
 * Module:
 * feature:
 */
(function () {
    "use strict";
    angular.module('app.basicinfo')
        .controller('ModifyTownCtr', ModifyTownCtr);
    ModifyTownCtr.$inject = ['$scope', '$timeout', '$location', 'townFactory', 'townService', 'toastr','regionService'];
    function ModifyTownCtr($scope, $timeout, $location, townFactory, townService, toastr,regionService) {
        var vm = this;
        var selectPark = [];//所选择的商圈
        /*停车场选择-------------------------------------------------*/
        vm.regiongAsync = [];
        var allRegions = [];
        regionService.queryRegion().then(function (response) {
            vm.regiongAsync = response.records;
            angular.forEach(response.records, function (value) {
                allRegions.push(value.id);
            });
        });
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.seletParkId = vm.eventResult.model.id;
        };
        vm.getTown =  getTown;
        vm.getTown();
        function getTown() {
            $timeout(function () {
                vm.town = townFactory.getTown();
                vm.regiongAsync.selected = vm.town.rname;
                vm.seletParkId=  vm.town.rid;
            }, 500);
        };
        // 点击确认修改区域的操作
        vm.modifyTown = function () {
            townService.modifyTown(vm.town.id,vm.town.code,vm.town.name,vm.seletParkId).then(function (response) {
                if (response.status == 0) {
                    toastr.success('修改成功!!', response, {
                        closeButton: true,
                        progressBar: true,
                        positionClass: 'toast-top-center'
                    });
                    $location.path('/app/town');
                }
            });
        };
        // 返回上一层
        vm.backToPrevious = function () {
            $location.path('/app/town');
        };
    }
})();
(function () {
    angular.module('app.basicinfo')
        .factory('townService', townService);
    townService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function townService($http, URL_SEED) {
        var TOWN_URL = URL_SEED.API_URL + 'baseinfo/towncentre/'
        return {
            queryTown:queryTown,
            addTown: addTown,
            deleteTown:deleteTown,
            modifyTown:modifyTown,
            readRecords:readRecords
        };
        function queryTown() {
            return $http({
                method: 'GET',
                url: TOWN_URL,
                params: {
                    querytype: 'all',
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function addTown(code,name,region) {
            var town = angular.toJson({
                code: code,
                name: name,
                regionid:region
            });
            return $http({
                method: 'POST',
                url: TOWN_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: town,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function deleteTown(id) {
            var town = angular.toJson({townid: id});
            return $http({
                method: 'DELETE',
                url: TOWN_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: town,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function modifyTown(id,code,name,region) {
            var town = angular.toJson({
                townid:id,
                code: code,
                name: name,
                regionid:region
            });
            return $http({
                method: 'PUT',
                url: TOWN_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: town,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function readRecords(start_index,pagedirect,a,b) {
            return $http({
                method: 'GET',
                url: TOWN_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    start_index:start_index,
                    pagedirect: pagedirect,
                    regionid:a,
                    twonid:b,
                    max_results: 50
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
    }
})();
(function() {
    'use strict';

    angular
        .module('app.colors')
        .constant('APP_COLORS', {
          'primary':                '#3F51B5',
          'success':                '#4CAF50',
          'info':                   '#2196F3',
          'warning':                '#FF9800',
          'danger':                 '#F44336',
          'inverse':                '#607D8B',
          'green':                  '#009688',
          'pink':                   '#E91E63',
          'purple':                 '#673AB7',
          'dark':                   '#263238',
          'yellow':                 '#FFEB3B',
          'gray-darker':            '#232735',
          'gray-dark':              '#3a3f51',
          'gray':                   '#dde6e9',
          'gray-light':             '#e4eaec',
          'gray-lighter':           '#edf1f2'
        })
        ;
})();
/**=========================================================
 * Module: colors.js
 * Services to retrieve global colors
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.colors')
        .service('Colors', Colors);

    Colors.$inject = ['APP_COLORS'];
    function Colors(APP_COLORS) {
        this.byName = byName;

        ////////////////

        function byName(name) {
          return (APP_COLORS[name] || '#fff');
        }
    }

})();

/**
 * craete by yumaotao 2017/11/18 0022
 *
 * */
(function () {
    angular.module('app.console')
        .controller('ConsoleController',ConsoleController);
    ConsoleController.$inject = ["ConsoleService",'ManageParkingService','analysisRegionService','analysisBusTypeService','analysisUserService','$scope'];
    'use strict';
    function ConsoleController(ConsoleService,ManageParkingService,analysisRegionService,analysisBusTypeService,analysisUserService,$scope) {
        $scope.legend = ["男", "女"];
        $scope.data = [
            {value:78, name:'男'},{value:56,name:'女'} //Berlin
        ];
        var vm = this;
        vm.all_region = [];
        vm.parkAsync = [];
        var allParks = [];
        vm.bustype_chart_time = [];
        vm.bustype_chart_bustype_num =[];
        vm.bustype_chart_bustype_sum = [];
        vm.bustype_chart_plsl_num = [];
        vm.bustype_chart_park_sum = [];
        vm.add_user = [];
        vm.pay_num =[];
        vm.pay_sum = [];
        vm.recharge_num = [];
        vm.recharge_sum = [];
        vm.active_user = [];
        vm.userAccountTime = [];
        vm.pieRegionChart = pieRegionChart;//查询区域
        vm.columnBusinessChart = columnBusinessChart;
        vm.pieRegionChart();
        vm.columnBusinessChart();
        vm.queryUserAccount = queryUserAccount;//用户信息查询统计
        vm.getNowFormatDate = getNowFormatDate;//查询当前日期
        vm.nowTime = vm.getNowFormatDate();
        vm.queryParkingState = queryParkingState;
        vm.queryParkingState('','2017-01-01',vm.nowTime,'month');
        vm.queryUserAccount('2017-01-01',vm.nowTime,'month',10,-1,'');
        /*选择停车场-------------------------------------------------*/
        ManageParkingService.queryParking().then(function (response) {
            vm.parkAsync = response.parking_lots;
            angular.forEach(response.parking_lots, function (value) {
                allParks.push(value.id);
            });
        });
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.selectPark.id = vm.eventResult.model.id;
            var timetwo = setInterval(function () {
                vm.queryParking(vm.selectPark.id);
            }, 1000);
        };
        vm.selectPark = {
            id: undefined
        };
        Highcharts.setOptions({
            chart: {
                plotBackgroundColor: 'rgba(255, 255, 255, .9)',
                plotShadow: true,
                plotBorderWidth: 1
            },
            global: {
                useUTC: false
            }
        });
        function pieRegionChart() {
            analysisRegionService.readRecords('','','','','','','').then(function (response) {
                vm.region_data = response.region_data;
                vm.region_park_num = 0;
                angular.forEach(response.region_data, function (value,index) {
                    vm.region_park_num = vm.region_park_num + vm.region_data[index].park_sum;
                });
                angular.forEach(response.region_data, function (value,index) {
                    vm.pie_region = [];
                    vm.pie_region[0] =vm.region_data[index].regionname+"："+vm.region_data[index].park_sum+"个";
                    vm.pie_region[1] =vm.region_data[index].park_sum/vm.region_park_num;
                    vm.all_region[index] =vm.pie_region;
                });
                $('#con-pie').highcharts({
                    chart: {
                        type: 'pie',
                        options3d: {
                            enabled: true,
                            alpha: 45,
                            beta: 0
                        }
                    },
                    title: {
                        text: null
                    },
                    tooltip: {
                        pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
                    },
                    plotOptions: {
                        pie: {
                            allowPointSelect: true,
                            cursor: 'pointer',
                            depth: 35,
                            dataLabels: {
                                enabled: true,
                                format: '{point.name}'
                            }
                        }
                    },
                    series: [{
                        type: 'pie',
                        name: '区域占比',
                        data:  vm.all_region
                    }]
                });
            });

        }
        //实时帅新数据
        function activeLastPointToolip(chart) {
            var points = chart.series[0].points;
            chart.tooltip.refresh(points[points.length -1]);
        }
        $('#container4').highcharts({
            chart: {
                type: 'spline',
                animation: Highcharts.svg, // don't animate in old IE
                marginRight: 10,
                events: {
                    load: function () {
                        var series = this.series[0],
                            chart = this;
                        setInterval(function () {
                            var x = (new Date()).getTime(), // current
                                y = vm.parking;
                            series.addPoint([x, y], true, true);
                            activeLastPointToolip(chart)
                        }, 5000);
                    }
                }
            },
            title: {
                text: null
            },
            xAxis: {
                type: 'datetime',
                tickPixelInterval: 150
            },
            yAxis: {
                title: {
                    text: null
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }]
            },
            tooltip: {
                formatter: function () {
                    return '<b>' + this.series.name + '</b><br/>' +
                        Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                        Highcharts.numberFormat(this.y, 2);
                }
            },
            legend: {
                enabled: false
            },
            exporting: {
                enabled: false
            },
            series: [{
                name: '剩余车位数',
                data: (function () {
                    var data = [],
                        time = (new Date()).getTime(),
                        i;
                    for (i = -19; i <= 0; i += 1) {
                        data.push({
                            x: time + i * 1000,
                            y: vm.parking
                        });
                    }
                    return data;
                }())
            }]
        }, function(c) {
            activeLastPointToolip(c)
        });
        // 查询停车场剩余车位数
        vm.queryParking = queryParking;
        function queryParking(parkId) {
            ConsoleService.queryParking(parkId).then(function (response) {
                vm.parking = response.parking_lots[0].parking_space_available;
            });
        }

        function queryParkingState(parkid,statime,endtime,time_type) {
            ConsoleService.queryConsole(parkid,statime,endtime,time_type).then(function (response) {
                vm.parkingStateData = response;
                vm.day_money_sum = vm.parkingStateData.day_money_sum/100;
            });
        }
        function queryUserAccount(statime,endtime,time_type,max_results,start_index,pagedirect) {
            analysisUserService.readRecords(statime,endtime,time_type,max_results,start_index,pagedirect).then(function (response) {
                angular.forEach(response.user_data, function (value,index) {
                    vm.add_user[index] = value.add_user;
                    vm.pay_num[index] =value.pay_num;
                    vm.pay_sum[index] = Math.abs(value.pay_sum)/100;
                    vm.recharge_num[index] = value.recharge_num;
                    vm.recharge_sum[index] = Math.abs(value.recharge_sum)/100;
                    vm.active_user[index] = value.active_user;
                });
                $('#container3').highcharts({
                    title: {
                        text: null,
                    },
                    yAxis: {
                        title: {
                            text: '人/人/次/元/次/元'
                        }
                    },
                    height:300,
                    width:240,
                    legend: {
                        align: 'center', //水平方向位置
                        verticalAlign: 'bottom', //垂直方向位置
                        x: 0, //距离x轴的距离
                        y: 0 //距离Y轴的距离
                    },
                    plotOptions: {
                        series: {
                            label: {
                                connectorAllowed: false
                            },
                            pointStart: 1
                        }
                    },
                    series: [{
                        name: '新增用户',
                        data: vm.add_user
                    }, {
                        name: '活跃用户',
                        data: vm.active_user
                    }, {
                        name: '充值金额',
                        data: vm.recharge_sum
                    },{
                        name: '消费金额',
                        data: vm.pay_sum
                    }],
                    responsive: {
                        rules: [{
                            condition: {
                                maxWidth: 500
                            },
                            chartOptions: {
                                legend: {
                                    layout: 'horizontal',
                                    align: 'center',
                                    verticalAlign: 'bottom'
                                }
                            }
                        }]
                    }
                });
            });
        }
        function getNowFormatDate() {
            var date = new Date();
            var seperator1 = "-";
            var year = date.getFullYear();
            var month = date.getMonth() + 1;
            var strDate = date.getDate();
            if (month >= 1 && month <= 9) {
                month = "0" + month;
            }
            if (strDate >= 0 && strDate <= 9) {
                strDate = "0" + strDate;
            }
            var currentdate = year + seperator1 + month + seperator1 + strDate;
            return currentdate;
        }
        function columnBusinessChart() {
            analysisBusTypeService.readRecords('','','','','','','').then(function (response) {
                vm.busines_data = response.busines_data;
                angular.forEach(response.busines_data, function (value,index) {
                    vm.busines_data[index].id = index+1;
                    vm.bustype_chart_time[index] = vm.busines_data[index].businesname;
                    vm.bustype_chart_bustype_num[index] =vm.busines_data[index].busines_num;
                    vm.bustype_chart_bustype_sum[index] =vm.busines_data[index].busines_sum;
                    vm.bustype_chart_plsl_num[index] =vm.busines_data[index].plsl_num;
                    vm.bustype_chart_park_sum[index] =vm.busines_data[index].park_sum;
                });
                $('#busTypeChart').highcharts({
                    chart: {
                        type: 'column'
                    },
                    title: {
                        text: null
                    },
                    xAxis: {
                        categories: vm.bustype_chart_time,
                        crosshair: true
                    },
                    yAxis: {
                        min: 0,
                        title: {
                            text: '数量 (次/元/次)'
                        }
                    },
                    tooltip: {
                        headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                        pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                        '<td style="padding:0"><b>{point.y:.0f}</b></td></tr>',
                        footerFormat: '</table>',
                        shared: true,
                        useHTML: true
                    },
                    plotOptions: {
                        column: {
                            borderWidth: 0
                        }
                    },
                    series: [{
                        name: '停车场数',
                        data: vm.bustype_chart_park_sum
                    }, {
                        name: '消费金额',
                        data: vm.bustype_chart_bustype_num
                    }, {
                        name: '消费金额',
                        data: vm.bustype_chart_bustype_sum
                    },{
                        name: '故障次数',
                        data: vm.bustype_chart_plsl_num
                    }]
                });
            });
        }

    }
})();
/**
 * Create By yumaotao 2017/7/21 0023
 * 
 *
* */
(function () {
    angular.module("app.console")
        .factory('ConsoleService', ConsoleService);
    ConsoleService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function  ConsoleService($http,URL_SEED) {
        var service ={};
        // var CONSOLE_URL = URL_SEED.API_URL + 'operation/vehiclestat/';
        var CONSOLE_URL = URL_SEED.API_URL + 'operation/vehiclestat/';//消费次数、消费金额、故障次数查询
        var PARKING_URL = URL_SEED.API_URL + 'parking/parking_lots/'; // 剩余车位数
        var USERSUM_URL = URL_SEED.API_URL + 'operation/growthRate/';//用户数据统计
        var COUNT_URL = URL_SEED.API_URL + 'operation/console_warning/';//控制台上方数据展示
        var REGIONPAY = URL_SEED.API_URL + 'operation/consunption_reg/';//区域消费查询
        var USERURL = URL_SEED.API_URL + 'operation/consunption_appuser/';//用户数据统计
        service.queryConsoleCount = function () {
            return $http({
                method: 'GET',
                url: COUNT_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
    //    查询消费、次数、故障次数
        service.queryConsole = function (parkid,startime,endtime,time_type) {
            return $http({
                method: 'GET',
                url: CONSOLE_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                params:{
                    parkid:parkid,
                    startime:startime,
                    endtime:endtime,
                    time_type:time_type
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        //查询停车场
        service.queryUserState = function (parkid,startime,endtime,time_type) {
            return $http({
                method: 'GET',
                url: USERSUM_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                params:{
                    parkid:parkid,
                    startime:startime,
                    endtime:endtime,
                    time_type:time_type
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        /*查询百度地图信息*/
        service.queryParking = function (parklotid) {
            return $http({
                method: 'GET',
                url: PARKING_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                params:{
                    parklotid:parklotid
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        service.queryRegionPay = function (startime) {
            return $http({
                method: 'GET',
                url: REGIONPAY,
                headers: {
                    'Content-type': 'application/json'
                },
                params:{
                    querytype:'all',
                    startime:startime
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        service.queryUserStatistics = function (startime,endtime) {
            return $http({
                method: 'GET',
                url: USERURL,
                headers: {
                    'Content-type': 'application/json'
                },
                params:{
                    time_type:'day',
                    startime:startime,
                    endtime:endtime
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        return service;
    }
})();

(function () {
    angular.module('app.console')
        .controller('newConsoleController',newConsoleController);
    newConsoleController.$inject = ['$scope','ConsoleService'];
    'use strict';
    function newConsoleController($scope,ConsoleService) {
        $scope.data = [
            {value:74, name:'芙蓉分局'},
            {value:72, name:'开福分局'},
            {value:62, name:'天心分局'},
            {value:69, name:'雨花分局'},
            {value:93, name:'岳麓分局'}
        ];
        $scope.LinedataNew = [
            {value:'2:00:00', name:3455},
            {value:'4:00:00', name:3455},
            {value:'6:00:00', name:2123},
            {value:'8:00:00', name:1444},
            {value:'10:00:00', name:2236},
            {value:'12:00:00', name:1578},
            {value:'14:00:00', name:3160},
            {value:'16:00:00', name:5452},
            {value:'18:00:00', name:1157},
            {value:'20:00:00', name:3467},
            {value:'22:00:00', name:2352},
            {value:'24:00:00', name:2625}
        ];
        $scope.Linedata = [151692, 154207, 154379, 154321, 154264, 154093, 151692,143690,121514,49612,94651,197646,200618,129516,114655,136603,183871,221765,185929,146091,159980,215135,171525,156265,151692];
        $scope.radarData = [
            {value:11061, name:'雨花区'},
            {value:10368, name:'芙蓉区'},
            {value:9904, name:'岳麓区'},
            {value:9719, name:'天心区'},
            {value:7342, name:'开福区'}
            ];
        $scope.pieData = [
            {value:4, name:'观览建筑'},
            {value:38, name:'行政办公建筑'},
            {value:19, name:'交通建筑'},
            {value:269, name:'居住建筑'},
            {value:6, name:'科研建筑'},
            {value:8, name:'路边泊位'},
            {value:53, name:'旅馆建筑'},
            {value:158, name:'商业建筑'},
            {value:2, name:'体育建筑'},
            {value:10, name:'文教建筑'},
            {value:16, name:'医疗建筑'},
            {value:6, name:'园林建筑'}
        ];
        $scope.categoryData = [
            {value:136, name:'雨花区'},
            {value:117, name:'芙蓉区'},
            {value:119, name:'岳麓区'},
            {value:116, name:'天心区'},
            {value:81, name:'开福区'},
            {value:4, name:'望城区'},
            {value:9, name:'长沙县'},
            {value:1, name:'浏阳市'},
            {value:3, name:'宁乡县'}
        ];
        $scope.axisData = [
            {id:'3月1日',value:585, name:1585},
            {id:'3月3日',value:455, name:3455},
            {id:'3月6日',value:123, name:2123},
            {id:'3月9日',value:444, name:1444},
            {id:'3月12日',value:236, name:2236},
            {id:'3月15日',value:578, name:1578},
            {id:'3月18日',value:160, name:3160},
            {id:'3月21日',value:452, name:5452},
            {id:'3月24日',value:157, name:1157},
            {id:'3月27日',value:467, name:3467},
            {id:'3月30日',value:352, name:2352}
        ]
        $scope.radarName= $scope.radarData[0].name;
        $scope.radarValue= $scope.radarData[0].value;
        $scope.x = $scope.Linedata.x;
        $scope.y = $scope.Linedata.y;
        var vm = this;
        vm.queryConsoleCount = queryConsoleCount;
        vm.queryConsoleCount();
        //查询头部统计
        vm.otherRegion =0;
        function queryConsoleCount() {
            ConsoleService.queryConsoleCount().then(function (response) {
                vm.consoleCount = response;
                vm.should_sum = vm.consoleCount.day_sum/100;
                vm.plsl_num = parseInt(vm.consoleCount.plsl_num/1000);
                vm.region_park_sum = response.region_park_sum;
                angular.forEach(response.region_park_sum, function (value,index) {
                    switch(value.region_name)
                    {
                        case '芙蓉区':
                            vm.region_one = value.parklot_sum;
                            vm.region_one_no = 389 - value.parklot_sum;
                            break;
                        case '开福区':
                            vm.region_two =value.parklot_sum;
                            vm.region_two_no = 254 - value.parklot_sum;
                            break;
                        case '天心区':
                            vm.region_thr =value.parklot_sum;
                            vm.region_thr_no = 319 - value.parklot_sum;
                            break;
                        case '雨花区':
                            vm.region_fou =value.parklot_sum;
                            vm.region_fou_no = 474 - value.parklot_sum;
                            break;
                        case '岳麓区':
                            vm.region_fif =value.parklot_sum;
                            vm.region_fif_no = 406 - value.parklot_sum;
                            break;
                        default:
                            vm.otherRegion = vm.otherRegion+value.parklot_sum;
                    }
                });
                vm.otherRegion_no = 1842 - vm.otherRegion;
                vm.region_one_pro = (vm.region_one/389)*100;
                vm.region_two_pro = (vm.region_two/254)*100;
                vm.region_thr_pro = (vm.region_thr/319)*100;
                vm.region_fou_pro = (vm.region_fou/474)*100;
                vm.region_fif_pro = (vm.region_fif/406)*100;
                vm.otherRegion_pro = (vm.otherRegion/1842)*100;
                vm.regionpiecharts1 = {
                    value:vm.region_one_pro,//百分比,必填
                    name:'芙蓉区',//必填
                    title:'',
                    color:['#e54b4d','#f7c9c9'],
                    fontSize:16
                };
                vm.regionpiecharts2 = {
                    value:vm.region_two_pro,//百分比,必填
                    name:'开福区',//必填
                    title:'',
                    color:['#cb5b41','#efcdc6'],
                    fontSize:16
                };
                vm.regionpiecharts3 = {
                    value:vm.region_thr_pro,//百分比,必填
                    name:'天心区',//必填
                    title:'',
                    color:['#ae9946','#e7e0c7'],
                    fontSize:16
                };
                vm.regionpiecharts4 = {
                    value:vm.region_fou_pro,//百分比,必填
                    name:'雨花区',//必填
                    title:'',
                    color:['#53998e','#cbe0dd'],
                    fontSize:16
                };
                vm.regionpiecharts5 = {
                    value:vm.region_fif_pro,//百分比,必填
                    name:'岳麓区',//必填
                    title:'',
                    color:['#29d0ca','#bef1ef'],
                    fontSize:16
                };
                vm.regionpiecharts6 = {
                    value:vm.otherRegion_pro,//百分比,必填
                    name:'其他区域',//必填
                    title:'',
                    color:['#0181c8','#b2d9ee'],
                    fontSize:16
                };
            });
        }
        vm.regionpiecharts1 = {
            value:vm.region_one_pro,//百分比,必填
            name:'芙蓉区',//必填
            title:'',
            color:['#e54b4d','#f7c9c9'],
            fontSize:16
        };
        vm.regionpiecharts2 = {
            value:vm.region_two_pro,//百分比,必填
            name:'开福区',//必填
            title:'',
            color:['#cb5b41','#efcdc6'],
            fontSize:16
        };
        vm.regionpiecharts3 = {
            value:vm.region_thr_pro,//百分比,必填
            name:'天心区',//必填
            title:'',
            color:['#ae9946','#e7e0c7'],
            fontSize:16
        };
        vm.regionpiecharts4 = {
            value:vm.region_fou_pro,//百分比,必填
            name:'雨花区',//必填
            title:'',
            color:['#53998e','#cbe0dd'],
            fontSize:16
        };
        vm.regionpiecharts5 = {
            value:vm.region_fif_pro,//百分比,必填
            name:'岳麓区',//必填
            title:'',
            color:['#29d0ca','#bef1ef'],
            fontSize:16
        };
        vm.regionpiecharts6 = {
            value:vm.otherRegion_pro,//百分比,必填
            name:'其他区域',//必填
            title:'',
            color:['#0181c8','#b2d9ee'],
            fontSize:16
        };
        //区域消费查询
        vm.nowYear = new Date().getFullYear();
        vm.nowMoth = new Date().getMonth()+1;
        vm.nowDay = new Date().getDate();
        vm.doyear = doyear;
        vm.doyear();
        function doyear() {
            vm.year = [];
            var thisYear = new Date().getFullYear();
            for(var i = 2010;i<=thisYear;i++){
                vm.year.push(i);
            }
        }
        vm.domoth = domoth;
        vm.domoth();
        function domoth() {
            vm.moth = [];
            for(var i = 1;i<=12;i++){
                vm.moth.push(i);
            }
        }
        vm.doday = doday;
        vm.doday();
        vm.queryRegionPay = queryRegionPay;
        vm.queryRegionPay();
        function doday() {
            vm.day = [];
            var date = new Date(vm.nowYear,vm.nowMoth,0);
            for(var i=1;i<=date.getDate();i++){
               vm.day.push(i);
            }
        }

        function queryRegionPay() {
            vm.regionPayName =[];
            vm.regionPayValue = [];
            if(vm.nowYear && vm.nowMoth && vm.nowDay) {
                var startime = vm.nowYear + '-' + vm.nowMoth + '-' + vm.nowDay;
                ConsoleService.queryRegionPay(startime).then(function (response) {
                    vm.regionPay = response.data;
                    angular.forEach(response.data, function (value,index) {
                        vm.regionPayName.push(value.region_name);
                        vm.regionPayValue.push(value.pay_sum);
                    });

                });
            }
        }
        //用户增长
        vm.userDayYear = userDayYear;
        vm.userDayMonth = userDayMonth;
        vm.userNowYear = new Date().getFullYear();
        vm.userNowMoth = new Date().getMonth()+1;
        vm.queryUserStatistics = queryUserStatistics;
        vm.queryUserStatistics();
        vm.userDayYear();
        vm.userDayMonth();
        function userDayYear() {
            vm.userYear = [];
            var thisYear = new Date().getFullYear();
            for(var i = 2010;i<=thisYear;i++){
                vm.userYear.push(i);
            }
        }
        function userDayMonth() {
            vm.userMoth = [];
            for(var i = 1;i<=12;i++){
                vm.userMoth.push(i);
            }
        }
        function queryUserStatistics() {
            var date = new Date(vm.userNowYear,vm.userNowMoth,0).getDate();
            if(vm.userNowYear && vm.userNowMoth) {
                var startime = vm.userNowYear + '-' + vm.userNowMoth+'-1';
                var endtime = vm.userNowYear + '-' + vm.userNowMoth+'-'+date;
                ConsoleService.queryUserStatistics(startime,endtime).then(function (response) {
                    vm.userStatistics = response.user_data;
                });
            }
        }
    }
})();
(function () {

    angular
        .module('app.core')
        .config(coreConfig);

    coreConfig.$inject = ['$controllerProvider', '$compileProvider', '$filterProvider', '$provide', '$animateProvider','toastrConfig'];

    'use strict';
    function coreConfig($controllerProvider, $compileProvider, $filterProvider, $provide, $animateProvider,toastrConfig) {

        var core = angular.module('app.core');
        // registering components after bootstrap
        core.controller = $controllerProvider.register;
        core.directive = $compileProvider.directive;
        core.filter = $filterProvider.register;
        core.factory = $provide.factory;
        core.service = $provide.service;
        core.constant = $provide.constant;
        core.value = $provide.value;

        // Disables animation on items with class .ng-no-animation
        $animateProvider.classNameFilter(/^((?!(ng-no-animation)).)*$/);

        // Improve performance disabling debugging features
        // $compileProvider.debugInfoEnabled(false);

        angular.extend(toastrConfig, {
            autoDismiss: true,
            closeButton:true,
            containerId: 'toast-container',
            maxOpened: 0,
            progressBar:true,
            timeOut:5000,
            extendedTimeOut: 1000,
            newestOnTop: true,
            positionClass: 'toast-top-right',
            preventDuplicates: false,
            preventOpenDuplicates: false,
            target: 'body'
        });

    }

})();
/**=========================================================
 * Module: constants.js
 * Define constants to inject across the application
 =========================================================*/
(function () {

    angular
        .module('app.core')
        .constant('APP_MEDIAQUERY', {
            'desktopLG': 1200,
            'desktop': 992,
            'tablet': 768,
            'mobile': 480
        })
    ;

})();
(function () {

    angular
        .module('app.core')
        .run(appRun);

    appRun.$inject = ['$rootScope', '$state', '$stateParams', '$window', 'Colors', '$cookieStore', '$location', '$document'];

    'use strict';
    function appRun($rootScope, $state, $stateParams, $window, Colors, $cookieStore, $location, $document) {

        // Set reference to access them from any scope
        $rootScope.$state = $state;
        $rootScope.$stateParams = $stateParams;
        $rootScope.$storage = $window.localStorage;

        // Uncomment this to disable template cache
        /*$rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {
         if (typeof(toState) !== 'undefined'){
         $templateCache.remove(toState.templateUrl);
         }
         });*/

        // $rootScope.$on('$stateChangeStart',function (event, toState, toStateParams) {
        //     // 跟踪用户想要去的state
        //     // authorization factory需要知道这些state
        //     $rootScope.toState = toState;
        //     $rootScope.toStateParams = toStateParams;
        //
        //
        //     if(principal.isIdentityResolved()){
        //         authorization.authorize();
        //     }
        // });

        // Allows to use branding color with interpolation
        // {{ colorByName('primary') }}
        $rootScope.colorByName = Colors.byName;

        // cancel click event easily
        $rootScope.cancel = function ($event) {
            $event.stopPropagation();
        };

        $rootScope.globals = $cookieStore.get('globals') || {};
        if ($rootScope.globals.currentUser) {
            // $http.defaults.headers.common['Authorization'] = 'Basic ' + $rootScope.globals.currentUser.authData; // jshint ignore:line
        }
        // console.log($cookies.csrftoken);
        //
        $rootScope.$on('$locationChangeStart', function (event, next, current) {
            // redirect to login page if not logged in
            if ($location.path() !== '/page/login' && !$rootScope.globals.currentUser) {
                $location.path('/page/login');
            }
        });


        // Hooks Example
        // -----------------------------------

        // Hook not found
        $rootScope.$on('$stateNotFound',
            function (event, unfoundState/*, fromState, fromParams*/) {
                console.log(unfoundState.to); // "lazy.state"
                console.log(unfoundState.toParams); // {a:1, b:2}
                console.log(unfoundState.options); // {inherit:false} + default options
            });
        // Hook error
        $rootScope.$on('$stateChangeError',
            function (event, toState, toParams, fromState, fromParams, error) {
                console.log(error);
            });
        // Hook success
        $rootScope.$on('$stateChangeSuccess',
            function (/*event, toState, toParams, fromState, fromParams*/) {
                // display new view from top
                $window.scrollTo(0, 0);
                // Save the route title
                $rootScope.currTitle = $state.current.title;
            });

        // Load a title dynamically
        $rootScope.currTitle = $state.current.title;
        $rootScope.pageTitle = function () {
            var title = $rootScope.app.name + ' - ' + ($rootScope.currTitle || $rootScope.app.description);
            $document.title = title;
            return title;
        };

    }

})();


/**
 * md5Key.provider.js
 * @author: huangxiang
 * @create 2017-01-12 15:20
 */
(function () {
    angular.module('app.core')
        .factory('MD5key', MD5key);
    'use strict';
    function MD5key() {

        var md5Key = '';

        return {
            setMD5Key: setMD5Key,
            getMD5Key: getMD5Key
        };


        function setMD5Key(key) {
            md5Key = key;
        }

        function getMD5Key() {
            return md5Key;
        }
    }
})();
(function () {
    angular.module('app.parking')
        .controller('dataTmpController', dataTmpController);
    dataTmpController.$inject = ['logger', '$document','inducementService','dataTmpService','datatablesOptions','DTColumnDefBuilder'];
    'use strict';
    function dataTmpController(logger, $document,inducementService,dataTmpService,datatablesOptions,DTColumnDefBuilder) {
        var vm = this;
        vm.parkAsync = [];
        var allParks = [];
        vm.coupon ={
            valid_begintime:undefined,
            valid_endtime:undefined
        };
        vm.number = {
            start:'',
            next:''
        }
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            next_start_index:0,
            previous_start_index:0,
            maxid: 0,
            minid: 0
        };
        vm.queryParking = queryParking;
        vm.queryParking();
        vm.readRecords = readRecords;
        vm.readRecords(0);
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        function queryParking() {
            inducementService.queryParking().then(function (response) {
                vm.parkAsync = response.parking_lots;
                angular.forEach(response.parking_lots, function (value) {
                    vm.parkAsync = response.parking_lots;
                    allParks.push(value.id);
                });
            });
        }
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.selectParkName = vm.eventResult.model.id;
            vm.selectParkName = vm.eventResult.model.name;
        };
        vm.dtOptions = datatablesOptions.getDatatableOption(); // 获取datatables表格设置
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5)
        ];
        function readRecords(start_index) {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if(start_index == 0){
                dataTmpService.queryDataTmp(0,'',vm.plateform,vm.selectParkName,vm.status,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                    vm.dataTmp = response.records;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.maxid = response.maxid;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }else if(start_index == 1){
                if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                    logger.warning('已经到首页！','','没有上一页');
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }else{
                    dataTmpService.queryDataTmp(vm.pagination.previous_start_index,0,vm.plateform,vm.selectParkName,vm.status,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                        vm.dataTmp = response.records;
                        vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                        vm.pagination.previous_start_index = response.records[0].id;
                        vm.pagination.maxid = response.maxid;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                    });
                }
            }else if(start_index == 2){
                if (vm.pagination.next_start_index <= vm.pagination.minid) {
                    logger.warning('已经到最后一页！','','没有下一页');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                }else{
                    dataTmpService.queryDataTmp(vm.pagination.next_start_index,1,vm.plateform,vm.selectParkName,vm.status,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                        vm.dataTmp = response.records;
                        vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                        vm.pagination.previous_start_index = response.records[0].id;
                        vm.pagination.minid = response.minid;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                    });
                }
            }else if(start_index == 3){
                dataTmpService.queryDataTmp(-1,'',vm.plateform,vm.selectParkName,vm.status,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                    vm.dataTmp = response.records;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.minid = response.minid;
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                });
            }
        }
        vm.clearAndRefresh = function () {
            vm.plateform = null;vm.selectParkName = null;vm.status = null;vm.valid_begintime = null;vm.valid_endtime = null;
            vm.coupon ={
                valid_begintime:undefined,
                valid_endtime:undefined
            };
            vm.readRecords(0);
        };
    }
})();
(function () {
    angular.module('app.parking')
        .factory('dataTmpService', dataTmpService);
    dataTmpService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function dataTmpService($http, URL_SEED) {
        var service = {};
        var INDUCEMENT_URL = URL_SEED.API_URL + 'join3rd/dataTmpObject/';
        service.queryDataTmp = function (start_index,pagedirect,plateform,parklot,status,startime,endtime) {
            return $http({
                method: 'GET',
                url: INDUCEMENT_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                params: {
                    start_index:start_index,
                    pagedirect:pagedirect,
                    plateform: '2',
                    parklot:parklot,
                    status:status,
                    startime:startime,
                    endtime:endtime
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        return service;
    }
})();

(function () {
    angular.module('app.parking')
        .controller('examineController', examineController);
    examineController.$inject = ['$location', 'organService', 'datatablesOptions', 'DTColumnDefBuilder','examineService','$scope','examineFactory','$uibModal','logger'];
    'use strict';
    function examineController($location, organService, datatablesOptions, DTColumnDefBuilder,examineService,$scope,examineFactory,$uibModal,logger) {
        var vm = this;
        vm.findBill = findBill;
        vm.generateBill = generate;
        vm.queryOrgan = queryOrgan;
        vm.jumpPerson = jumpPerson;
        vm.queryOrgan();
        vm.findBill();
        vm.OrganAsync = [];
        var allOrgans = [];
        function queryOrgan() {
            organService.queryOrgan().then(function (response) {
                vm.OrganAsync = response.records;
                angular.forEach(response.records, function (value) {
                    allOrgans.push(value.id);
                });
            });
        }
        vm.onSelectCallbackOrgan = function (item) {
            vm.eventResult = {model: item};
            vm.organId = vm.eventResult.model.id;
            vm.organName = vm.eventResult.model.name;
        };
        vm.dtOptions = datatablesOptions.getDatatableOption();
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8),
            DTColumnDefBuilder.newColumnDef(9),
            DTColumnDefBuilder.newColumnDef(10)
        ];
        function findBill() {
            examineService.findBill(vm.status).then(function (response) {
                if(response.status == 0){
                    vm.examine = response.serializer_initiator;
                    angular.forEach(response.serializer_initiator, function (value,index) {
                       if(value.status==0){
                           vm.examine[index].statusName='未发送';
                       }else if(value.status==1){
                           vm.examine[index].statusName='待核对';
                       }else if(value.status==2){
                           vm.examine[index].statusName='已审核,账目准确';
                       }else if(value.status==3){
                           vm.examine[index].statusName='已结算,账目异常';
                       }else if(value.status==4){
                           vm.examine[index].statusName='已结算';
                       }else {
                           vm.examine[index].statusName='未知状态';
                       }
                    });
                }else{
                    logger.warning('查询失败','请重新刷新查询!');
                }
            });
        }
        function generate() {
            examineService.generateBill(vm.organId).then(function (response) {
                if(response.status == 0){
                    logger.success('生产'+vm.organName+'组织账单成功','操作成功!');
                    vm.findBill();
                    $state.reload();
                }else{
                    logger.warning('生产'+vm.organName+'组织账单失败','操作失败!');
                }
            });
        }
        function jumpPerson(examine) {
                examineFactory.setExamine(examine);
                var modalInstance = $uibModal.open({
                    backdrop: 'static',
                    templateUrl: 'personSelect.html',
                    size: 'sm',
                    controller: 'examinePersonController',
                    controllerAs: 'vm'
                });
                modalInstance.result.then(function () {
                    vm.findBill();
                });
        }
    }
})();
(function () {

    angular.module('app.parking')
        .factory('examineFactory', examineFactory);
    'use strict';
    function examineFactory() {
        var examine = {
            serializer_auditor:'',           //审核者信息
            serializer_initiator:'',         //发起者信息
            id:'',                     //数据id
            created_time:'',            //创建时间
            partnername:'',             //商户结算人员名字
            initiator:'',              //发起者id
            auditor:'',                //审核者id
            initiator_name:'',         //发起者账户名
            auditor_name:'',           //审核者账户名
            name:'',                  //账单名称
            status:'',                 //账单状态（ 0：未审核     1：已查阅，审核中    2：已审核      3：已结算 ）
            organization:'',          //账单所属组织id
            organization_name:'',      //账单所属组织名称
            stroke_count:'',            //数据结算笔数
            aggregate_amount:'',        //数据结算金额
            refund_stroke_count:'',    //退款笔数
            refund_amount:'',           //退款金额
            startime:'',                //查询开始时间（用于请求订单详情）
            endtime:'',                 //查询结束时间（用于请求订单详情）
            amount:'',                   //应缴
            netreceipts:''               //实缴
        };
        return {
            setExamine: setExamine,
            getExamine: getExamine
        };
        function setExamine(cExamine) {
            examine.serializer_auditor = cExamine.serializer_auditor;
            examine.serializer_initiator = cExamine.serializer_initiator;
            examine.id = cExamine.id;
            examine.created_time = cExamine.created_time;
            examine.partnername = cExamine.partnername;
            examine.initiator = cExamine.initiator;
            examine.auditor = cExamine.auditor;
            examine.initiator_name = cExamine.initiator_name;
            examine.auditor_name = cExamine.auditor_name;
            examine.name = cExamine.name;
            examine.status = cExamine.status;
            examine.organization = cExamine.organization;
            examine.organization_name = cExamine.organization_name;
            examine.stroke_count = cExamine.stroke_count;
            examine.aggregate_amount = cExamine.aggregate_amount;
            examine.refund_stroke_count = cExamine.refund_stroke_count;
            examine.refund_amount = cExamine.refund_amount;
            examine.startime = cExamine.startime;
            examine.endtime = cExamine.endtime;
            examine.amount = cExamine.amount;
            examine.netreceipts = cExamine.netreceipts;
        }
        function getExamine() {
            return examine;
        }
    }
})();
(function () {
    angular.module('app.parking')
        .controller('examinePersonController', examinePersonController);
    examinePersonController.$inject = ['$uibModalInstance', 'examineFactory', '$state', 'examineGroupService','examineService','$scope','$uibModal','logger'];
    'use strict';
    function examinePersonController($uibModalInstance, examineFactory, $state, examineGroupService,examineService,$scope,$uibModal,logger) {
        var vm = this;var allOrgans = [];
        vm.queryPerson = queryPerson;
        vm.putInfo = putInfo;
        vm.cancel = cancel;
        vm.confirmBill = confirmBill;
        vm.queryPerson();
        function queryPerson() {
            examineService.queryPerson().then(function (response) {
                vm.personAsync = response.records;
                angular.forEach(response.records, function (value) {
                    allOrgans.push(value.id);
                });
            })
        }
        vm.onSelectCallbackPerson = function (item) {
            vm.eventResult = {model: item};
            vm.userid = vm.eventResult.model.user;
            vm.organName = vm.eventResult.model.nick_name;
        };
        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
        function putInfo(settlement) {
            examineService.putInfo(examineFactory.getExamine().id,vm.userid).then(function (response) {
                if(response.status == 0){
                    vm.confirmBill();
                }else {
                    logger.error('发送' + vm.organName + '失败"!', response.data, '操作失败');
                }
            });
        }
        function confirmBill(settlement) {
            examineGroupService.confirmBill(examineFactory.getExamine().id,1).then(function (response) {
                if(response.status == 0){
                    logger.success('成功审核给' + vm.organName + '成功', response.data, '操作成功！');
                    vm.cancel();
                    $state.reload();
                }else {
                    logger.error('发送' + vm.organName + '失败"!', response.data, '操作失败');
                }
            });
        }
    }
})();
(function () {
    angular.module('app.parking')
        .factory('examineService', examineService);
    examineService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function examineService($http, URL_SEED) {
        var service = {};
        var PARKPOWER_URL = URL_SEED.API_URL + 'billing/settlement/';
        var PERSON_URL = URL_SEED.API_URL + 'orgman/orguserprofile/';
        service.generateBill =function(organization) {
            return $http({
                method: 'GET',
                url: PARKPOWER_URL,
                params: {
                    organization:organization,
                    found:'bill'
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        service.findBill =function(a) {
            return $http({
                method: 'GET',
                url: PARKPOWER_URL,
                params: {
                    query_record:'bill',
                    status:a
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        service.userRecords =function() {
            var reconcileDate = angular.toJson({
                query_record:'bill'
            });
            return $http({
                method: 'POST',
                url: PARKPOWER_URL,
                data: reconcileDate,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        service.queryPerson =function() {
            return $http({
                method: 'GET',
                url: PERSON_URL,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        service.putInfo =function(settlement,userid) {
            var putInfo = angular.toJson({
                settlement:settlement,
                userid:userid
            });
            return $http({
                method: 'POST',
                url: PARKPOWER_URL,
                data: putInfo,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        return service;
    }
})();

(function () {
    angular.module('app.parking')
        .controller('billDetailController', billDetailController);
    billDetailController.$inject = ['$uibModalInstance', 'examineGroupService', 'URL_SEED', 'DTColumnDefBuilder','examineService','$scope','examineFactory','$uibModal','logger'];
    'use strict';
    function billDetailController($uibModalInstance, examineGroupService, URL_SEED, DTColumnDefBuilder,examineService,$scope,examineFactory,$uibModal,logger) {
        var vm = this;
        vm.billInfo = examineFactory.getExamine();
        vm.billDetail = billDetail;
        vm.downloadPDF = downloadPDF;
        vm.cancel = cancel;
        vm.billDetail();
        function billDetail() {
            examineGroupService.downloadPDF(vm.billInfo.name,vm.billInfo.organization_name,vm.billInfo.initiator_name,vm.billInfo.auditor_name,vm.billInfo.created_time,vm.billInfo.stroke_count,vm.billInfo.aggregate_amount,vm.billInfo.refund_stroke_count,vm.billInfo.refund_amount,vm.billInfo.general_surplus).then(function (response) {
                if(response.status == 0){
                    vm.sumName = response.address;
                    vm.url = URL_SEED.IMG_URL+response.address;
                }else {
                    logger.error('审核失败!', response, '操作失败');
                }
            })
        }
        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
        function downloadPDF() {
            window.open(vm.url,'_blank');
        }
    }
})();
(function () {
    angular.module('app.parking')
        .controller('confirmBillController', confirmBillController);
    confirmBillController.$inject = ['$location', 'examineGroupService', 'DTColumnDefBuilder','examineService','$scope','examineFactory','$uibModalInstance','logger'];
    'use strict';
    function confirmBillController($location, examineGroupService, DTColumnDefBuilder,examineService,$scope,examineFactory,$uibModalInstance,logger) {
        var vm = this;
        vm.confirmBill = confirmBill;
        vm.cancel = cancel;
        function confirmBill() {
            examineGroupService.confirmBill(examineFactory.getExamine().id,vm.status).then(function (response) {
                if(response.status == 0){
                    logger.success('成功', response.data, '操作成功！');
                    vm.cancel();
                    $state.reload();
                }else {
                    logger.error('失败!', response.data, '操作失败');
                }
            })
        }
        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
(function () {
    angular.module('app.parking')
        .controller('examineGroupController', examineGroupController);
    examineGroupController.$inject = ['$location', 'examineGroupService', 'datatablesOptions', 'DTColumnDefBuilder','examineService','groupBillFactory','examineFactory','$uibModal','logger'];
    'use strict';
    function examineGroupController($location, examineGroupService, datatablesOptions, DTColumnDefBuilder,examineService,groupBillFactory,examineFactory,$uibModal,logger) {
        var vm = this;
        vm.findBill = findBill;
        vm.jumpDetail = jumpDetail;
        vm.downloadPDF = downloadPDF;
        vm.clearAndRefresh = clearAndRefresh;
        vm.confirmBill = confirmBill;
        vm.findBill();
        vm.dtOptions = datatablesOptions.getDatatableOption();
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8),
            DTColumnDefBuilder.newColumnDef(9),
            DTColumnDefBuilder.newColumnDef(10),
            DTColumnDefBuilder.newColumnDef(11),
            DTColumnDefBuilder.newColumnDef(12)
        ];
        function findBill() {
            examineService.findBill(vm.status).then(function (response) {
                if(response.status == 0){
                    vm.examine = response.serializer_auditor;
                    angular.forEach(response.serializer_auditor, function (value,index) {
                       if(value.status==0){
                           vm.examine[index].statusName='未发送';
                       }else if(value.status==1){
                           vm.examine[index].statusName='待审核';
                       }else if(value.status==2){
                           vm.examine[index].statusName='已审核,';
                       }else if(value.status==3){
                           vm.examine[index].statusName='已审核';
                       }else if(value.status==4){
                           vm.examine[index].statusName='已结算';
                       }else {
                           vm.examine[index].statusName='未知状态';
                       }
                    });
                }else{
                    logger.warning('查询失败','请重新刷新查询!');
                }
            });
        }
        function confirmBill(examine) {
                examineFactory.setExamine(examine);
                var modalInstance = $uibModal.open({
                    backdrop: 'static',
                    templateUrl: 'confirmBill.html',
                    size: 'sm',
                    controller: 'confirmBillController',
                    controllerAs: 'vm'
                });
                modalInstance.result.then(function () {
                    vm.findBill();
                });
        }
        function jumpDetail(examine) {
            groupBillFactory.setGroupBill(examine);
            $location.path('/app/groupBill');
        }
        function downloadPDF(examine) {
            examineFactory.setExamine(examine);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: 'exportDetail.html',
                size: 'sm',
                controller: 'billDetailController',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                // vm.findBill();
            });
        }
        function clearAndRefresh() {
            vm.status = '';
            vm.findBill();
        }
    }
})();
(function () {

    angular.module('app.parking')
        .factory('examineFactory', examineFactory);
    'use strict';
    function examineFactory() {
        var examine = {
            serializer_auditor:'',           //审核者信息
            serializer_initiator:'',         //发起者信息
            id:'',                     //数据id
            created_time:'',            //创建时间
            partnername:'',             //商户结算人员名字
            initiator:'',              //发起者id
            auditor:'',                //审核者id
            initiator_name:'',         //发起者账户名
            auditor_name:'',           //审核者账户名
            name:'',                  //账单名称
            status:'',                 //账单状态（ 0：未审核     1：已查阅，审核中    2：已审核      3：已结算 ）
            organization:'',          //账单所属组织id
            organization_name:'',      //账单所属组织名称
            stroke_count:'',            //数据结算笔数
            aggregate_amount:'',        //数据结算金额
            refund_stroke_count:'',    //退款笔数
            refund_amount:'',           //退款金额
            startime:'',                //查询开始时间（用于请求订单详情）
            endtime:'',                 //查询结束时间（用于请求订单详情）
            general_surplus:0           //账单结余
        };
        return {
            setExamine: setExamine,
            getExamine: getExamine
        };
        function setExamine(cExamine) {
            examine.serializer_auditor = cExamine.serializer_auditor;
            examine.serializer_initiator = cExamine.serializer_initiator;
            examine.id = cExamine.id;
            examine.created_time = cExamine.created_time;
            examine.partnername = cExamine.partnername;
            examine.initiator = cExamine.initiator;
            examine.auditor = cExamine.auditor;
            examine.initiator_name = cExamine.initiator_name;
            examine.auditor_name = cExamine.auditor_name;
            examine.name = cExamine.name;
            examine.status = cExamine.status;
            examine.organization = cExamine.organization;
            examine.organization_name = cExamine.organization_name;
            examine.stroke_count = cExamine.stroke_count;
            examine.aggregate_amount = cExamine.aggregate_amount;
            examine.refund_stroke_count = cExamine.refund_stroke_count;
            examine.refund_amount = cExamine.refund_amount;
            examine.startime = cExamine.startime;
            examine.endtime = cExamine.endtime;
            examine.general_surplus = cExamine.general_surplus;
        }
        function getExamine() {
            return examine;
        }
    }
})();
(function () {
    angular.module('app.parking')
        .factory('examineGroupService', examineGroupService);
    examineGroupService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function examineGroupService($http, URL_SEED) {
        var service = {};
        var PARKPOWER_URL = URL_SEED.API_URL + 'billing/settlement/';
        var DOWPDF_URL = URL_SEED.IMG_URL + 's/billpdf/';
        service.confirmBill =function(settlement,option) {
            return $http({
                method: 'GET',
                url: PARKPOWER_URL,
                params: {
                    settlement:settlement,
                    option:option
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        service.lookupBill =function() {
            return $http({
                method: 'GET',
                url: PARKPOWER_URL,
                params: {
                    query_record:'bill'
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        service.downloadPDF =function(bill_name,organization_name,initiator_name,auditor_name,created_time,stroke_count,aggregate_amount,refund_stroke_count,refund_amount,general_surplus) {
            var PDFDATE = angular.toJson({
                bill_name:bill_name,
                organization_name:organization_name,
                initiator_name:initiator_name,
                auditor_name:auditor_name,
                created_time:created_time,
                stroke_count:stroke_count,
                aggregate_amount:aggregate_amount/100,
                refund_stroke_count:refund_stroke_count,
                refund_amount:refund_amount,
                general_surplus:general_surplus/100
            });
            return $http({
                method: 'POST',
                url: DOWPDF_URL,
                data: PDFDATE,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        return service;
    }
})();

(function () {
    angular.module('app.parking')
        .controller('groupBillController', groupBillController);
    groupBillController.$inject = ['$location', '$cookies', 'datatablesOptions', 'DTColumnDefBuilder','organReconcileService','$scope','organReconcileFactory','$uibModal','groupBillFactory','logger'];
    'use strict';
    function groupBillController($location, $cookies, datatablesOptions, DTColumnDefBuilder,organReconcileService,$scope,organReconcileFactory,$uibModal,groupBillFactory,logger) {
        var vm = this;
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        vm.coupon ={
            valid_begintime:undefined,
            valid_endtime:undefined
        };
        vm.queryOrganReconcile = queryOrganReconcile;
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        vm.organId =  $cookies.get('organization_id');
        vm.obj = groupBillFactory.getGroupBill();
        if(vm.obj){
            vm.coupon.valid_begintime = vm.obj.startime;
            vm.coupon.valid_endtime = vm.obj.endtime;
            vm.queryOrganReconcile();
        }
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        vm.dtOptions = datatablesOptions.getDatatableOption();
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8),
            DTColumnDefBuilder.newColumnDef(9),
            DTColumnDefBuilder.newColumnDef(10),
            DTColumnDefBuilder.newColumnDef(10),
            DTColumnDefBuilder.newColumnDef(11),
            DTColumnDefBuilder.newColumnDef(12),
            DTColumnDefBuilder.newColumnDef(13),
            DTColumnDefBuilder.newColumnDef(14),
            DTColumnDefBuilder.newColumnDef(15),
            DTColumnDefBuilder.newColumnDef(16),
            DTColumnDefBuilder.newColumnDef(17),
            DTColumnDefBuilder.newColumnDef(18),
            DTColumnDefBuilder.newColumnDef(19),
            DTColumnDefBuilder.newColumnDef(20)
        ];
        function queryOrganReconcile() {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
                organReconcileService.readRecords(vm.organId,vm.valid_begintime,vm.valid_endtime,vm.lottype).then(function (response) {
                    var i = 0;
                    vm.reconcileDate = [];
                    angular.forEach(response.data.parklot_summary, function (value,index) {
                        vm.reconcileDate[i] = value;
                        vm.reconcileDate[i].numberId = index;
                        vm.reconcileDate[i].id = i+1;
                        i++;
                    });
                    var countDate= {};
                    var countDateId = i+1;
                    var countDateName = '合计';
                    countDate.id =countDateId;
                    countDate.parklotname = countDateName;
                    countDate.aggregate_amount = response.data.aggregate_amount;
                    countDate.alipay_amount = response.data.alipay_amount;
                    countDate.alipay_refund = response.data.alipay_refund;
                    countDate.alipay_stroke_count = response.data.alipay_stroke_count;
                    countDate.alipay_surplus = response.data.alipay_surplus;
                    countDate.general_surplus = response.data.general_surplus;
                    countDate.total_refund = response.data.total_refund;
                    countDate.total_refund_stroke_count = response.data.total_refund_stroke_count;
                    countDate.total_stroke_count = response.data.total_stroke_count;
                    countDate.wechatpay_refund = response.data.wechatpay_refund;
                    countDate.wechatpay_stroke_count = response.data.wechatpay_stroke_count;
                    countDate.wechatpay_surplus = response.data.wechatpay_surplus;
                    countDate.wechatpay_amount = response.data.wechatpay_amount;
                    countDate.coupon_fee = response.data.coupon_fee;
                    countDate.apppay_amount = response.data.apppay_amount;
                    countDate.apppay_surplus = response.data.apppay_surplus;
                    countDate.apppay_refund = response.data.apppay_refund;
                    countDate.apppay_stroke_count = response.data.apppay_stroke_count;
                    vm.reconcileDate[i] = countDate;
                    vm.allData =  response.data;
                });
            }
        }
        vm.exportReconcile = exportReconcile;
        vm.clearAndRefresh = clearAndRefresh;
        function clearAndRefresh() {
            vm.coupon.valid_endtime = undefined ;
            vm.coupon.valid_begintime = undefined ;
            vm.reconcileDate = '';
            vm.allData = '';
            vm.lottype = '';
        }
        vm.parkReconcile = parkReconcile;
        function parkReconcile(reconcileDate,b) {
            var obj = {
                id:reconcileDate,
                parklotname:b,
                valid_begintime:vm.valid_begintime,
                valid_endtime:vm.valid_endtime,
                organId:vm.organId,
                lottype:vm.lottype
            }
            organReconcileFactory.setorganReconcile(obj);
            $location.path('/app/parkBill');
        }
        function exportReconcile() {
            vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
            vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            var obj = {
                valid_begintime:vm.valid_begintime,
                valid_endtime:vm.valid_endtime,
                organId:vm.organId,
                lottype:vm.lottype
            }
            organReconcileFactory.setorganReconcile(obj);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: 'exportDetail.html',
                size: 'lg',
                controller: 'organReconcileExportController',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                vm.queryOrganReconcile();
            });
        }
    }

})();
(function () {

    angular.module('app.parking')
        .factory('groupBillFactory', groupBillFactory);
    'use strict';
    function groupBillFactory() {
        var groupBill = {
            organization:'',           //组织id
            startime:'',         //起始时间
            endtime:''                    //结束时间
        };
        return {
            setGroupBill: setGroupBill,
            getGroupBill: getGroupBill
        };
        function setGroupBill(cGroupBill) {
            groupBill.organization = cGroupBill.organization;
            groupBill.startime = cGroupBill.startime;
            groupBill.endtime = cGroupBill.endtime;
        }
        function getGroupBill() {
            return groupBill;
        }
    }
})();
(function () {
    angular.module('app.parking')
        .controller('parkBillController', parkBillController);
    parkBillController.$inject = ['$location', 'ManageParkingService', 'datatablesOptions', 'DTColumnDefBuilder','reconcileService','$scope','organReconcileFactory','$uibModal','URL_SEED','logger','reconcileExportFactory'];
    'use strict';
    function parkBillController($location, ManageParkingService, datatablesOptions, DTColumnDefBuilder,reconcileService,$scope,organReconcileFactory,$uibModal,URL_SEED,logger,reconcileExportFactory) {
        var vm = this;
        vm.queryReconcile = queryReconcile;
        vm.coupon ={
            valid_begintime:undefined,
            valid_endtime:undefined
        };
        var obj = organReconcileFactory.getorganReconcile();
        vm.seletParkId = obj.id;vm.coupon.valid_begintime = obj.valid_begintime;vm.coupon.valid_endtime = obj.valid_endtime;vm.parkingAsync.selected = obj.parklotname;
        if(obj.id && obj.valid_begintime && obj.valid_endtime && obj.parklotname){
            vm.queryReconcile();
        }
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        vm.dtOptions = datatablesOptions.getDatatableOption();
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8),
            DTColumnDefBuilder.newColumnDef(9),
            DTColumnDefBuilder.newColumnDef(10)
        ];
        function queryReconcile() {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
                var i= 0;
                reconcileService.readRecords(vm.seletParkId,vm.valid_begintime,vm.valid_endtime,vm.plate_number).then(function (response) {
                    angular.forEach(response.data.water_bill, function (value,index) {
                        if(value.paid){
                            response.data.water_bill[index].paidName = '已支付';
                        }else {
                            response.data.water_bill[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': response.data.water_bill[index].payment_channelName ='微信';break;
                            case 'alipay': response.data.water_bill[index].payment_channelName ='支付宝';break;
                            case 'unionpay': response.data.water_bill[index].payment_channelName ='银联';break;
                            case 'dadapay': response.data.water_bill[index].payment_channelName ='账上余额';break;
                        }
                        response.data.water_bill[index].numberId = index+1;
                        i++;
                    });
                    vm.reconcileDate = response.data.water_bill;
                    var countDate= {};
                    var countDateId = i+1;
                    var countDateName = '合计';
                    countDate.id =countDateId;
                    countDate.username = countDateName;
                    countDate.rdpay_trade_no = '--';
                    countDate.out_trade_no = '--';
                    countDate.created_time = '--';
                    countDate.paidName = '--';
                    countDate.payment_channelName = '--';
                    countDate.balance = '';
                    countDate.amount = response.data.general_surplus-response.data.coupon_fee;
                    countDate.coupon_fee = response.data.coupon_fee;
                    countDate.order_desc = '--';
                    vm.reconcileDate[i] = countDate;
                    vm.allData =  response.data;
                });
            }
        }
        vm.exportReconcile = exportReconcile;
        vm.clearAndRefresh = clearAndRefresh;
        function clearAndRefresh() {
            vm.seletParkId = '';vm.valid_begintime = '';vm.valid_endtime = '';
            vm.parkingAsync.selected = undefined;
            vm.coupon.valid_endtime = undefined ;
            vm.coupon.valid_begintime = undefined ;
            vm.plate_number = '';
            queryReconcile();
        }
        function exportReconcile() {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime) {
                vm.valid_begintime = moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            var obj = {
                valid_begintime:vm.valid_begintime,
                valid_endtime:vm.valid_endtime,
                organId:vm.organId,
                parklotname:vm.seletParkId
            }
            reconcileExportFactory.setorganReconcile(obj);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: 'exportDetail.html',
                size: 'lg',
                controller: 'reconcileExportController',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                vm.queryOrganReconcile();
            });
        }
    }
})();
/**
 * Created by huangxiang  on 2016/12/20 0020.
 * @author: huangxiang
 * Module: exception.factory.js
 * feature: 错误捕获
 */
(function () {
    angular.module('app.exception')
        .factory('exception',exception);
    exception.$inject = [];
    
    function exception(logger) {
        return {
            catcher: catcher
        };

        function catcher(message) {
            return function (reason) {
                logger.error(message,reason);
            };
        }
    }
})();
/**
 * Created by huangxiang  on 2016/12/20 0020.
 * @author:
 * Module:
 * feature:
 */
(function () {
    angular.module('app.exception')
        .provider('exceptionHandler', exceptionHandler)
        .config('config', config);

    /**
     * Must configure the exception handling
     * @return {[type]}
     */
    function exceptionHandler() {
        this.config = {
            appErrorPrefix: undefined
        };

        this.configure = function (appErrorPrefix) {
            this.config.appErrorPrefix = appErrorPrefix;
        };

        this.$get = function () {
            return {config: this.config};
        };
    }

    function config($provide) {
        $provide.decorator('$exceptionHandler', extendExceptionHandler);
    }

    /**
     * 
     * @param $delegate
     * @param exceptionHandler
     * @param logger
     * @returns {Function}
     */
    function extendExceptionHandler($delegate, exceptionHandler, logger) {
        return function (exception, cause) {
            var appErrorPrefix = exceptionHandler.config.appErrorPrefix || '';
            var errorData = {exception: exception, cause: cause};
            exception.message = appErrorPrefix + exception.message;
            $delegate(exception, cause);
            /**
             * Could add the error to a service's collection,
             * add errors to $rootScope, log errors to remote web server,
             * or log locally. Or throw hard. It is entirely up to you.
             * throw exception;
             *
             * @example
             *     throw { message: 'error message we added' };
             */
            logger.error(exception.message, errorData);
        };
    }
})();
(function() {
    'use strict';
    angular
        .module('app.sidebar')
        .controller('exportController', exportController);
    exportController.$inject = ['exportService'];
    function exportController(exportService){
        var vm = this;
        $('#excel-file').change(function(e) {
            var files = e.target.files;
            var fileReader = new FileReader();
            fileReader.onload = function(ev) {
                try {
                    var data = ev.target.result,
                        workbook = XLSX.read(data, {
                            type: 'binary'
                        }), // 以二进制流方式读取得到整份excel表格对象
                        persons = []; // 存储获取到的数据
                } catch (e) {
                    console.log('文件类型不正确');
                    return;
                }
                // 表格的表格范围，可用于判断表头是否数量是否正确
                var fromTo = '';
                // 遍历每张表读取
                for (var sheet in workbook.Sheets) {
                    if (workbook.Sheets.hasOwnProperty(sheet)) {
                        fromTo = workbook.Sheets[sheet]['!ref'];
                        console.log(fromTo);
                        persons = persons.concat(XLSX.utils.sheet_to_json(workbook.Sheets[sheet]));
                        // break; // 如果只取第一张表，就取消注释这行
                    }
                }
                var i = persons.length;
                window.time = setInterval(function () { exportData(i,persons); },100);
            };
            // 以二进制方式打开文件
            fileReader.readAsBinaryString(files[0]);
        });

        var count = 0;
        function exportData(i,persons){
            if(count<i){
                var contentData = [];
                contentData.push(persons[count]);
                var data = angular.toJson(persons[count]);
                count++;
            }else{
                clearInterval(window.time);
                return false;
            }
            var exportUrl = $('#exportUrl').val();
            exportService.exportData(exportUrl, data).then(function (response){
                if (response.status == 0) {
                    console.log("导入"+data.TCC+"成功！");
                }else{
                    console.log("导入失败！"+response.status);
                    return false;
                }
            })
        }
    }

})();
/**
 * bill.online.service.js.js
 * @author: huangxiang
 * @create 2016-12-29 16:01
 */
(function () {
    angular.module('app.sidebar')
        .factory('exportService', exportService);
    exportService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function exportService($http, URL_SEED) {
        return {
            exportData:exportData//导入数据
        };
        //新增区域信息
        function exportData(dataUrl,data) {
            return $http({
                method: 'PUT',
                url: dataUrl,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: data,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
    }
})();
(function () {
    angular.module('app.parking')
        .controller('addCardController', addCardController);
    addCardController.$inject = ['$location', 'inducementService', 'logger','policeService'];
    'use strict';
    function addCardController($location, inducementService, logger,policeService) {
        var vm = this;
        vm.addCard = addCard;
        vm.backToPrevious = backToPrevious;
        function addCard() {
            inducementService.addCard(vm.CardNum).then(function (response) {
                if (response.data.status == 0) {
                    logger.success('添加成功'+'卡号：'+vm.CardNum,'操作成功');
                    $location.path('/app/induCard');
                }else if (response.data.status == 40004) {
                    logger.error('添加失败' + vm.community.name + '"' + '失败!', vm.community.name, '该卡已经存在！');
                }  else {
                    logger.error('添加失败');
                }
            });
        }
        function backToPrevious() {
            $location.path('/app/induCard');
        }
    }
})();
(function () {
    angular.module('app.parking')
        .controller('induCardController', induCardController);
    induCardController.$inject = ['$location', 'induCardFactory', 'logger','inducementService','datatablesOptions','DTColumnDefBuilder','$uibModal','$document'];
    'use strict';
    function induCardController($location, induCardFactory, logger,inducementService,datatablesOptions,DTColumnDefBuilder,$uibModal,$document) {
        var vm = this;
        vm.queryCard = queryCard;
        vm.clearAndRefresh = clearAndRefresh;
        vm.addCard = addCard;
        vm.deleteCard = deleteCard;
        vm.modifyCard = modifyCard;
        vm.queryCard();
        vm.dtOptions = datatablesOptions.getDatatableOption();
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3).notSortable()
        ];
        function queryCard() {
            inducementService.queryCard(vm.CardNum,vm.IsOnline).then(function (response) {
                vm.card = response.records;
            });
        }
        function addCard() {
            $location.path('/app/induCardAdd');
        }
        function deleteCard(card) {
            induCardFactory.setInduCard(card);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: 'deleteCard.html',
                size: 'sm',
                controller: 'cardDeteleCtr',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                vm.queryCard();
            });
        }
        function modifyCard(card) {
            induCardFactory.setInduCard(card);
            $location.path('/app/induCardModify');
        }
        function clearAndRefresh() {
            vm.CardNum='';vm.IsOnline='';
        }

    }
})();
(function(){
    angular.module('app.parking')
        .controller('cardDeteleCtr',cardDeteleCtr);
    cardDeteleCtr.$inject = ['$uibModalInstance','inducementService','induCardFactory','logger'];
    'use strict';
    function cardDeteleCtr($uibModalInstance,inducementService,induCardFactory,logger) {
        var vm = this;
        vm.deleteCard = deleteCard;
        vm.cancel = cancel;
        vm.CardId = induCardFactory.getInduCard().CardId;
        function deleteCard() {
            inducementService.deleteCard(vm.CardId).then(function (response) {
                if(response.data.status === 0){
                    $uibModalInstance.close('closed');
                    logger.success('成功刪除'+induCardFactory.getInduCard().CardNum,response.data,'操作成功！');
                }else {
                    logger.error('删除失败'+induCardFactory.getInduCard().CardNum + '失败！！',response.data,'操作失败！');
                }
            });
        }
        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
(function () {
    angular.module('app.parking')
        .factory('induCardFactory', induCardFactory);
    'use strict';
    function induCardFactory(){
        var inducard = {
            CardId:'',//卡id
            CardNum:'',//卡号
            IsOnline:''//在线状态（1 在线    0 不在线）
        };
        return {
            setInduCard: setInduCard,
            getInduCard: getInduCard
        };
        function setInduCard(cInduCard) {
            inducard.CardId = cInduCard.CardId;
            inducard.CardNum = cInduCard.CardNum;
            inducard.IsOnline = cInduCard.IsOnline;
        }
        function getInduCard() {
            return inducard;
        }
    }
})();
(function () {
    "use strict";
    angular.module('app.parking')
        .controller('modifyCardController', modifyCardController);
    modifyCardController.$inject = ['$scope', '$timeout', '$location', 'communityFactory', 'inducementService', 'toastr','policeService'];
    function modifyCardController($scope, $timeout, $location, communityFactory, inducementService, toastr,policeService) {
        var vm = this;
        vm.getCard =  getCard;
        vm.getCard();
        function getCard() {
            $timeout(function () {
                vm.CardId = communityFactory.getCommunity().CardId;
                vm.CardNum = communityFactory.getCommunity().CardNum;
            }, 500);
        };
        vm.modifyCard = function () {
            inducementService.modifyCard(vm.CardId,vm.CardNum).then(function (response) {
                if (response.data.status === 0) {
                    toastr.success('修改成功!!', response, {
                        closeButton: true,
                        progressBar: true,
                        positionClass: 'toast-top-center'
                    });
                    $location.path('/app/induCard');
                }
            });
        };
        vm.backToPrevious = function () {
            $location.path('/app/induCard');
        };
    }
})();
(function () {
    angular.module('app.parking')
        .controller('inducementController', inducementController);
    inducementController.$inject = ['$location', 'ManageParkingService', 'logger','inducementService'];
    'use strict';
    function inducementController($location, ManageParkingService, logger,inducementService) {
        var vm = this;
        vm.card_number = '';vm.handle_type = '';vm.handle_way = '';vm.font_color = '';vm.font_color = '';vm.msg_info='';
        vm.addInducement = addInducement; // 添加停车场
        vm.addInducementOwer = addInducementOwer; // 添加停车场
        function addInducement() {
            var data = '';
            for(var i=0;i<selectParkPower.length;i++){
                if(i==0){
                    data = selectParkPower[i];
                }else {
                    data =data+','+ selectParkPower[i];
                }
            }
            var data1 = data.toString();
            inducementService.addInducement(data1,vm.card_number,vm.handle_type,vm.handle_way,vm.font_color,vm.in_type,vm.msg_info).then(function (response) {
                if (response.data.status === 'success') {
                   vm.addInducementOwer(data1);
                }else if (response.status === 40004) {
                    logger.error('操作失败!', '请核实！');
                }else if(response.data.status === 10002 ){
                    logger.error('操作失败!', '缺少必填字段！');
                }else {
                    logger.error('操作失败');
                }
            });
        }
        function addInducementOwer(data) {
            inducementService.addInducementOwer(data,vm.card_number,vm.handle_type,vm.handle_way,vm.font_color,vm.in_type,vm.msg_info).then(function (response) {
                if (response.data.status === 0) {
                    logger.success('操作成功'+'停车场：','操作成功');
                }else if (response.status === 40004) {
                    logger.error('操作失败!', '请核实！');
                }else if(response.data.status === 10002 ){
                    logger.error('操作失败!', '缺少必填字段！');
                }else {
                    logger.error('操作失败');
                }
            });
        }
        //功能选择
        vm.parkSearchText = ''; // 停车场搜索关键字
        vm.GroupSelectedAvailItems = [];
        vm.GroupSelectedSelectedListItems = [];
        vm.GroupSelectedListItems = [];
        vm.GroupAvailableListItems = [];
        vm.ParkSelectedAvailItems = [];
        vm.ParkSelectedSelectedListItems = [];
        vm.ParkSelectedListItems = [];
        vm.ParkAvailableListItems = [];
        vm.currentParkSelect=[];
        var selectParkPower = [];
        /*获取功能列表*/
        vm.queryParking = queryParking;
        vm.queryParking();
        function queryParking() {
            inducementService.queryParking().then(function (response) {
                if(response.parking_lots.length !== 0) {
                    vm.allParkAction = response.parking_lots;
                    angular.copy(vm.allParkAction, vm.ParkAvailableListItems);
                }
            });
        }

        vm.OnAvailableChange = function () {
            vm.AvailLength = vm.SelectedAvailItems.length;
        };
        /*从左边等select移动至右边的select*/
        vm.ParkBtnRight = function () {
            //move selected.
            angular.forEach(vm.ParkSelectedAvailItems, function (value) {
                this.push(value);
            }, vm.ParkSelectedListItems);
            angular.forEach(vm.ParkSelectedAvailItems, function (value) {
                for (var i = vm.ParkAvailableListItems.length - 1; i >= 0; i--) {
                    if (vm.ParkAvailableListItems[i].name == value.name) {
                        vm.ParkAvailableListItems.splice(i, 1);
                        selectParkPower.push(value.id);
                    }
                }
            });
            vm.ParkSelectedAvailItems = [];
        };
        /*把左边select中等所有option移动至右边等select内*/
        vm.ParkBtnAllRight = function () {
            //move all.
            angular.forEach(vm.ParkAvailableListItems, function (value) {
                this.push(value);
                selectParkPower.push(value.id);
            }, vm.ParkSelectedListItems);
            //remove the ones that were moved from the source.
            for (var i = vm.ParkAvailableListItems.length - 1; i >= 0; i--) {
                vm.ParkAvailableListItems.splice(i, 1);
            }
        };
        /*把右边select中选中的option移动至左边等select中*/
        vm.ParkBtnLeft = function () {
            //move selected.
            angular.forEach(vm.ParkSelectedSelectedListItems, function (value) {
                this.push(value);
            }, vm.ParkAvailableListItems);

            //remove the ones that were moved from the source container.
            angular.forEach(vm.ParkSelectedSelectedListItems, function (value) {
                for (var i = vm.ParkSelectedListItems.length - 1; i >= 0; i--) {
                    if (vm.ParkSelectedListItems[i].name == value.name) {
                        vm.ParkSelectedListItems.splice(i, 1);
                        selectParkPower.splice(i, 1);
                    }
                }
            });
            vm.ParkSelectedSelectedListItems = [];
        };
        /*把左边select中的全部option移动至右边等select中*/
        vm.ParkBtnAllLeft = function () {
            //move over all items
            angular.forEach(vm.ParkSelectedListItems, function (value) {
                this.push(value);
            }, vm.ParkAvailableListItems);

            //remove the ones that were moved from the source.
            for (var i = vm.ParkSelectedListItems.length - 1; i >= 0; i--) {
                vm.ParkSelectedListItems.splice(i, 1);
            }
            selectParkPower = [];
            vm.ParkSelectedSelectedListItems = [];
        };
    }
})();
(function () {
    angular.module('app.parking')
        .factory('inducementService', inducementService);
    inducementService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function inducementService($http, URL_SEED) {
        var service = {};
        var INDUCEMENT_URL = URL_SEED.API_URL + 'device/inducement/';
        // var INDUCEMENT_URL = 'http://120.24.249.69:8000/parkhero/v0.1/device/inducement/';
        // var INDUCEMENTOWR_URL = 'http://120.24.249.69:8000/parkhero/v0.1/join3rd/controlcard/';
        var INDUCEMENTOWR_URL = URL_SEED.API_URL + 'join3rd/controlcard/';
        var OPERATION_URL = URL_SEED.API_URL + 'operation/parklots/';
        var INDUCARD_URL = URL_SEED.API_URL + 'device/cardinfo/';
        service.addInducement = function (seletParkId,card_number,handle_type,handle_way,font_color,in_type,msg_info) {
            var inducement_info = angular.toJson({
                parklot:seletParkId,
                card_number:card_number,
                handle_type:handle_type,
                font_color:font_color,
                in_type:in_type,
                handle_way:handle_way,
                msg_info:msg_info
            });
            return $http({
                method: 'POST',
                url: INDUCEMENT_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: inducement_info,
                withCredentials: true
            }).success(function (response) {
                return response.data;
            }).error(function (response) {
                return response.data;
            });
        };
        service.addInducementOwer = function (seletParkId,card_number,handle_type,handle_way,font_color,in_type,msg_info) {
            var inducement_info = angular.toJson({
                parklot:seletParkId,
                card_number:card_number,
                handle_type:handle_type,
                font_color:font_color,
                in_type:in_type,
                handle_way:handle_way,
                msg_info:msg_info
            });
            return $http({
                method: 'PUT',
                url: INDUCEMENTOWR_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: inducement_info,
                withCredentials: true
            }).success(function (response) {
                return response.data;
            }).error(function (response) {
                return response.data;
            });
        };
        service.queryParking = function () {
            return $http({
                method: 'GET',
                url: OPERATION_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                params: {
                    'querytype': 'all'
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        service.queryCard = function (CardNum,IsOnline) {
            return $http({
                method: 'GET',
                url: INDUCARD_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                params: {
                    CardNum : CardNum,
                    IsOnline:IsOnline
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        service.modifyCard = function (CardId,CardNum) {
            var carinfo = angular.toJson({
                CardId:CardId,
                CardNum:CardNum
            });
            return $http({
                method: 'PUT',
                url: INDUCARD_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: carinfo,
                withCredentials: true
            }).success(function (response) {
                return response.data;
            }).error(function (response) {
                return response.data;
            });
        };
        service.addCard = function (CardNum) {
            var inducement_info = angular.toJson({
                CardNum:CardNum
            });
            return $http({
                method: 'POST',
                url: INDUCARD_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: inducement_info,
                withCredentials: true
            }).success(function (response) {
                return response.data;
            }).error(function (response) {
                return response.data;
            });
        };
        service.deleteCard = function (CardId) {
            var inducement_info = angular.toJson({
                CardId:CardId
            });
            return $http({
                method: 'DELETE',
                url: INDUCARD_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: inducement_info,
                withCredentials: true
            }).success(function (response) {
                return response.data;
            }).error(function (response) {
                return response.data;
            });
        };
        return service;
    }
})();

(function () {
    angular.module('app.iotdevice')
        .controller('addIotdeviceController', addIotdeviceController);
    addIotdeviceController.$inject = ['$location', 'logger','iotdeviceService','ManageParkingService'];
    'use strict';
    function addIotdeviceController($location, logger,iotdeviceService,ManageParkingService) {
        var vm = this;
        vm.parkingAsync = [];
        var allParkLots = [];
        var start_index = 0;
        function queryBaiDuMapParking() {
            ManageParkingService.queryBaiDuMapParking(start_index).then(function (response) {
                if(response.parking_lots.length !== 0) {
                    start_index =  response.parking_lots[response.parking_lots.length - 1].id;
                    angular.forEach(response.parking_lots, function (value) {
                        vm.parkingAsync.push(value);
                        allParkLots.push(value.id);
                    });
                    queryBaiDuMapParking();
                }
            });
        }

        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.seletPark.id = vm.eventResult.model.id;
        };
        vm.seletPark = {
            id: undefined
        };
        vm.queryBaiDuMapParking = queryBaiDuMapParking;
        vm.addIotdevice = addIotdevice; // 添加设备
        vm.backToPrevious = backToPrevious; // 返回上一层菜单
        vm.queryBaiDuMapParking();
        function addIotdevice() {
            vm.parklot = vm.seletPark.id;
            iotdeviceService.addIotdevice(vm.iotdevice.devtype,vm.parklot,vm.iotdevice.ipaddr,vm.iotdevice.devname,vm.iotdevice.memo,vm.iotdevice.brand,vm.iotdevice.devfirm,vm.iotdevice.firmcontact,vm.iotdevice.firmphone).then(function (response) {
                if (response.status === 0) {
                    logger.success('添加成功'+'设备：'+vm.iotdevice.devname,'操作成功');
                    $location.path('/app/iotdevice');
                }else if (response.status === 40004) {
                    logger.error('添加失败' + '"' + vm.iotdevice.devname + '"' + '失败!', '该设备已经存在！');
                }else if(response.status === 10002 ){
                    logger.error('添加失败' + '"' + vm.iotdevice.devname + '"' + '失败!', '缺少必填字段！');
                }else {
                    logger.error('添加失败');
                }
            });
        }
        function backToPrevious() {
            $location.path('/app/iotdevice');
        }
    }
})();
(function () {
    angular.module('app.iotdevice')
        .controller('iotdeviceController', iotdeviceController);
    iotdeviceController.$inject = ['$location', 'iotdeviceService', 'DTColumnDefBuilder', 'datatablesOptions', 'iotdeviceFactory', '$uibModal','$document','URL_SEED','ManageParkingService','logger'];
    'use strict';
    function iotdeviceController($location, iotdeviceService, DTColumnDefBuilder, datatablesOptions, iotdeviceFactory, $uibModal,$document,URL_SEED,ManageParkingService,logger) {
        var vm = this;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            next_start_index:0,
            previous_start_index:0,
            maxid: 0,
            minid: 0
        };
        vm.number={
            start:0,
            next:0
        };
        vm.parkingAsync = [];
        var allParkLots = [];
        var start_index = 0;
        function queryBaiDuMapParking() {
            ManageParkingService.queryBaiDuMapParking(start_index).then(function (response) {
                if(response.parking_lots.length !== 0) {
                    start_index =  response.parking_lots[response.parking_lots.length - 1].id;
                    angular.forEach(response.parking_lots, function (value) {
                        vm.parkingAsync.push(value);
                        allParkLots.push(value.id);
                    });
                    queryBaiDuMapParking();
                }
            });
        }

        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.seletPark.id = vm.eventResult.model.id;
        };
        vm.seletPark = {
            id: undefined
        };
        vm.queryBaiDuMapParking = queryBaiDuMapParking;
        vm.queryIotdevice = queryIotdevice;
        vm.addIotdevice = addIotdevice;
        vm.deleteIotdevice = deleteIotdevice;
        vm.modifyIotdevice = modifyIotdevice;
        vm.queryIotdeviceIdentifier = queryIotdeviceIdentifier;
        vm.queryIotdevice(0);
        vm.queryBaiDuMapParking();
        vm.dtOptions = datatablesOptions.getDatatableOption();
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8),
            DTColumnDefBuilder.newColumnDef(9),
            DTColumnDefBuilder.newColumnDef(10),
            DTColumnDefBuilder.newColumnDef(11),
            DTColumnDefBuilder.newColumnDef(12),
            DTColumnDefBuilder.newColumnDef(13),
            DTColumnDefBuilder.newColumnDef(14).notSortable()
        ];
        function addIotdevice() {
            $location.path('/app/addIotdevice');
        }
        function deleteIotdevice(iotdevice) {
            iotdeviceFactory.setIotdevice(iotdevice);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: 'deleteIotdevice.html',
                size: 'sm',
                controller: 'deleteIotdeviceController',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                vm.queryIotdevice(0);
            });
        }
        function queryIotdeviceIdentifier(iotdevice) {
            iotdeviceFactory.setIotdevice(iotdevice);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: 'iotdevice-detail.html',
                size: 'lg',
                controller: 'iotdeviceDetailController',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                vm.queryIotdevice(0);
            });
        }
        function modifyIotdevice(iotdevice) {
            iotdeviceFactory.setIotdevice(iotdevice);
            $location.path('/app/modifyIotdevice');
        }
        function queryIotdevice(start_index){
            if(start_index == 0){
                iotdeviceService.readRecords(0,'',vm.seletPark.id,vm.devtype,vm.devname,vm.devfirm).then(function (response) {
                    vm.iotdevice = response.records;
                    angular.forEach(response.records, function (value,index) {
                        vm.iotdevice[index].number =index+1;
                    });
                    vm.number.start = vm.iotdevice[0];
                    vm.number.next = vm.iotdevice[vm.iotdevice.length - 1].number;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.maxid = response.maxid;
                    if (response.records.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else{
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                });
            }else if(start_index == 1){//上一页
                if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                    logger.warning('已经到首页！','','没有上一页');
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }else{
                    iotdeviceService.readRecords(vm.pagination.previous_start_index,0,vm.seletPark.id,vm.devtype,vm.devname,vm.devfirm).then(function (response) {
                        vm.iotdevice = response.records;
                        angular.forEach(response.records, function (value,index) {
                            vm.iotdevice[index].number = vm.number.start+index-response.records.length+1;
                        });
                        vm.number.start = vm.iotdevice[0];
                        vm.number.next = vm.iotdevice[vm.iotdevice.length - 1].number;
                        vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                        vm.pagination.previous_start_index = response.records[0].id;
                        vm.pagination.maxid = response.maxid;
                        if (response.records.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        }
                    });
                }
            }else if(start_index == 2){//下一页
                if (vm.pagination.next_start_index <= vm.pagination.minid) {
                    logger.warning('已经到最后一页！','','没有下一页');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                }else{
                    iotdeviceService.readRecords(vm.pagination.next_start_index,1,vm.seletPark.id,vm.devtype,vm.devname,vm.devfirm).then(function (response) {
                        vm.iotdevice = response.records;
                        angular.forEach(response.records, function (value,index) {
                            vm.iotdevice[index].number = vm.number.number+index;
                        });
                        vm.number.start = vm.iotdevice[0];
                        vm.number.next = vm.iotdevice[vm.iotdevice.length - 1].number;
                        vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                        vm.pagination.previous_start_index = response.records[0].id;
                        vm.pagination.minid = response.minid;
                        if (response.records.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        }
                    });
                }
            }else if(start_index == 3){//加载最后一页
                iotdeviceService.readRecords(-1,'',vm.seletPark.id,vm.devtype,vm.devname,vm.devfirm).then(function (response) {
                    vm.iotdevice = response.records;
                    angular.forEach(response.records, function (value,index) {
                        vm.iotdevice[index].number = response.records[0].id+index;
                    });
                    vm.number.start = vm.iotdevice[0];
                    vm.number.next = vm.iotdevice[vm.iotdevice.length - 1].number;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.minid = response.minid;
                    if (response.records.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else{
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    }
                });
            }
        }
        vm.clearAndRefresh = function () {
            vm.parkingAsync.selected = null;vm.devtype =null;vm.devname = null; vm.devfirm = null;
            vm.seletPark.id = null;
            vm.queryIotdevice(0);
        };
    }
})();
(function(){
    angular.module('app.iotdevice')
        .controller('deleteIotdeviceController',deleteIotdeviceController);
    deleteIotdeviceController.$inject = ['$uibModalInstance','iotdeviceService','iotdeviceFactory','logger'];
    'use strict';
    function deleteIotdeviceController($uibModalInstance,iotdeviceService,iotdeviceFactory,logger) {
        var vm = this;
        vm.deleteIotdevice = deleteIotdevice;
        vm.cancel = cancel;
        function deleteIotdevice() {
            iotdeviceService.deleteIotdevice(iotdeviceFactory.getIotdevice().id).then(function (response) {
                if(response.status === 0){
                    $uibModalInstance.close('closed');
                    logger.success('成功刪除',response.data,'操作成功！');
                }else {
                    logger.error('删除失败失败!',response.data,'操作失败！');
                }
            });
        }

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
(function(){
    "use strict";
    angular.module('app.iotdevice')
        .controller('iotdeviceDetailController',iotdeviceDetailController);
    iotdeviceDetailController.$inject = ['iotdeviceService','$uibModalInstance','iotdeviceFactory','logger'];
    'use strict';
    function iotdeviceDetailController(iotdeviceService,$uibModalInstance,iotdeviceFactory,logger) {
        var vm = this;
        vm.queryIdentifier = queryIdentifier;
        vm.cancel = cancel;
        vm.iotdevice_id = iotdeviceFactory.getIotdevice().id;
        vm.queryIdentifier();
        function queryIdentifier() {
            iotdeviceService.queryIotdeviceDetail(vm.iotdevice_id).then(function (response) {
                if(response.status === 0){
                    vm.devidentifier = response.devidentifier;
                    vm.name = response.name;
                    vm.private_key = response.private_key;
                }else {
                    logger.warning('从服务器获取数据失败','','操作失败！');
                }
            });
        }
        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
(function () {
    angular.module('app.iotdevice')
        .factory('iotdeviceFactory', iotdeviceFactory);
    'use strict';
    function iotdeviceFactory() {
        var iotdevice = {
            id:'',//id
            devidentifier:'',//设备唯一标示
            devtype: '',//设备类型（如果是数据网关，类型为 1 ）
            parklot:'',//停车场id
            ipaddr:'',//设备网络ip
            devname:'',//设备名
            memo:'',//备忘录
            brand:'',//设备品牌
            devfirm:'',//设备厂商
            created_time:'',//录入时间
            updated_time:'',//修改时间
            firmcontact:'',//设备厂商联系人
            firmphone:'',//设备厂商电话
            parklot_name:''//停车场名称
        };
        return {
            setIotdevice: setIotdevice,
            getIotdevice: getIotdevice
        };
        function setIotdevice(cIotdevice) {
            iotdevice.id = cIotdevice.id;
            iotdevice.devidentifier = cIotdevice.devidentifier;
            iotdevice.devtype = cIotdevice.devtype;
            iotdevice.parklot = cIotdevice.parklot;
            iotdevice.ipaddr = cIotdevice.ipaddr;
            iotdevice.devname = cIotdevice.devname;
            iotdevice.memo = cIotdevice.memo;
            iotdevice.brand = cIotdevice.brand;
            iotdevice.devfirm = cIotdevice.devfirm;
            iotdevice.created_time = cIotdevice.created_time;
            iotdevice.updated_time = cIotdevice.updated_time;
            iotdevice.firmcontact = cIotdevice.firmcontact;
            iotdevice.firmphone = cIotdevice.firmphone;
            iotdevice.parklot_name = cIotdevice.parklot_name;
        }
        function getIotdevice() {
            return iotdevice;
        }
    }
})();
(function () {
    "use strict";
    angular.module('app.iotdevice')
        .controller('modifyIotedviceController', modifyIotedviceController);
    modifyIotedviceController.$inject = ['$scope', '$timeout', '$location', 'iotdeviceFactory', 'ManageParkingService','logger','iotdeviceService'];
    function modifyIotedviceController($scope, $timeout, $location, iotdeviceFactory, ManageParkingService,logger,iotdeviceService) {
        var vm = this;
        vm.parkingAsync = [];
        var allParkLots = [];
        var start_index = 0;
        function queryBaiDuMapParking() {
            ManageParkingService.queryBaiDuMapParking(start_index).then(function (response) {
                if(response.parking_lots.length !== 0) {
                    start_index =  response.parking_lots[response.parking_lots.length - 1].id;
                    angular.forEach(response.parking_lots, function (value) {
                        vm.parkingAsync.push(value);
                        allParkLots.push(value.id);
                    });
                    queryBaiDuMapParking();
                }
            });
        }

        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.seletPark.id = vm.eventResult.model.id;
        };
        vm.seletPark = {
            id: undefined
        };
        vm.queryBaiDuMapParking = queryBaiDuMapParking;
        vm.queryBaiDuMapParking();
        vm.getIotdevice =  getIotdevice;
        vm.getIotdevice();
        function getIotdevice() {
            $timeout(function () {
                vm.iotdevice = iotdeviceFactory.getIotdevice();
                vm.parkingAsync.selected = vm.iotdevice.parklot_name;
                vm.parklot = vm.iotdevice.parklot;
            }, 500);
        };
        vm.modifyIotdevice = function () {
            vm.parklot = vm.seletPark.id;
            iotdeviceService.modifyIotdevice(vm.iotdevice.id,vm.iotdevice.devtype,vm.parklot,vm.iotdevice.ipaddr,vm.iotdevice.devname,vm.iotdevice.memo,vm.iotdevice.brand,vm.iotdevice.devfirm,vm.iotdevice.firmcontact,vm.iotdevice.firmphone).then(function (response) {
                if (response.status === 0) {
                    logger.success('修改成功'+'设备：'+vm.iotdevice.devname,'操作成功');
                    $location.path('/app/iotdevice');
                }else if (response.status === 40004) {
                    logger.error('修改失败' + '"' + vm.iotdevice.devname + '"' + '失败!', '该设备已经存在！');
                }else if(response.status === 10002 ){
                    logger.error('修改失败' + '"' + vm.iotdevice.devname + '"' + '失败!', '缺少必填字段！');
                }else {
                    logger.error('修改失败');
                }
            });
        };
        // 返回上一层
        vm.backToPrevious = function () {
            $location.path('/app/iotdevice');
        };
    }
})();
(function () {
    angular.module('app.iotdevice')
        .factory('iotdeviceService', iotdeviceService);
    iotdeviceService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function iotdeviceService($http, URL_SEED) {
        var service = {};
        var IOTDEVICE = URL_SEED.API_URL + 'device/iotdevice/';
        service.addIotdevice = function (devtype,parklot,ipaddr,devname,memo,brand,devfirm,firmcontact,firmphone) {
            var iotdevice = angular.toJson({
                devtype:devtype,
                parklot:parklot,
                ipaddr:ipaddr,
                devname:devname,
                memo:memo,
                brand:brand,
                devfirm:devfirm,
                firmcontact:firmcontact,
                firmphone:firmphone
            });
            return $http({
                method: 'POST',
                url: IOTDEVICE,
                headers: {
                    'Content-type': 'application/json'
                },
                data: iotdevice,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        service.modifyIotdevice = function (iotdevice_id,devtype,parklot,ipaddr,devname,memo,brand,devfirm,firmcontact,firmphone) {
            var iotdevice = angular.toJson({
                iotdevice_id:iotdevice_id,
                devtype:devtype,
                parklot:parklot,
                ipaddr:ipaddr,
                devname:devname,
                memo:memo,
                brand:brand,
                devfirm:devfirm,
                firmcontact:firmcontact,
                firmphone:firmphone
            });
            return $http({
                method: 'PUT',
                url: IOTDEVICE,
                headers: {
                    'Content-type': 'application/json'
                },
                data: iotdevice,
                withCredentials: true

            }).then(function (response) {
                return response.data;
            });
        };
        service.deleteIotdevice = function (id) {
            var iotdevice = angular.toJson({iotdevice_id: id});
            return $http({
                method: 'DELETE',
                url: IOTDEVICE,
                headers: {
                    'Content-type': 'application/json'
                },
                data: iotdevice,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        service.readRecords =function(start_index,pagedirect,parklot,devtype,devname,devfirm) {
            return $http({
                method: 'GET',
                url: IOTDEVICE,
                params: {
                    max_results: 50,
                    start_index: start_index,
                    pagedirect: pagedirect,
                    parklot:parklot,
                    devtype:devtype,
                    devname:devname,
                    devfirm:devfirm
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        service.queryIotdeviceDetail =function(id) {
            return $http({
                method: 'GET',
                url: IOTDEVICE,
                params: {
                    querytype:'one',
                    iotdevice_id:id
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        return service;
    }
})();

(function () {

    angular
        .module('app.lazyload')
        .config(lazyloadConfig);

    lazyloadConfig.$inject = ['$ocLazyLoadProvider', 'APP_REQUIRES'];
    'use strict';
    function lazyloadConfig($ocLazyLoadProvider, APP_REQUIRES) {

        // Lazy Load modules configuration
        $ocLazyLoadProvider.config({
            debug: false,
            events: true,
            modules: APP_REQUIRES.modules
        });

    }
})();
(function () {
    'use strict';

    angular
        .module('app.lazyload')
        .constant('APP_REQUIRES', {
            // jQuery based and standalone scripts
            scripts: {
                'modernizr': ['vendor/modernizr/modernizr.custom.js'],
                'icons': ['vendor/fontawesome/css/font-awesome.min.css',
                    'vendor/simple-line-icons/css/simple-line-icons.css'],
                'weather-icons': ['vendor/weather-icons/css/weather-icons.min.css',
                    'vendor/weather-icons/css/weather-icons-wind.min.css'],
                'datatables.buttons': ['vendor/datatables-buttons/js/buttons.colVis.js',
                    'vendor/datatables-buttons/js/buttons.flash.js',
                    'vendor/datatables-buttons/js/buttons.html5.js',
                    'vendor/datatables-buttons/js/buttons.print.js'],
                'moment': ['vendor/moment/min/moment-with-locales.min.js', 'vendor/moment/min/zh-cn.js'],
                'filestyle': ['vendor/bootstrap-filestyle/src/bootstrap-filestyle.min.js'],
                'highcharts':['vendor/highcharts/data.js','vendor/highcharts/highcharts-3d.js','vendor/highcharts/drilldown.js','vendor/highcharts/highcharts-zh_CN.js'],
                'analysis-highcharts':['vendor/highcharts/data.js','vendor/highcharts/highcharts-3d.js','vendor/highcharts/exporting.js','vendor/highcharts/drilldown.js','vendor/highcharts/highcharts-zh_CN.js'],
                'export': ['vendor/export/xlsx.core.min.js']
            },
            // Angular based script (use the right module name)
            modules: [
                // {
                //     name: 'toaster',
                //     files: ['vendor/angular-toastr/dist/angular-toastr.min.js', 'vendor/angular-toastr/dist/angular-toastr.min.css', 'vendor/angular-toastr/dist/angular-toastr.tpls.js']
                // },
                {
                    name: 'ui.select',
                    files: ['vendor/angular-ui-select/dist/select.min.js', 'vendor/angular-ui-select/dist/select.min.css']
                },
                {
                    name: 'datatables', files: [
                    'vendor/datatables/media/css/jquery.dataTables.min.css',
                    'vendor/datatables/media/css/dataTables.material.min.css'
                ], serie: true
                },
                {
                    name: 'datatables.editor', files: ['vendor/datatables/media/css/editor.dataTables.min.css',
                    'vendor/datatables/media/js/dataTables.editor.min.js']
                },
                {
                    name: 'datatables.bootstrap', files: [
                    'vendor/angular-datatables/dist/plugins/bootstrap/datatables.bootstrap.min.css',
                    'vendor/datatables-buttons/js/dataTables.buttons.js',
                    'vendor/datatables-colvis/js/dataTables.colVis.js',
                    'vendor/datatables-buttons/css/buttons.dataTables.css',
                    'vendor/datatables-colvis/css/dataTables.colVis.css',
                    'vendor/angular-datatables/dist/plugins/select/angular-datatables.select.js',
                    'vendor/FixedColumns/js/dataTables.fixedColumns.js',
                    'vendor/FixedHeader/js/dataTables.fixedHeader.js']
                },
                {name: 'lodash', files: ['vendor/lodash/dist/lodash.min.js']},
                {
                    name: 'localytics.directives', files: ['vendor/chosen_v1.2.0/chosen.jquery.min.js',
                    'vendor/chosen_v1.2.0/chosen.min.css',
                    'vendor/angular-chosen-localytics/chosen.js']
                },
                {
                    name: 'ui.grid',
                    files: ['vendor/angular-ui-grid/ui-grid.min.css', 'vendor/angular-ui-grid/ui-grid.min.js',
                        'vendor/angular-ui-grid/csv.js']
                }
                // {
                //     name: 'textAngular', files: ['vendor/textAngular/dist/textAngular.css',
                //     'vendor/textAngular/dist/textAngular-rangy.min.js',
                //     'vendor/textAngular/dist/textAngular-sanitize.js',
                //     'vendor/textAngular/src/globals.js',
                //     'vendor/textAngular/src/factories.js',
                //     'vendor/textAngular/src/DOM.js',
                //     'vendor/textAngular/src/validators.js',
                //     'vendor/textAngular/src/taBind.js',
                //     'vendor/textAngular/src/main.js',
                //     'vendor/textAngular/dist/textAngularSetup.js'
                // ], serie: true
                // }
            ]
        })
    ;

})();

(function () {
    'use strict';

    angular
        .module('app.loadingbar')
        .config(loadingbarConfig)
    ;
    loadingbarConfig.$inject = ['cfpLoadingBarProvider'];
    function loadingbarConfig(cfpLoadingBarProvider) {
        cfpLoadingBarProvider.includeBar = true;
        cfpLoadingBarProvider.includeSpinner = false;
        cfpLoadingBarProvider.latencyThreshold = 500;
        cfpLoadingBarProvider.parentSelector = '.wrapper > section';
    }
})();
(function () {
    'use strict';

    angular
        .module('app.loadingbar')
        .run(loadingbarRun)
    ;
    loadingbarRun.$inject = ['$rootScope', '$timeout', 'cfpLoadingBar'];
    function loadingbarRun($rootScope, $timeout, cfpLoadingBar) {

        // Loading bar transition
        // -----------------------------------
        var thBar;
        $rootScope.$on('$stateChangeStart', function () {
            if (angular.element('.wrapper > section').length) // check if bar container exists
                thBar = $timeout(function () {
                    cfpLoadingBar.start();
                }, 0); // sets a latency Threshold
        });
        $rootScope.$on('$stateChangeSuccess', function (event) {
            event.targetScope.$watch('$viewContentLoaded', function () {
                $timeout.cancel(thBar);
                cfpLoadingBar.complete();
            });
        });

    }

})();
/**
 * Created by huangxiang  on 2016/12/20 0020.
 * @author: huangxiang
 * Module: logger.js
 * feature: $log $toastr 封装
 */
(function () {
    angular.module('app.logger')
        .factory('logger', logger);

    logger.$inject = ['$log', 'toastr'];

    'use strict';
    /**
     * @jsdoc function 自定义封装$log和toastr.
     * @param $log
     * @param toastr
     * @returns {{showToasts: boolean, error: error, info: info, success: success, warning: warning, log: $log.log}}
     */
    function logger($log, toastr) {
        return {
            showToasts: true,

            error: error,
            info: info,
            success: success,
            warning: warning,
            log: $log.log
        };

        /**
         * @jsdoc function $log.error $toastr.error
         * @param message
         * @param data
         * @param title
         */
        function error(message, data, title) {
            toastr.error(message, title);
            $log.error('Error:' + message, data);
        }

        /**
         * @jsdoc function $log.info $toastr.info
         * @param message 提示信息
         * @param data server返回的响应详情
         * @param title 标题
         */
        function info(message, data, title) {
            toastr.info(message, title);
            $log.info('Info:' + message, data);
        }

        /**
         * @jsdoc function $log.error $toastr.error
         * @param message 提示信息
         * @param data server返回的响应详情
         * @param title 标题
         */
        function success(message, data, title) {
            toastr.success(message, title);
            $log.info('Success:' + message, data);
        }

        /**
         * @jsdoc function $log.warning  $toastr.warning
         * @param message 提示信息
         * @param data server返回的响应详情
         * @param title 标题
         */
        function warning(message, data, title) {
            toastr.warning(message, title);
            $log.warning('Warning:' + message, data);
        }
    }
})();

/**
 * Created by huangxiang on 2016/11/21 0021.
 */
(function () {
    angular.module('app.login')
        .controller('LoginController', LoginController);
    LoginController.$inject = ['$rootScope', '$location', 'AuthorizationFactory', '$cookies','LogoutFactory'];
    'use strict';
    /**
     *
     * @param $rootScope
     * @param $location
     * @param AuthorizationFactory
     * @param $cookies
     * @param LogoutFactory
 * @constructor
     */
    function LoginController($rootScope, $location, AuthorizationFactory, $cookies,LogoutFactory) {
        var vm = this;
        vm.login = login;
        // 重置登录状态,清除csrftoken
        AuthorizationFactory.ClearCredentials();
        LogoutFactory.logout(function (response) {
            if(response.data.status === 0){
                console.log('重定向到登录界面之后清除csrftoken');
            }else {
                console.log('清除csrftoken失败');
            }
        });
        // 登录服务器
        function login() {
            AuthorizationFactory.login(vm.username, vm.password, function (response) {
                vm.dataLoading = true;
                if (response.status === 0) {
                    AuthorizationFactory.SetCredentials(vm.username, vm.password);
                    $rootScope.user.name = response.user;
                    $cookies.put('userName', response.user);
                    $cookies.put('nick_name', response.data.user_data.nick_name);
                    $cookies.put('organization_name', response.data.user_data.organization_name);
                    $cookies.put('userPermission', response.groupnames[1]);
                    $cookies.put('organization_id', response.data.user_data.organization_id);
                    $location.path('/app/console');
                } else {
                    vm.error = response.message;
                    vm.dataLoading = false;
                }
            });
        }
    }
})();
/**
 * Created by huangxiang on 2016/11/21 0021.
 */
(function () {
    angular.module('app.login')
        .factory('AuthorizationFactory', AuthorizationFactory);

    AuthorizationFactory.$inject = ['Base64', '$http', '$cookieStore', '$rootScope', 'URL_SEED', 'md5','logger'];

    'use strict';
    /**
     * @jsdoc function
     * @param Base64
     * @param $http
     * @param $cookieStore
     * @param $rootScope
     * @param URL_SEED
     * @param md5
     * @param logger
 * @returns {{login: login, SetCredentials: SetCredentials, ClearCredentials: ClearCredentials}}
     * @constructor
     */
    function AuthorizationFactory(Base64, $http, $cookieStore, $rootScope, URL_SEED, md5,logger) {
        var LOGIN_URL = URL_SEED.API_URL + 'account/login/';
        return {
            login: login,
            SetCredentials: SetCredentials,
            ClearCredentials: ClearCredentials
        };
        /**v
         * 用户登录
         * @param username 用户名
         * @param password 密码
         * @param callback 结果回调
         */
        function login(username, password, callback) {
            // // 使用用户名进行MD5，32位，作为key
            var key_str = md5.createHash(username);
            // // 将key转换成128 bit
            var key = CryptoJS.enc.Utf8.parse(key_str);
            //
            // // 对password进行AES加密
            var AESPass = CryptoJS.AES.encrypt(password, key, {
                mode: CryptoJS.mode.ECB,
                padding: CryptoJS.pad.Pkcs7
            });
            //
            // // CryptoJS 的 encrypt函数不会直接返回字符串，需要toString或者Crypto-JS进行转码才能得到真实的结果。
            var pass = AESPass.toString();

            var authData = Base64.encode(username + ':' + pass).replace(/[\r\n]/g, '');
            // console.log(authData);
            $http({
                method: 'GET',
                url: LOGIN_URL,
                headers: {
                    'Authorization': 'Basic ' + authData
                }
            }).success(function (response) {
                callback(response);
            }).error(function (response) {
                logger.error('登陆失败',response.detail,'请检查账号密码是否正确输入!');
            });
        }

        /**
         * 设置cookies和全局globals
         * @param username
         * @param password
         * @constructor
         */
        function SetCredentials(username, password) {
            var authData = Base64.encode(username + ':' + password);
            $rootScope.globals = {
                currentUser: {
                    username: username,
                    authData: authData
                }
            };
            $cookieStore.put('globals', $rootScope.globals);
        }

        /**
         * 清除全局globals
         * @constructor
         */
        function ClearCredentials() {
            $rootScope.globals = {};
            $cookieStore.remove('globals');
        }
    }
})();
/**
 * Created by huangxiang  on 2016/11/22 0022.
 * @author:huangxiang
 * Module: logout.controller.js
 * feature: 用户登出
 */
(function () {
    angular.module('app.logout')
        .controller('LogoutController', LogoutController);

    LogoutController.$inject = ['$location', 'LogoutFactory', '$cookies', '$cookieStore', 'AuthorizationFactory'];

    'use strict';
    /**
     *
     * @param $location
     * @param LogoutFactory
     * @param $cookies
     * @param $cookieStore
     * @param AuthorizationFactory
     * @returns {{logout: logout}}
     * @constructor
     */
    function LogoutController($location, LogoutFactory, $cookies, $cookieStore, AuthorizationFactory) {

        return {
            logout: logout
        };

        /**
         * 退出登录
         */
        function logout() {
            LogoutFactory.logout(function (response) {
                if (response.data.status == 0) {
                    $cookies.remove('globals');
                    $cookies.remove('userName');
                    $cookies.remove('userPermission');
                    $cookies.remove('nick_name');
                    $cookies.remove('organization_name');
                    AuthorizationFactory.ClearCredentials();
                    $location.path('page/login');
                } else {
                    alert('退出失败!请检查服务器问题。');
                }
            });
        }
    }
})();
/**
 * Created by huangxiang  on 2016/11/22 0022.
 * @author: huangxiang
 * Module: logout.service.js
 * feature: 请求服务器
 */
(function () {
    angular.module('app.logout')
        .factory('LogoutFactory', LogoutFactory);

    LogoutFactory.$inject = ['$http', 'URL_SEED'];

    'use strict';
    /**
     *
     * @param $http
     * @param URL_SEED
     * @returns {{logout: logout}}
     * @constructor
     */
    function LogoutFactory($http, URL_SEED) {
        var LOGOUT_URL = URL_SEED.API_URL + 'account/logout/'; // URL
        return {
            logout: logout
        };

        /**
         * 退出登录
         * @param callback
         */
        function logout(callback) {
            $http({
                method: 'POST',
                url: LOGOUT_URL,
                withCredentials: true
            }).then(function (response) {
                callback(response);
            });
        }
    }
})();
/**
 * Created by yumaotao  on 2017/11/27 0014.
 * @author: yumaotao
 * Module: muser.comment.controller.js
 * feature: 用户反馈建议初始化及设置
 */
(function () {
    'use strict';
    angular.module('app.mobile-user')
        .controller('UserAdviceController',UserAdviceController);
    UserAdviceController.$inject = ['commentUser', 'datatablesOptions', 'logger', '$document', 'DTColumnDefBuilder','$uibModal','$location','userCommentFactory'];
    function UserAdviceController(commentUser, datatablesOptions, logger, $document, DTColumnDefBuilder,$uibModal,$location,userCommentFactory) {
        var vm = this;
        vm.dtOptions = datatablesOptions.getDatatableOption(); // 获取datatables表格设置
        vm.dtOptions.withOption('paging', false);
        vm.dtOptions.withOption('deferRender', false);
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        /*时间日历设置------------------------------------------------*/
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4).notSortable()
        ];
        vm.totalServerItems = 0;
        // 表格分页设置
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            maxid: 0,
            minid: 0,
            pageSize: 10,
            pageNumber: 0,
            next_start_index: 0,
            previous_start_index: 0,
            totalItems: null
        };
        vm.valid_begintime='';
        vm.valid_endtime='';
        vm.coupon ={
            valid_begintime:'',
            valid_endtime:''
        };
        vm.phone_number = '',
        vm.loadFistPage = loadFistPage;  // 加载首页function
        vm.loadPreviousPage = loadPreviousPage; // 加载上一页function
        vm.loadNextPage = loadNextPage; // 加载下一页function
        vm.loadLastPage = loadLastPage; // 加载尾页 function
        vm.loadFistPage(); // 初始化表格数据，默认加载首页
        vm.replayUser = replayUser;//回复投诉建议
        /**
         * 加载上一页
         */
        function loadPreviousPage() {
            if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                alert('已经到第一页！');
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
            } else {
                commentUser.queryComentUser(vm.pagination.previous_start_index, vm.pagination.pageSize, vm.pagination.pagetype.pervious_page).then(function (response) {
                    vm.advice = response.records;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].comid;
                    vm.pagination.previous_start_index = response.records[0].comid;
                    vm.pagination.maxid = response.maxid;
                    if (vm.advice.length < 10) {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }

        }
        /**
         * 加载下一页
         */
        function loadNextPage() {
            if (vm.pagination.next_start_index <= vm.pagination.minid || vm.advice.length < 10) {
                alert('已经到最后一页！');
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
            } else {
                commentUser.queryComentUser(vm.pagination.next_start_index, vm.pagination.pageSize, vm.pagination.pagetype.next_page).then(function (response) {
                    vm.advice = response.records;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].comid;
                    vm.pagination.previous_start_index = response.records[0].comid;
                    vm.pagination.minid = response.minid;
                    if (vm.advice.length < 10) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });

            }
        }
        /**
         * 加载首页
         */
        function loadFistPage() {
            vm.pagination.next_start_index = 0;
            vm.pagination.maxid = 0;
            vm.pagination.minid = 0;
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            commentUser.queryHome(vm.phone_number,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                if (response.status === 0 && response.records.length !== 0) {
                    vm.advice = response.records;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].comid;
                    vm.pagination.previous_start_index = response.records[0].comid;
                    vm.pagination.maxid = response.maxid;
                    vm.pagination.pageNumber = 1;
                    // 如果记录少于20条，则灰掉所有翻页按钮
                    if (vm.advice.length < 10) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        // 否则只灰掉上一页按钮，首页留作刷新用
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === 10003) {
                    alert('查找停车记录错误！！！请检查服务器数据库！');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                } else {
                    alert('暂时没有app用户记录！！');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }

            });
        }
        /**
         * 加载尾页
         */
        function loadLastPage() {
            commentUser.queryLast().then(function (response) {
                vm.advice = response.records;
                vm.pagination.minid = response.minid;
                vm.pagination.next_start_index = response.records[response.records.length - 1].comid;
                vm.pagination.previous_start_index = response.records[0].comid;
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
            });
        }
        //回复投诉建议
        function replayUser(userComment){
            userCommentFactory.setUserComment(userComment);
            $location.path('/app/replay-comment');
        }
        vm.clearAndRefresh = clearAndRefresh;
        function clearAndRefresh() {
            vm.phone_number = '';
            vm.coupon ={
                valid_begintime:'',
                valid_endtime:''
            };
            vm.loadFistPage();
        }
    }
})();

/**
 * basic.police.factory.js
 * @author: yumaotao
 * @create 2017/12/2
 */
(function () {
    angular.module('app.mobile-user')
        .factory('userCommentFactory', userCommentFactory);
    'use strict';
    function userCommentFactory(){
        var userComment = {
            id:'',//序号Id
            comments:'',//投诉内容
            created_time:'',//创建时间
            handle:false,//是否回复
            handler:'',//回复人
            user:'',//投诉人
        };
        return {
            setUserComment: setUserComment,
            getUserComment: getUserComment
        };
        function setUserComment(cUserComment) {
            userComment.id = cUserComment.id;
            userComment.comments = cUserComment.comments;
            userComment.created_time = cUserComment.created_time;
            userComment.handle = cUserComment.handle;
            userComment.handler = cUserComment.handler;
            userComment.user = cUserComment.user;
        }
        function getUserComment() {
            return userComment;
        }
    }
})();
/**
 * Created by huangxiang  on 2016/12/1 0001.
 * @author: huangxiang
 * Module: muser.service.js
 * feature: 查询手机APP端注册用户信息
 */
(function () {
    angular.module('app.mobile-user')
        .factory('commentUser', commentUser);
    commentUser.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function commentUser($http, URL_SEED) {
        var APP_USER_COMMENT = URL_SEED.API_URL + 'user/comment/'; // 用户反馈建议API, allow: GET/POST
        return {
            queryHome: queryHome,
            queryComentUser: queryComentUser,
            queryLast: queryLast,
            ReplyUserComment: ReplyUserComment,
            queryUserComment:queryUserComment
        };
        function queryHome(a,b,c) {
            return $http({
                method: 'GET',
                url: APP_USER_COMMENT,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    max_results: 50,
                    start_index: 0,
                    startime:b,
                    endtime:c,
                    phone_number:a
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function queryComentUser(start_index, max_result, pagedirect) {
            return $http({
                method: 'GET',
                url: APP_USER_COMMENT,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    start_index: start_index,
                    max_results: max_result,
                    pagedirect: pagedirect
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function queryLast() {
            return $http({
                method: 'GET',
                url: APP_USER_COMMENT,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    max_results: 50,
                    start_index: -1
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

        /**
         * 回复APP用户建议反馈
         * @returns {*}
         * @constructor
         */
        function ReplyUserComment(answersid,comments) {
            var userReply = angular.toJson({
                answersid: answersid,
                comments: comments,
            });
            return $http({
                method: 'POST',
                url: APP_USER_COMMENT,
                headers: {
                    'Content-type': 'application/json'
                },
                data: userReply,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function queryUserComment(id){
            return $http({
                method: 'GET',
                url: APP_USER_COMMENT,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    objid: id,
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
    }
})();
(function () {
    angular.module('app.mobile-user')
        .controller('MobileUserController', MobileUserController);
    MobileUserController.$inject = ['Mobile_User', 'logger', '$document', 'datatablesOptions','DTColumnDefBuilder','$location','userPayFactory'];
    'use strict';
    function MobileUserController(Mobile_User, logger, $document, datatablesOptions,DTColumnDefBuilder,$location,userPayFactory) {
        var vm = this;
        vm.vehicles= '';
        vm.dtOptions = datatablesOptions.getDatatableOption();
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4)
        ];
        vm.totalServerItems = 0;
        // 表格分页设置
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            maxid: 0,
            minid: 0,
            pageSize: 50,
            pageNumber: 0,
            next_start_index: 0,
            previous_start_index: 0,
            totalItems: null
        };
        vm.loadFistPage = loadFistPage;  // 加载首页function
        vm.loadPreviousPage = loadPreviousPage; // 加载上一页function
        vm.loadNextPage = loadNextPage; // 加载下一页function
        vm.loadLastPage = loadLastPage; // 加载尾页 function
        vm.loadFistPage(); // 初始化表格数据，默认加载首页
        function loadPreviousPage() {
            if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                alert('已经到第一页！');
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
            } else {
                Mobile_User.queryMobileUser(vm.pagination.previous_start_index, vm.pagination.pageSize, vm.pagination.pagetype.pervious_page).then(function (response) {
                    vm.mobileUserDate = response.records;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.maxid = response.maxid;
                    if (vm.mobileUserDate.length < 50) {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }

        }
        function loadNextPage() {
            if (vm.pagination.next_start_index <= vm.pagination.minid || vm.mobileUserDate.length < 50) {
                alert('已经到最后一页！');
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
            } else {
                Mobile_User.queryMobileUser(vm.pagination.next_start_index, vm.pagination.pageSize, vm.pagination.pagetype.next_page).then(function (response) {
                    vm.mobileUserDate = response.records;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.minid = response.minid;
                    if (vm.mobileUserDate.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });

            }
        }

        function loadFistPage() {
            vm.pagination.next_start_index = 0;
            vm.pagination.maxid = 0;
            vm.pagination.minid = 0;
            Mobile_User.queryHome(vm.phone_number,vm.vehicles).then(function (response) {
                if (response.status === 0 && response.records.length !== 0) {
                    vm.mobileUserDate = response.records;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.maxid = response.maxid;
                    vm.pagination.pageNumber = 1;
                    // 如果记录少于20条，则灰掉所有翻页按钮
                    if (vm.mobileUserDate.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        // 否则只灰掉上一页按钮，首页留作刷新用
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === 10003) {
                    alert('查找停车记录错误！！！请检查服务器数据库！');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                } else {
                    alert('暂时没有app用户记录！！');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }

            });
        }
        function loadLastPage() {
            Mobile_User.queryLast().then(function (response) {
                vm.mobileUserDate = response.records;
                vm.pagination.minid = response.minid;
                vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                vm.pagination.previous_start_index = response.records[0].id;
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
            });
        }
        vm.clearAndRefresh = clearAndRefresh;
        function clearAndRefresh() {
            vm.phone_number = '';
            vm.vehicles = '';
            vm.loadFistPage();
        }
        vm.detailDate = detailDate;
        function detailDate(mobileUserDate) {
            userPayFactory.setUserPay(mobileUserDate);
            $location.path('/app/user-pay');
        }
    }
})();
/**
 * Created by huangxiang  on 2016/12/1 0001.
 * @author: huangxiang
 * Module: muser.service.js
 * feature: 查询手机APP端注册用户信息
 */
(function () {
    angular.module('app.mobile-user')
        .factory('Mobile_User', Mobile_User);

    Mobile_User.$inject = ['$http', 'URL_SEED'];

    'use strict';
    function Mobile_User($http, URL_SEED) {
        var APP_USER_URL = URL_SEED.API_URL + 'user'; // 获取APP用户列表API, allow: GET
        var APP_USER_COMMENT = URL_SEED.API_URL + 'user/comment/'; // 用户反馈建议API, allow: GET/POST
        return {
            queryHome: queryHome,
            queryMobileUser: queryMobileUser,
            queryLast: queryLast,
            queryUserComment: queryUserComment,
            ReplyUserComment: ReplyUserComment
        };
        /**
         * 查询首页
         * @returns {*}
         */
        function queryHome(a,b) {
            return $http({
                method: 'GET',
                url: APP_USER_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    max_results: 50,
                    start_index: 0,
                    phone_number:b,
                    username:a
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

        /**
         * 查询上下页
         * @param start_index 起始id
         * @param max_result 最大允许条目数
         * @param pagedirect 0 上一页  1下一页
         * @returns {*}
         */
        function queryMobileUser(start_index, max_result, pagedirect) {
            return $http({
                method: 'GET',
                url: APP_USER_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    start_index: start_index,
                    max_results: max_result,
                    pagedirect: pagedirect
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

        /**
         * 查询尾页
         * @returns {*}
         */
        function queryLast() {
            return $http({
                method: 'GET',
                url: APP_USER_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    max_results: 50,
                    start_index: -1
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

        /**
         * 查询APP用户建议反馈
         * @returns {*}
         */
        function queryUserComment() {
            return $http({
                method: 'GET',
                url: APP_USER_COMMENT,
                headers: {
                    'Content-type': 'application/json'
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

        /**
         * 回复APP用户建议反馈
         * @returns {*}
         * @constructor
         */
        function ReplyUserComment() {
            return $http({
                method: 'POST',
                url: APP_USER_COMMENT,
                headers: {
                    'Content-type': 'application/json'
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
    }
})();
/**
 * Created by yumaotao  on 2017/11/27 0014.
 * @author: yumaotao
 * Module: muser.comment.controller.js
 * feature: 用户反馈建议初始化及设置
 */
(function () {
    'use strict';
    angular.module('app.mobile-user')
        .controller('replayCommentController',replayCommentController);
    replayCommentController.$inject = ['$uibModal','$location','userCommentFactory','commentUser','logger'];
    function replayCommentController($uibModal,$location,userCommentFactory,commentUser,logger) {
        var vm = this;
        vm.comments = '';
        vm.queryUserComment = queryUserComment;
        vm.backToPrevious = backToPrevious;
        vm.replayUser = replayUser;
        vm.queryUserComment();
        function queryUserComment(){
            userCommentFactory.getUserComment();
            commentUser.queryUserComment(userCommentFactory.getUserComment().comid).then(function(response){
                if(response.status == 0){
                    logger.success('查询序号为' + '"' + userCommentFactory.getUserComment().comid+ '"!', '查询成功');
                    vm.advice= response.superior[0];
                    vm.replay = response.reply;
                }else{
                    logger.error('查询序号为' + '"' +userCommentFactory.getUserComment().comid + '"!', '查询失败');
                }
            })
        }
        function backToPrevious() {
            $location.path('/app/mobile-user-comment');
        };
        function replayUser(){
            commentUser.ReplyUserComment(userCommentFactory.getUserComment().comid,vm.comments).then(function(response){
                if(response.status == 0){
                    logger.success('回复序号为' + '"' + userCommentFactory.getUserComment().comid+ '"!', '回复成功');
                    $location.path('/app/mobile-user-comment');
                }else{
                    logger.error('回复序号为' + '"' +userCommentFactory.getUserComment().comid + '"!', '回复失败');
                }
            })
        }
    }
})();

(function () {
    angular.module('app.mobile-user')
        .controller('UserPayController', UserPayController);
    UserPayController.$inject = ['userPay', 'logger', '$document', 'datatablesOptions','DTColumnDefBuilder','userPayFactory','$location'];
    'use strict';
    function UserPayController(userPay, logger, $document, datatablesOptions,DTColumnDefBuilder,userPayFactory,$location) {
        var vm = this;
        vm.usrPayDate = userPayFactory.getUserPay();
        vm.dtOptions = datatablesOptions.getDatatableOption();
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8),
            DTColumnDefBuilder.newColumnDef(9),
            DTColumnDefBuilder.newColumnDef(10),
            DTColumnDefBuilder.newColumnDef(11),
            DTColumnDefBuilder.newColumnDef(12)
        ];
        vm.loadFistPage = loadFistPage;
        if(vm.usrPayDate){
            vm.loadFistPage();
        }
        function loadFistPage() {
            userPay.queryHome(vm.usrPayDate.phone_number).then(function (response) {
                if (response.status === 0) {
                    vm.mobileUserDate = response.records;
                    angular.forEach(response.records, function (value,index) {
                        switch (value.payment_channel) {
                            case 'wechatpay':
                                vm.mobileUserDate[index].payment_channelName = '微信';
                                break;
                            case 'alipay':
                                vm.mobileUserDate[index].payment_channelName = '支付宝';
                                break;
                            case 'unionpay':
                                vm.mobileUserDate[index].payment_channelName = '银联';
                                break;
                            case 'dadapay':
                                vm.mobileUserDate[index].payment_channelName = '账上余额';
                                break;
                        }
                    });
                }
            });
        }
        vm.clearAndRefresh = clearAndRefresh;
        function clearAndRefresh() {
            vm.phone_number = '';
            vm.vehicles = '';
            vm.loadFistPage();
        }
        vm.backToPrevious = backToPrevious;
        function backToPrevious() {
            $location.path('/app/mobile-user');
        };
    }
})();
/**
 * basic.police.factory.js
 * @author: yumaotao
 * @create 2017/12/2
 */
(function () {
    angular.module('app.mobile-user')
        .factory('userPayFactory', userPayFactory);
    'use strict';
    function userPayFactory(){
        var userPay = {
            id:'',
            phone_number:'',
            nick_name:'',
            account_balance:''
        };
        return {
            setUserPay: setUserPay,
            getUserPay: getUserPay
        };
        function setUserPay(cUserPay) {
            userPay.comid = cUserPay.comid;
            userPay.phone_number = cUserPay.phone_number;
            userPay.nick_name = cUserPay.nick_name;
            userPay.account_balance = cUserPay.account_balance;
        }
        function getUserPay() {
            return userPay;
        }
    }
})();
(function () {
    angular.module('app.mobile-user')
        .factory('userPay', userPay);
    userPay.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function userPay($http, URL_SEED) {
        var APPUSERPAY_URL = URL_SEED.API_URL + 'billing/onlinebill/';
        return {
            queryHome: queryHome,
        };
        function queryHome(a) {
            return $http({
                method: 'GET',
                url: APPUSERPAY_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    querytype:'all',
                    username:a
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
    }
})();
/**=========================================================
 * Module: navbar-search.js
 * Navbar search toggler * Auto dismiss on ESC key
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.navsearch')
        .directive('searchOpen', searchOpen)
        .directive('searchDismiss', searchDismiss);

    //
    // directives definition
    // 
    
    function searchOpen () {
        var directive = {
            controller: searchOpenController,
            restrict: 'A'
        };
        return directive;

    }

    function searchDismiss () {
        var directive = {
            controller: searchDismissController,
            restrict: 'A'
        };
        return directive;
        
    }

    //
    // Contrller definition
    // 
    
    searchOpenController.$inject = ['$scope', '$element', 'NavSearch'];
    function searchOpenController ($scope, $element, NavSearch) {
      $element
        .on('click', function (e) { e.stopPropagation(); })
        .on('click', NavSearch.toggle);
    }

    searchDismissController.$inject = ['$scope', '$element', 'NavSearch'];
    function searchDismissController ($scope, $element, NavSearch) {
      
      var inputSelector = '.navbar-form input[type="text"]';

      $(inputSelector)
        .on('click', function (e) { e.stopPropagation(); })
        .on('keyup', function(e) {
          if (e.keyCode === 27) // ESC
            NavSearch.dismiss();
        });
        
      // click anywhere closes the search
      $(document).on('click', NavSearch.dismiss);
      // dismissable options
      $element
        .on('click', function (e) { e.stopPropagation(); })
        .on('click', NavSearch.dismiss);
    }

})();


/**=========================================================
 * Module: nav-search.js
 * Services to share navbar search functions
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.navsearch')
        .service('NavSearch', NavSearch);

    function NavSearch() {
        this.toggle = toggle;
        this.dismiss = dismiss;

        ////////////////

        var navbarFormSelector = 'form.navbar-form';

        function toggle() {
          var navbarForm = $(navbarFormSelector);

          navbarForm.toggleClass('open');

          var isOpen = navbarForm.hasClass('open');

          navbarForm.find('input')[isOpen ? 'focus' : 'blur']();
        }

        function dismiss() {
          $(navbarFormSelector)
            .removeClass('open') // Close control
            .find('input[type="text"]').blur() // remove focus
            // .val('') // Empty input
            ;
        }
    }
})();

/**
 * groupuser.controller.js
 * @author: huangxiang
 * @create 2017-04-11 16:39
 */
(function(){

    angular.module('app.operator')
        .controller('GroupUserManageController',GroupUserManageController);

    GroupUserManageController.$inject = ['DTColumnDefBuilder', '$location', 'OperatorManageFactory', '$cookies', 'datatablesOptions', 'logger','StatusCode'];

    'use strict';
    function GroupUserManageController(DTColumnDefBuilder,$location,OperatorManageFactory,$cookies,datatablesOptions,logger,StatusCode) {

        var vm = this;

        vm.modifyGroupUser = modifyGroupUser;  // 修改集团用户
        vm.queryGroupUser = queryGroupUser; // 查询集团用户
        vm.queryGroupUserDetail = queryGroupUserDetail;

        vm.queryGroupUser(); // 初始化集团用户列表，从服务器请求数据

        vm.dtOptions = datatablesOptions.getDatatableOption(); // 获取表格配置

        // 表格列设置
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6).notSortable()
        ];

        /**
         * @jsdoc function
         * 修改groupuser 可操作停车场
         */
        function modifyGroupUser() {

        }

        /**
         * @jsdoc function
         * 查询所有group user
         */
        function queryGroupUser() {
            OperatorManageFactory.readAll().then(function (response) {
                if (response.status === StatusCode.SUCCESS) {
                    vm.users = response.operators;
                } else {
                    logger.error('获取用户失败',response.detail,'获取用户数据失败！！！');
                }
            });
        }

        /**
         * @jsdoc function,
         * 查询单个group user 详情
         */
        function queryGroupUserDetail() {

        }

    }
})();
(function(){
    angular.module('app.operator')
        .controller('AddOperatorController',AddOperatorController);
    AddOperatorController.$inject = ['OperatorManageFactory','$location','logger','organService'];
    'use strict';
    function AddOperatorController(OperatorManageFactory,$location,logger,organService) {
        var vm = this;
        vm.OrganAsync = [];
        var allOrgans = [];
        organService.queryOrgan().then(function (response) {
            vm.OrganAsync = response.records;
            angular.forEach(response.records, function (value) {
                allOrgans.push(value.id);
            });
        });
        vm.onSelectCallbackOrgan = function (item) {
            vm.eventResult = {model: item};
            vm.seletOrgan.id = vm.eventResult.model.id;
        };
        vm.seletOrgan = {
            id: undefined
        };
        vm.addOperator = addOperator;
        vm.backToPrevious = backToPrevious;
        function addOperator() {
            OperatorManageFactory.addOperator(vm.operator.name,vm.operator.nick_name, vm.seletOrgan.id,vm.operator.password)
                .success(function (response) {
                    logger.success('你已成功添加用户' + '""' + vm.operator.name + '"!"', '操作成功', response.data);

                    $location.path('/app/operator');
                }).error(function (response) {
                logger.error('未能添加' + '""' + vm.operator.name + '"!"', '添加失败', response.data);
            });
        }

        function backToPrevious() {
            $location.path('app/operator');
        }
    }
})();
/**
 * Created by huangxiang  on 2016/11/22 0022.
 * @author: huangxiang
 * Module:operator.controller.js
 * feature: operatormanage settings
 */
(function () {
    angular.module('app.operator')
        .controller('OperatorManageController', OperatorManageController);

    OperatorManageController.$inject = ['$scope', 'DTColumnDefBuilder', '$location', 'OperatorManageFactory', '$uibModal', '$cookies', 'datatablesOptions', 'logger'];

    'use strict';
    function OperatorManageController($scope, DTColumnDefBuilder, $location, OperatorManageFactory, $uibModal, $cookies, datatablesOptions, logger) {

        var vm = this;

        vm.addNewUser = addNewUser; // 跳转至新增用户页面的方法
        vm.queryOperators = queryOperators; // 查询所有用户的方法
        vm.searchUsers = searchUsers; // 按群组名查找用户
        vm.queryOperatorDetail = queryOperatorDetail; // 查询用户详情/跳转至修改用户页面的方法
        vm.deleteOperator = deleteOperator;  // 打开删除用户的modal


        vm.queryOperators(); // 初始化用户列表


        /*群组选择-------------------------------------------------*/
        vm.disabled = undefined;
        vm.searchEnabled = undefined;

        vm.setInputFocus = function () {
            $scope.$broadcast('UiselectDemo1');
        };
        vm.enable = function () {
            vm.disabled = false;
        };

        vm.disabled = function () {
            vm.disabled = true;
        };

        vm.enableSearch = function () {
            vm.searchEnabled = true;
        };

        vm.disableSearch = function () {
            vm.searchEnabled = false;
        };

        vm.someGroupFn = function (item) {

            if (item.name[0] >= 'A' && item.name[0] <= 'M')
                return 'From A - M';

            if (item.name[0] >= 'N' && item.name[0] <= 'Z')
                return 'From N - Z';

        };

        vm.firstLetterGroupFn = function (item) {
            return item.groupname[0];
        };

        vm.reverseOrderFilterFn = function (groups) {
            return groups.reverse();
        };
        vm.roleAsync = {selected: 'wladimir@email.com'};
        vm.roleAsync = [];

        var allRoles = [];
        OperatorManageFactory.queryRoleList().then(function (response) {
            vm.roleAsync = response.groupinfo;
            angular.forEach(response.groupinfo, function (value) {
                allRoles.push(value.groupId);
            });
        });

        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
        };
        /*群组选择-------------------------------------------------*/

        vm.dynamicPopover = 'Hello, World!';
        vm.dynamicPopoverTitle = 'Title';

        // 获取表格设置
        vm.dtOptions = datatablesOptions.getDatatableOption();
        // 表格列设置
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6).notSortable()
        ];

        function addNewUser() {
            $location.path('app/add-operator');
        }

        function queryOperators() {
            OperatorManageFactory.readAll().then(function (response) {
                if (response.status === 0) {
                    vm.users = response.operators;
                } else {
                    logger.error('获取用户失败',response.detail,'获取用户数据失败！！！');
                }
            });
        }

        function searchUsers() {
            OperatorManageFactory.readAllWithGroup(vm.eventResult.model.groupname).then(function (response) {
                if (response.status === 0) {
                    vm.users = response.operators;
                } else {
                    logger.error('查找失败',response.detail,'查找用户失败');
                }
            });
        }

        function queryOperatorDetail(user) {
            OperatorManageFactory.setUserId(user.staffid);
            OperatorManageFactory.setUsername(user.username);
            $cookies.put('currentClickUserStaffid',user.staffid);
            $cookies.put('currentClickUsername',user.username);
            $location.path('/app/modify-operator');
        }

        // 删除用户
        function deleteOperator(user) {
            OperatorManageFactory.setUserId(user.staffid);
            OperatorManageFactory.setUsername(user.username);
            $cookies.put('currentClickUserStaffid',user.staffid);
            $cookies.put('currentClickUsername',user.username);
            var uibModalInstance = $uibModal.open({
                backdrop: 'static',  // 点击空白处不隐藏并保持黑色模态背景，默认是true，false为不隐藏也没有模态背景
                templateUrl: '/park/app/views/partials/delete-operator-modal.html',
                controller: 'DeleteOperatorController',
                controllerAs: 'vm'
            });
            uibModalInstance.result.then(function (response) {
                logger.success('操作成功', '你已成功删除用户' + '‘' + user.username + '’！', response.data);
                vm.queryOperators();
            });
        }
    }
})();

/**
 * operator.delete.controller.js
 * @author: huangxiang
 * @create 2017-01-05 10:53
 */
(function () {
    angular.module('app.operator')
        .controller('DeleteOperatorController', DeleteOperatorController);

    DeleteOperatorController.$inject = ['$uibModalInstance', 'OperatorManageFactory','$cookies'];
    'use strict';
    function DeleteOperatorController($uibModalInstance, OperatorManageFactory,$cookies) {
        var vm = this;
        vm.deleteOperatorConfirm = deleteOperatorConfirm;
        vm.cancel = cancel;

        function deleteOperatorConfirm() {
            OperatorManageFactory.deleteOperator($cookies.get('currentClickUserStaffid'))
                .then(function (response) {
                    if (response.status == 0) {
                        $uibModalInstance.close('closed');
                    } else {
                        alert('删除失败：' + response.detail);
                    }

                });
        }

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
(function () {
    angular.module('app.operator')
        .factory('OperatorManageFactory', OperatorManageFactory);
    OperatorManageFactory.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function OperatorManageFactory($http, URL_SEED) {

        var OPERATOR_URL = URL_SEED.API_URL + 'account/operator/';
        var ROLE_URL = URL_SEED.API_URL + 'account/role/'; // 查询群组的url
        var PERMISSION_URL = URL_SEED.API_URL + 'account/backperm/'; // 查询所有权限的url

        var currentClickUser = {
            userid: 0,
            username: ''
        };

        return {
            readOneOperator: readOneOperator,
            readAll: readAll,
            readAllWithGroup: readAllWithGroup,
            addOperator: addOperator,
            modifyOperator: modifyOperator,
            deleteOperator: deleteOperator,
            queryRoleList: queryRoleList,
            queryPermissions: queryPermissions,
            setUserId: setUserId,
            getUserId: getUserId,
            setUsername: setUsername,
            getUsername: getUsername
        };

        /*查询单个操作员*/
        function readOneOperator(staffid) {
            return $http({
                method: 'GET',
                url: OPERATOR_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {staffid: staffid},
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

        /*查询所有的操作员*/
        function readAll() {

            return $http({
                method: 'GET',
                url: OPERATOR_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

        /*查询所有的操作员*/
        function readAllWithGroup(groupname) {

            return $http({
                method: 'GET',
                url: OPERATOR_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    groupname: groupname
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

        /*新增操作员*/
        function addOperator(operator,nickname,organization, role) {
            var operatorJson = angular.toJson({staffname: operator, password: role,nick_name:nickname,organization:organization});
            return $http({
                method: 'POST',
                url: OPERATOR_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: operatorJson,
                withCredentials: true
            }).success(function (response) {
                return response.data;
            }).error(function (response) {
                return response.data;
            });
        }

        /*修改操作员*/
        function modifyOperator(staffid, groups, perms, parklots) {
            var operatorJson = angular.toJson({staffid: staffid, groups: groups, perms: perms, parklots: parklots});
            return $http({
                method: 'PUT',
                url: OPERATOR_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: operatorJson,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

        /*删除操作员*/
        function deleteOperator(operator) {
            var operatorJSON = angular.toJson({staffid: operator});
            return $http({
                method: 'DELETE',
                url: OPERATOR_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: operatorJSON,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

        /*查询所有群组*/
        function queryRoleList() {
            return $http({
                method: 'GET',
                url: ROLE_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

        /*查询所有可分配权限*/
        function queryPermissions() {
            return $http({
                method: 'GET',
                url: PERMISSION_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

        function setUserId(currentId) {
            currentClickUser.userid = currentId;
        }

        function getUserId() {
            return currentClickUser.userid;
        }

        function setUsername(currentName) {
            currentClickUser.username = currentName;
        }

        function getUsername() {
            return currentClickUser.username;
        }
    }
})();

/**
 * Created by huangxiang  on 2016/11/23 0023.
 * @author:
 * Module:
 * feature:
 */
(function () {

    angular.module('app.operator')
        .controller('ModifyOperatorController', ModifyOperatorController);

    ModifyOperatorController.$inject = ['$location', 'logger', 'OperatorManageFactory', 'ManageParkingService','$cookies'];

    'use strict';
    function ModifyOperatorController($location, logger, OperatorManageFactory, ManageParkingService,$cookies) {

        var vm = this;

        vm.groupSearchText = ''; // 群组搜索关键字
        vm.parkSearchText = ''; // 停车场搜索关键字

        vm.GroupSelectedAvailItems = [];
        vm.GroupSelectedSelectedListItems = [];
        vm.GroupSelectedListItems = [];
        vm.GroupAvailableListItems = [];

        vm.ParkSelectedAvailItems = [];
        vm.ParkSelectedSelectedListItems = [];
        vm.ParkSelectedListItems = [];
        vm.ParkAvailableListItems = [];

        // 已选择群组
        var selectGroup = [];

        // 已选择停车场
        var selectPark = [];

        /*获取用户信息*/
        OperatorManageFactory.readOneOperator($cookies.get('currentClickUserStaffid')).then(function (response) {
            vm.currentOperator = response;
            angular.copy(vm.currentOperator.groups, vm.GroupSelectedListItems); // 获取用户已有组
            angular.copy(vm.currentOperator.authparklot, vm.ParkSelectedListItems); // 获取用户当前所能操作停车场

            // 用户已有的群组从可用群组中删除
            angular.forEach(vm.GroupSelectedListItems, function (value) {
                for (var i = vm.GroupAvailableListItems.length - 1; i >= 0; i--) {
                    if (vm.GroupAvailableListItems[i].groupname == value.groupname) {
                        vm.GroupAvailableListItems.splice(i, 1);
                    }
                }
            });

            // 用户已有的停车场从可用停车场删除
            angular.forEach(vm.ParkSelectedListItems, function (value) {
                for (var i = vm.ParkAvailableListItems.length - 1; i >= 0; i--) {
                    if (vm.ParkAvailableListItems[i].name == value.name) {
                        vm.ParkAvailableListItems.splice(i, 1);
                    }
                }
            });

            // 将用户已有群组的id存入一个数组
            angular.forEach(vm.currentOperator.groups, function (data) {
                //noinspection JSUnresolvedVariable
                selectGroup.push(data.groupId);
            });

            // 将用户已有停车场的id存入一个数组
            angular.forEach(vm.currentOperator.authparklot, function (data) {
                selectPark.push(data.id);
            });

        });

        /*获取群组列表*/
        OperatorManageFactory.queryRoleList().then(function (response) {
            vm.allRole = response.groupinfo;
            angular.copy(vm.allRole, vm.GroupAvailableListItems);
        });

        /*获取停车场列表*/
        ManageParkingService.queryParking().then(function (response) {
            vm.allParking = response.parking_lots;
            angular.copy(vm.allParking, vm.ParkAvailableListItems);
        });


        vm.OnAvailableChange = function () {
            vm.AvailLength = vm.SelectedAvailItems.length;
        };

        /////////////////////////////////////////////////////////////////////////////////////////
        // 群组操作
        /*从左边等select移动至右边的select*/
        vm.GroupBtnRight = function () {
            //move selected.
            angular.forEach(vm.GroupSelectedAvailItems, function (value) {
                this.push(value);
                selectGroup.push(value.groupId);
            }, vm.GroupSelectedListItems);

            //remove the ones that were moved.
            angular.forEach(vm.GroupSelectedAvailItems, function (value) {
                for (var i = vm.GroupAvailableListItems.length - 1; i >= 0; i--) {
                    if (vm.GroupAvailableListItems[i].groupname == value.groupname) {
                        vm.GroupAvailableListItems.splice(i, 1);
                    }
                }
            });
            vm.GroupSelectedAvailItems = [];
        };

        /*把左边select中等所有option移动至右边等select内*/
        vm.GroupBtnAllRight = function () {
            //move all.
            angular.forEach(vm.GroupAvailableListItems, function (value) {
                this.push(value);
                selectGroup.push(value.groupId);
            }, vm.GroupSelectedListItems);

            //remove the ones that were moved from the source.
            for (var i = vm.GroupAvailableListItems.length - 1; i >= 0; i--) {
                vm.GroupAvailableListItems.splice(i, 1);
            }

        };

        /*把右边select中选中的option移动至左边等select中*/
        vm.GroupBtnLeft = function () {
            //move selected.
            angular.forEach(vm.GroupSelectedSelectedListItems, function (value) {
                this.push(value);
            }, vm.GroupAvailableListItems);

            //remove the ones that were moved from the source container.
            angular.forEach(vm.GroupSelectedSelectedListItems, function (value) {
                for (var i = vm.GroupSelectedListItems.length - 1; i >= 0; i--) {
                    if (vm.GroupSelectedListItems[i].groupname == value.groupname) {
                        vm.GroupSelectedListItems.splice(i, 1);
                        selectGroup.splice(i, 1);
                    }
                }
            });
            vm.GroupSelectedSelectedListItems = [];
        };

        /*把左边select中的全部option移动至右边等select中*/
        vm.GroupBtnAllLeft = function () {

            //move over all items
            angular.forEach(vm.GroupSelectedListItems, function (value) {
                this.push(value);
            }, vm.GroupAvailableListItems);

            //remove the ones that were moved from the source.
            for (var i = vm.GroupSelectedListItems.length - 1; i >= 0; i--) {
                vm.GroupSelectedListItems.splice(i, 1);
            }
            selectGroup = [];
            vm.GroupSelectedSelectedListItems = [];
        };
        // 停车场操作
        /*从左边等select移动至右边的select*/
        vm.ParkBtnRight = function () {
            //move selected.
            angular.forEach(vm.ParkSelectedAvailItems, function (value) {
                this.push(value);
            }, vm.ParkSelectedListItems);

            //remove the ones that were moved.
            angular.forEach(vm.ParkSelectedAvailItems, function (value) {
                for (var i = vm.ParkAvailableListItems.length - 1; i >= 0; i--) {
                    if (vm.ParkAvailableListItems[i].name == value.name) {
                        vm.ParkAvailableListItems.splice(i, 1);
                        selectPark.push(value.id);
                    }
                }
            });
            vm.ParkSelectedAvailItems = [];
        };

        /*把左边select中等所有option移动至右边等select内*/
        vm.ParkBtnAllRight = function () {
            //move all.
            angular.forEach(vm.ParkAvailableListItems, function (value) {
                this.push(value);
                selectPark.push(value.id);
            }, vm.ParkSelectedListItems);

            //remove the ones that were moved from the source.
            for (var i = vm.ParkAvailableListItems.length - 1; i >= 0; i--) {
                vm.ParkAvailableListItems.splice(i, 1);
            }

        };

        /*把右边select中选中的option移动至左边等select中*/
        vm.ParkBtnLeft = function () {
            //move selected.
            angular.forEach(vm.ParkSelectedSelectedListItems, function (value) {
                this.push(value);
            }, vm.ParkAvailableListItems);

            //remove the ones that were moved from the source container.
            angular.forEach(vm.ParkSelectedSelectedListItems, function (value) {
                for (var i = vm.ParkSelectedListItems.length - 1; i >= 0; i--) {
                    if (vm.ParkSelectedListItems[i].name == value.name) {
                        vm.ParkSelectedListItems.splice(i, 1);
                        selectPark.splice(i, 1);
                    }
                }
            });
            vm.ParkSelectedSelectedListItems = [];
        };

        /*把左边select中的全部option移动至右边等select中*/
        vm.ParkBtnAllLeft = function () {
            //move over all items
            angular.forEach(vm.ParkSelectedListItems, function (value) {
                this.push(value);
            }, vm.ParkAvailableListItems);

            //remove the ones that were moved from the source.
            for (var i = vm.ParkSelectedListItems.length - 1; i >= 0; i--) {
                vm.ParkSelectedListItems.splice(i, 1);
            }
            selectPark = [];
            vm.ParkSelectedSelectedListItems = [];
        };
        ///////////////////////////////////////////////////////////////////////////////////////////

        vm.BaoCunOperator = function () {
            OperatorManageFactory.modifyOperator($cookies.get('currentClickUserStaffid'), selectGroup, null, selectPark).then(function (response) {
                if (response.status == 0) {
                    logger.success('操作成功', response.detail, '你已成功修改用户' + '‘' + OperatorManageFactory.getUsername() + '’！');
                    $location.path('/app/operator');
                } else {
                    alert('修改失败！！' + response.detail);
                }
            });
        };

        vm.deleteUser = function () {
            OperatorManageFactory.deleteOperator($cookies.get('currentClickUserStaffid')).then(function (response) {
                if (response.status == 0) {
                    logger.success('操作成功', response.detail, '你已成功删除用户' + '‘' + vm.currentOperator.username + '’！');
                    $location.path('/app/operator');
                } else {
                    alert('修改失败！！' + response.detail);
                }
            });
        };
    }
})();

(function () {
    angular.module('app.parking')
        .controller('parkPicController', parkPicController);
    parkPicController.$inject = ['$location', 'ManageParkingService', 'currentClickPark', '$uibModal','$document','regionService','URL_SEED','logger'];
    'use strict';
    function parkPicController($location, ManageParkingService, currentClickPark, $uibModal,$document,regionService,URL_SEED,logger) {
        var vm = this;
        vm.picture_no='';vm.lat_long_no='';vm.price_no='';vm.placetype_no='';vm.other_platform='';
        vm.queryBaiDuMapParking = queryBaiDuMapParking;
        vm.queryBaiDuMapParking();
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            next_start_index:0,
            previous_start_index:0,
            maxid: 0,
            minid: 0
        };
        vm.number={
            start:0,
            next:0
        };
        /*区域选择-------------------------------------------------*/
        vm.regiongAsync = [];
        var allRegions = [];
        regionService.queryRegion().then(function (response) {
            vm.regiongAsync = response.records;
            angular.forEach(response.records, function (value) {
                allRegions.push(value.id);
            });
        });
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.selectRegionId = vm.eventResult.model.id;
        };
        vm.parkingAsync = [];
        var allParkLots = [];
        var start_index = 0;
        function queryBaiDuMapParking() {
            ManageParkingService.queryBaiDuMapParking(start_index).then(function (response) {
                if(response.parking_lots.length !== 0) {
                    start_index =  response.parking_lots[response.parking_lots.length - 1].id;
                    angular.forEach(response.parking_lots, function (value) {
                        vm.parkingAsync.push(value);
                        allParkLots.push(value.id);
                    });
                    queryBaiDuMapParking();
                }
            });
        }

        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.seletParkId = vm.eventResult.model.id;
        };
        vm.seletPark = {
            id: undefined
        };
        vm.queryParkings = queryParkings; // 查询所有停车场
        vm.queryParkIdentifier = queryParkIdentifier; // 查询停车场密钥
        vm.queryParkingGate = queryParkingGate; // 查询停车场入口
        vm.addParkingLot = addParkingLot; //新增停车场
        vm.queryParkings(0); // 初始化停车场表格数据
        function queryParkingGate(parkId) {
            ManageParkingService.queryGates(parkId).then(function (response) {
               vm.parkgate = response.parkgate;
            });
        }
        /**
         * 新增停车场.跳转至新增停车场界面
         */
        function addParkingLot() {
            $location.path('/app/parkPic/parking-pic-upload');
        }

        function queryParkIdentifier(parking) {
            currentClickPark.setPark(parking);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: '/park/app/views/partials/query-park-detail.html',
                size: 'lg',
                controller: 'QueryIdentifierController',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                vm.queryParkings(0);
            });
        }
        //查询停车场
        function queryParkings(start_index){
            if(start_index == 0){//首页index
                ManageParkingService.readRecords(0,'',vm.selectRegionId,'',vm.picture_no,vm.lat_long_no,vm.price_no,vm.other_platform,vm.seletParkId).then(function (response) {
                    vm.parking_lots = response.parking_lots;
                    angular.forEach(response.parking_lots, function (value,index) {
                        if(value.image){
                            vm.parking_lots[index].src =URL_SEED.IMG_URL+'media/'+value.image;
                        }else {
                            vm.parking_lots[index].src = URL_SEED.API_IMGURL+'app/img/no_pic.png';
                        }
                    });
                    vm.number.start = vm.parking_lots[0];
                    vm.number.next = vm.parking_lots[vm.parking_lots.length - 1].number;
                    vm.pagination.next_start_index = response.parking_lots[response.parking_lots.length - 1].id;
                    vm.pagination.previous_start_index = response.parking_lots[0].id;
                    vm.pagination.maxid = response.maxid;
                    if (response.parking_lots.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else{
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                });
            }else if(start_index == 1){//上一页
                if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                    logger.warning('已经到首页！','','没有上一页');
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }else{
                    ManageParkingService.readRecords(vm.pagination.previous_start_index,0,vm.selectRegionId,'',vm.picture_no,vm.lat_long_no,vm.price_no,vm.other_platform,vm.seletParkId).then(function (response) {
                        vm.parking_lots = response.parking_lots;
                        angular.forEach(response.parking_lots, function (value,index) {
                            if(value.image){
                                vm.parking_lots[index].src =URL_SEED.IMG_URL+'media/'+value.image;
                            }else {
                                vm.parking_lots[index].src = URL_SEED.API_IMGURL+'app/img/no_pic.png';
                            }
                        });
                        vm.number.start = vm.parking_lots[0];
                        vm.number.next = vm.parking_lots[vm.parking_lots.length - 1].number;
                        vm.pagination.next_start_index = response.parking_lots[response.parking_lots.length - 1].id;
                        vm.pagination.previous_start_index = response.parking_lots[0].id;
                        vm.pagination.maxid = response.maxid;
                        if (response.parking_lots.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        }
                    });
                }
            }else if(start_index == 2){//下一页
                if (vm.pagination.next_start_index <= vm.pagination.minid) {
                    logger.warning('已经到最后一页！','','没有下一页');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                }else{
                    ManageParkingService.readRecords(vm.pagination.next_start_index,1,vm.selectRegionId,'',vm.picture_no,vm.lat_long_no,vm.price_no,vm.other_platform,vm.seletParkId).then(function (response) {
                        vm.parking_lots = response.parking_lots;
                        angular.forEach(response.parking_lots, function (value,index) {
                            if(value.image){
                                vm.parking_lots[index].src =URL_SEED.IMG_URL+'media/'+value.image;
                            }else {
                                vm.parking_lots[index].src = URL_SEED.API_IMGURL+'app/img/no_pic.png';
                            }
                        });
                        vm.number.start = vm.parking_lots[0];
                        vm.number.next = vm.parking_lots[vm.parking_lots.length - 1].number;
                        vm.pagination.next_start_index = response.parking_lots[response.parking_lots.length - 1].id;
                        vm.pagination.previous_start_index = response.parking_lots[0].id;
                        vm.pagination.minid = response.minid;
                        if (response.parking_lots.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        }
                    });
                }
            }else if(start_index == 3){//加载最后一页
                ManageParkingService.readRecords(-1,'',vm.selectRegionId,'',vm.picture_no,vm.lat_long_no,vm.price_no,vm.other_platform,vm.seletParkId).then(function (response) {
                    vm.parking_lots = response.parking_lots;
                    angular.forEach(response.parking_lots, function (value,index) {
                        if(value.image){
                            vm.parking_lots[index].src =URL_SEED.IMG_URL+'media/'+value.image;
                        }else {
                            vm.parking_lots[index].src = URL_SEED.API_IMGURL+'app/img/no_pic.png';
                        }
                    });
                    vm.number.start = vm.parking_lots[0];
                    vm.number.next = vm.parking_lots[vm.parking_lots.length - 1].number;
                    vm.pagination.next_start_index = response.parking_lots[response.parking_lots.length - 1].id;
                    vm.pagination.previous_start_index = response.parking_lots[0].id;
                    vm.pagination.minid = response.minid;
                    if (response.parking_lots.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else{
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    }
                });
            }
        }
        vm.clearAndRefresh = function () {
            vm.parkingAsync.selected = null;vm.picture_no = null;vm.lat_long_no = null;vm.price_no = null;vm.other_platform = null;
            vm.seletParkId = '';
            vm.selectRegionId = '';
            vm.readRecords(0);
        };
    }
})();
(function () {
    angular.module('app.parking')
        .controller('ParkActionController', ParkActionController);
    ParkActionController.$inject = ['$location', 'ParkActionService', 'DTColumnDefBuilder', 'datatablesOptions', 'parkActionFactory', '$uibModal','$document','ManageParkingService'];
    'use strict';
    function ParkActionController($location, ParkActionService, DTColumnDefBuilder, datatablesOptions, parkActionFactory, $uibModal,$document,ManageParkingService) {
        var vm = this;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            next_start_index:0,
            previous_start_index:0,
            maxid: 0,
            minid: 0
        };
        vm.number={
            start:0,
            next:0
        };
        vm.parkingAsync = [];
        var allParkLots = [];
        var start_index = 0;
        vm.queryBaiDuMapParking = queryBaiDuMapParking;
        vm.queryBaiDuMapParking();
        function queryBaiDuMapParking() {
            ManageParkingService.queryBaiDuMapParking(start_index).then(function (response) {
                if(response.parking_lots.length !== 0) {
                    start_index =  response.parking_lots[response.parking_lots.length - 1].id;
                    angular.forEach(response.parking_lots, function (value) {
                        vm.parkingAsync.push(value);
                        allParkLots.push(value.id);
                    });
                    queryBaiDuMapParking();
                }
            });
        }
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.seletParkId = vm.eventResult.model.id;
        };
        vm.queryParkAction = queryParkAction; // 查询停车场功能表
        vm.addParkAction = addParkAction; //新增停车场功能
        vm.deleteParkAction = deleteParkAction; //删除停车场功能
        vm.modifyParkAction = modifyParkAction; //修改停车场功能
        vm.queryParkAction(0); // 初始化停车场功能表格
        vm.dtOptions = datatablesOptions.getDatatableOption().withOption('paging', false); // 获取datatables表格设置
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2).notSortable()
        ];
        //查询停车场功能
        function queryParkAction(start_index) {
            if(start_index == 0){//首页
                ParkActionService.readRecords(0,'',vm.seletParkId).then(function (response) {
                    vm.parkAction = response.data;
                    angular.forEach(response.data, function (value,index) {
                        vm.parkAction[index].number =index+1;
                    });
                    vm.number.start = vm.parkAction[0].number;
                    vm.number.next = vm.parkAction[vm.parkAction.length - 1].number;
                    vm.pagination.next_start_index = response.data[response.data.length - 1].parklot_id;
                    vm.pagination.previous_start_index = response.data[0].parklot_id;
                    vm.pagination.maxid = response.maxid;
                    if (response.data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else{
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                });
            }else if(start_index == 1){//上一页
                if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                    logger.warning('已经到首页！','','没有上一页');
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }else{
                    ParkActionService.readRecords(vm.pagination.previous_start_index,0,vm.seletParkId).then(function (response) {
                        vm.parkAction = response.data;
                        angular.forEach(response.data, function (value,index) {
                            vm.parkAction[index].number = vm.number.start+index-response.data.length+1;
                        });
                        vm.pagination.next_start_index = response.data[response.data.length - 1].parklot_id;
                        vm.pagination.previous_start_index = response.data[0].parklot_id;
                        vm.pagination.maxid = response.maxid;
                        vm.number.start = vm.parkAction[0].number;
                        if (response.data.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        }
                    });
                }
            }else if(start_index == 2){//下一页
                if (vm.pagination.next_start_index <= vm.pagination.minid) {
                    logger.warning('已经到最后一页！','','没有下一页');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                }else{
                    ParkActionService.readRecords(vm.pagination.next_start_index,1,vm.seletParkId).then(function (response) {
                        vm.parkAction = response.data;
                        angular.forEach(response.data, function (value,index) {
                            vm.parkAction[index].number = vm.number.number+index;
                        });
                        vm.number.start = vm.parkAction[0].number;
                        vm.number.next = vm.parkAction[vm.parkAction.length - 1].number;
                        vm.pagination.next_start_index = response.data[response.data.length - 1].parklot_id;
                        vm.pagination.previous_start_index = response.data[0].parklot_id;
                        vm.pagination.minid = response.minid;
                        if (response.data.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        }
                    });
                }
            }else if(start_index == 3){//加载最后一页
                ParkActionService.readRecords(-1,'',vm.seletParkId).then(function (response) {
                    vm.parkAction = response.data;
                    angular.forEach(response.data, function (value,index) {
                        vm.parkAction[index].number = response.data[0].id+index;
                    });
                    vm.number.start = vm.parkAction[0].number;
                    vm.number.next = vm.parkAction[vm.parkAction.length - 1].number;
                    vm.pagination.next_start_index = response.data[response.data.length - 1].parklot_id;
                    vm.pagination.previous_start_index = response.data[0].parklot_id;
                    vm.pagination.minid = response.minid;
                    if (response.data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else{
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    }
                });
            }
        }
        //新增停车场功能
        function addParkAction() {
            $location.path('/app/parkActionAdd');
        }
        //打开删除model
        function deleteParkAction(ParkAction) {
            parkActionFactory.setParkAction(ParkAction);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: 'deleteParkAction.html',
                size: 'sm',
                controller: 'DeleteParkActionController',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                vm.queryParkAction(0);
            });
        }
        //修改停车场功能
        function modifyParkAction(ParkAction) {
            parkActionFactory.setParkAction(ParkAction);
            $location.path('/app/park-power-modify');
        }
        vm.clearAndRefresh = function () {
            vm.parkingAsync.selected = null;
            vm.seletParkId = null;
            vm.queryParkAction(0);
        };
    }
})();
(function () {
    angular.module('app.parking')
        .factory('parkActionFactory', parkActionFactory);
    'use strict';
    function parkActionFactory() {
        var parkAction = {
            id:'',      //数据id
            parklot_id:'',
            number:'',  //序号
            parkActionNaem: '',//功能名
            parkActionId:'',//功能id
            parkName:''//停车场名称
        };
        return {
            setParkAction: setParkAction,
            getParkAction: getParkAction
        };
        function setParkAction(cparkAction) {
            parkAction.id = cparkAction.id;
            parkAction.parklot_id = cparkAction.parklot_id;
            parkAction.number = cparkAction.number;
            parkAction.parkActionNaem = cparkAction.parkActionNaem;
            parkAction.parkActionId = cparkAction.parkActionId;
            parkAction.parkName = cparkAction.parkName;
        }
        function getParkAction() {
            return parkAction;
        }
    }
})();
(function () {
    angular.module('app.parking')
        .factory('parkActionFactory', parkActionFactory);
    'use strict';
    function parkActionFactory() {
        var parkAction = {
            id:'',      //数据id
            funcname: '',//功能名
            introduce: ''//功能描述
        };
        return {
            setParkAction: setParkAction,
            getParkAction: getParkAction
        };
        function setParkAction(cParkAction) {
            parkAction.id = cParkAction.id;//id
            parkAction.funcname = cParkAction.funcname;
            parkAction.introduce = cParkAction.introduce;
        }
        function getParkAction() {
            return parkAction;
        }
    }
})();
(function () {
    angular.module('app.parking')
        .factory('ParkActionService', ParkActionService);
    ParkActionService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function ParkActionService($http, URL_SEED) {
        var service = {};
        var PARKACTION_URL = URL_SEED.API_URL + 'parking/lotfc/';
        var PARKPOWER_URL = URL_SEED.API_URL + 'parking/func/';
        // var PARKACTION_URL = 'data/parkAction.json';
        //新增停车场功能配置
        service.addParkAction = function (parklot, funcbase) {
            var gate_info = angular.toJson({
                funcbase: funcbase,
                parklot: parklot
            });
            return $http({
                method: 'POST',
                url: PARKACTION_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: gate_info,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        /*修改停场功能配置*/
        service.modifyParkAction = function (funcb_id, funcname, introduce) {
            var gate_info = angular.toJson({
                funcb_id: funcb_id,
                funcname: funcname,
                introduce: introduce
            });
            return $http({
                method: 'PUT',
                url: PARKACTION_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: gate_info,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        /*删除停车场功能配置*/
        service.deleteParkAction = function (funcb_id) {
            var gate_info = angular.toJson({funcb_id: funcb_id});
            return $http({
                method: 'DELETE',
                url: PARKACTION_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: gate_info,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        //查询所有的功能列表
        service.qeuryAllPower = function (funcb_id) {
            return $http({
                method: 'GET',
                url: PARKPOWER_URL,
                params: {
                    funcb_id:funcb_id
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        //分页查询
        service.readRecords =function(start_index,pagedirect,park_id) {
            return $http({
                method: 'GET',
                url: PARKACTION_URL,
                params: {
                    max_results: 50,
                    start_index: start_index,
                    pagedirect: pagedirect,
                    park_id:park_id
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        return service;
    }
})();

(function () {
    angular.module('app.parking')
        .controller('AddParkActionController', AddParkActionController);
    AddParkActionController.$inject = ['$location', 'ParkActionService', 'logger','ManageParkingService'];
    'use strict';
    function AddParkActionController($location, ParkActionService, logger,ManageParkingService) {
        var vm = this;
        //停车场选择
        vm.parkAsync = [];
        var allParkLots = [];
        var start_index = 0;
        vm.queryBaiDuMapParking = queryBaiDuMapParking;
        vm.queryBaiDuMapParking();
        function queryBaiDuMapParking() {
            ManageParkingService.queryBaiDuMapParking(start_index).then(function (response) {
                if(response.parking_lots.length !== 0) {
                    start_index =  response.parking_lots[response.parking_lots.length - 1].id;
                    angular.forEach(response.parking_lots, function (value) {
                        vm.parkAsync.push(value);
                        allParkLots.push(value.id);
                    });
                    queryBaiDuMapParking();
                }
            });
        }
        vm.onSelectCallbackPark = function (item) {
            vm.eventResult = {model: item};
            vm.seletPark.id = vm.eventResult.model.id;
        };
        vm.seletPark = {
            id: undefined
        };
        //功能选择
        vm.parkSearchText = ''; // 停车场搜索关键字
        vm.GroupSelectedAvailItems = [];
        vm.GroupSelectedSelectedListItems = [];
        vm.GroupSelectedListItems = [];
        vm.GroupAvailableListItems = [];
        vm.ParkSelectedAvailItems = [];
        vm.ParkSelectedSelectedListItems = [];
        vm.ParkSelectedListItems = [];
        vm.ParkAvailableListItems = [];
        vm.currentParkSelect=[];
        var selectParkPower = [];
        /*获取功能列表*/
        ParkActionService.qeuryAllPower().then(function (response) {
            vm.allParkAction = response.records;
            angular.forEach(response.records, function (value,index) {
                vm.allParkAction[index].name =value.introduce;
            });
            angular.copy(vm.allParkAction, vm.ParkAvailableListItems);
        });
        vm.OnAvailableChange = function () {
            vm.AvailLength = vm.SelectedAvailItems.length;
        };
        /*从左边等select移动至右边的select*/
        vm.ParkBtnRight = function () {
            //move selected.
            angular.forEach(vm.ParkSelectedAvailItems, function (value) {
                this.push(value);
            }, vm.ParkSelectedListItems);
            angular.forEach(vm.ParkSelectedAvailItems, function (value) {
                for (var i = vm.ParkAvailableListItems.length - 1; i >= 0; i--) {
                    if (vm.ParkAvailableListItems[i].name == value.name) {
                        vm.ParkAvailableListItems.splice(i, 1);
                        selectParkPower.push(value.id);
                    }
                }
            });
            vm.ParkSelectedAvailItems = [];
        };
        /*把左边select中等所有option移动至右边等select内*/
        vm.ParkBtnAllRight = function () {
            //move all.
            angular.forEach(vm.ParkAvailableListItems, function (value) {
                this.push(value);
                selectParkPower.push(value.id);
            }, vm.ParkSelectedListItems);
            //remove the ones that were moved from the source.
            for (var i = vm.ParkAvailableListItems.length - 1; i >= 0; i--) {
                vm.ParkAvailableListItems.splice(i, 1);
            }
        };
        /*把右边select中选中的option移动至左边等select中*/
        vm.ParkBtnLeft = function () {
            //move selected.
            angular.forEach(vm.ParkSelectedSelectedListItems, function (value) {
                this.push(value);
            }, vm.ParkAvailableListItems);

            //remove the ones that were moved from the source container.
            angular.forEach(vm.ParkSelectedSelectedListItems, function (value) {
                for (var i = vm.ParkSelectedListItems.length - 1; i >= 0; i--) {
                    if (vm.ParkSelectedListItems[i].name == value.name) {
                        vm.ParkSelectedListItems.splice(i, 1);
                        selectParkPower.splice(i, 1);
                    }
                }
            });
            vm.ParkSelectedSelectedListItems = [];
        };
        /*把左边select中的全部option移动至右边等select中*/
        vm.ParkBtnAllLeft = function () {
            //move over all items
            angular.forEach(vm.ParkSelectedListItems, function (value) {
                this.push(value);
            }, vm.ParkAvailableListItems);

            //remove the ones that were moved from the source.
            for (var i = vm.ParkSelectedListItems.length - 1; i >= 0; i--) {
                vm.ParkSelectedListItems.splice(i, 1);
            }
            selectParkPower = [];
            vm.ParkSelectedSelectedListItems = [];
        };
        //新增操作
        vm.addParkAction = addParkAction; // 新增停车场功能
        vm.backToPrevious = backToPrevious; // 返回上一层菜单
        function addParkAction() {
            ParkActionService.addParkAction(vm.seletPark.id,selectParkPower).then(function (response) {
                if (response.status === 0) {
                    logger.success('添加成功'+'停车场功能','操作成功');
                    $location.path('/app/parkAction');
                }else if (response.status === 40004) {
                    logger.error('添加失败', '该功能已经存在！');
                }else if(response.status === 10002 ){
                    logger.error('添加失败' + '"' +'' + '"' + '失败!', '缺少必填字段！');
                }else {
                    logger.error('添加失败');
                }
            });
        }
        function backToPrevious() {
            $location.path('/app/parkAction');
        }
    }
})();
(function () {
    angular.module('app.parking')
        .controller('DeleteParkActionController', DeleteParkActionController);
    DeleteParkActionController.$inject = ['$location', 'ParkActionService', 'logger','parkActionFactory','$uibModalInstance','$state'];
    'use strict';
    function DeleteParkActionController($location, ParkActionService, logger,parkActionFactory,$uibModalInstance,$state) {
        var vm = this;
        vm.deleteParkAction = deleteParkAction; // 新增停车场功能
        vm.cancel = cancel;
        var parkActionId =parkActionFactory.getParkAction().parklot_id;
        var parkActionName =parkActionFactory.getParkAction().funcname;
        function deleteParkAction() {
            ParkActionService.deleteParkAction(parkActionId).then(function (response) {
                if (response.status === 0) {
                    logger.success('删除成功'+'停车场功能：'+parkActionName,'操作成功');
                    vm.cancel();
                    $state.reload();
                }else {
                    logger.error('删除失败');
                }
            });
        }
        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
(function () {
    "use strict";
    angular.module('app.parking')
        .controller('ModifyParkActionController', ModifyParkActionController);

    ModifyParkActionController.$inject = ['$scope', '$timeout', '$location', 'currentClickPark', 'ManageParkingService', 'toastr','regionService','townService','organService','policeService','busTypeService','communityService','logger'];

    function ModifyParkActionController($scope, $timeout, $location, currentClickPark, ManageParkingService, toastr,regionService,townService,organService,policeService,busTypeService,communityService,logger) {
        var vm = this;
        /*区域选择-------------------------------------------------*/
        var selectRegion = [];//所选择的区域
        vm.regiongAsync = [];
        var allRegions = [];
        regionService.queryRegion().then(function (response) {
            vm.regiongAsync = response.records;
            angular.forEach(response.records, function (value) {
                allRegions.push(value.id);
            });
        });
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.selectRegion.id = vm.eventResult.model.id;
        };
        vm.selectRegion = {
            id: undefined
        };
        /*商圈选择-------------------------------------------------*/
        var selectTown = [];//所选择的商圈
        vm.TownAsync = [];
        var allTowns = [];
        townService.queryTown().then(function (response) {
            vm.TownAsync = response.data;
            angular.forEach(response.records, function (value) {
                allTowns.push(value.id);
            });
        });
        vm.onSelectCallbackTown = function (item) {
            vm.eventResult = {model: item};
            vm.seletTown.id = vm.eventResult.model.id;
        };
        vm.seletTown = {
            id: undefined
        };
        //停车场所有人
        var selectOrganman = [];//所选择的停车场所有人
        vm.OrganmanAsync = [];
        var allOrganmans = [];
        organService.queryOrgan().then(function (response) {
            vm.OrganmanAsync = response.records;
            angular.forEach(response.records, function (value) {
                allOrganmans.push(value.id);
            });
        });
        vm.onSelectCallbackOrganman = function (item) {
            vm.eventResult = {model: item};
            vm.seletOrganman.id = vm.eventResult.model.id;
        };
        vm.seletOrganman = {
            id: undefined
        };
        //运营单位
        var selectOrgan = [];//所选择运营单位
        vm.OrganAsync = [];
        var allOrgans = [];
        organService.queryOrgan().then(function (response) {
            vm.OrganAsync = response.records;
            angular.forEach(response.records, function (value) {
                allOrgans.push(value.id);
            });
        });
        vm.onSelectCallbackOrgan = function (item) {
            vm.eventResult = {model: item};
            vm.seletOrgan.id = vm.eventResult.model.id;
        };
        vm.seletOrgan = {
            id: undefined
        };
        //派出所信息
        var selectPolice = [];//派出所信息
        vm.policeAsync = [];
        var allPolices = [];
        policeService.queryPolice().then(function (response) {
            angular.forEach(response.records, function (value,index) {
                vm.policeAsync.push(value);
                vm.policeAsync[index].name = value.stationName;
                allPolices.push(value.id);
            });
        });
        vm.onSelectCallbackPolice = function (item) {
            vm.eventResult = {model: item};
            vm.seletPolice.id = vm.eventResult.model.id;
        };
        vm.seletPolice = {
            id: undefined
        };
        /*业态类型选择-------------------------------------------------*/
        vm.BusTypeAsync = [];
        var allBusTypes = [];
        busTypeService.queryBusType().then(function (response) {
            vm.BusTypeAsync = response.records;
            angular.forEach(response.records, function (value,index) {
                vm.BusTypeAsync[index].name = value.genrename;
                allBusTypes.push(value.id);
            });
        });
        vm.onSelectCallbackBusType = function (item) {
            vm.eventResult = {model: item};
            vm.selectBusType.id = vm.eventResult.model.id;
            vm.selectBusType.name = vm.eventResult.model.name;
        };
        vm.selectBusType = {
            id: undefined
        };
        /*社区信息-------------------------------------------------*/
        vm.CommunityAsync = [];
        var allCommunityes = [];
        communityService.queryCommunity().then(function (response) {
            vm.CommunityAsync = response.records;
            angular.forEach(response.records, function (value,index) {
                vm.CommunityAsync[index].name = value.name;
                allCommunityes.push(value.id);
            });
        });
        vm.onSelectCallbackCommunity = function (item) {
            vm.eventResult = {model: item};
            vm.selectCommunity.id = vm.eventResult.model.id;
            vm.selectCommunity.name = vm.eventResult.model.name;
        };
        vm.selectCommunity = {
            id: undefined
        };
        /*硬件厂商-------------------------------------------------*/
        vm.HardwareyAsync = [];
        var allhardwares = [];
        organService.queryOrgan().then(function (response) {
            vm.HardwareyAsync = response.records;
            angular.forEach(response.records, function (value) {
                allhardwares.push(value.id);
            });
        });
        vm.onSelectCallbackHardware = function (item) {
            vm.eventResult = {model: item};
            vm.seletHardware.id = vm.eventResult.model.id;
        };
        vm.seletHardware = {
            id: undefined
        };
        /*软件厂商-------------------------------------------------*/
        vm.SoftwareAsync = [];
        var allsoftwares = [];
        organService.queryOrgan().then(function (response) {
            vm.SoftwareAsync = response.records;
            angular.forEach(response.records, function (value) {
                allsoftwares.push(value.id);
            });
        });
        vm.onSelectCallbackSoftware = function (item) {
            vm.eventResult = {model: item};
            vm.seletSoftware.id = vm.eventResult.model.id;
        };
        vm.seletSoftware = {
            id: undefined
        };
        vm.parking = {
            parklotid: 0,
            name: "",
            address: "",
            city_code: "",
            longitude: 0.00,
            latitude: 0.00,
            price: "",
            parking_space_total: ""
        };
        vm.getCurrentPark =  getCurrentPark;
        vm.getCurrentPark();
        function getCurrentPark() {
            $timeout(function () {
                vm.parking = vm.currentPark = currentClickPark.getPark();
            }, 500);
        };
        // 点击确认修改停车场的操作
        vm.modifyParking = function () {
            vm.parking.region = vm.selectRegion.id;
            vm.parking.placetype = vm.seletTown.id;
            vm.parking.manage_company = vm.seletOrgan.id;
            vm.parking.owner = vm.seletOrganman.id;
            vm.parking.policestationid =  vm.seletPolice.id;
            vm.parking.businessid = vm.selectBusType.id;
            vm.parking.community = vm.selectCommunity.id;
            vm.parking.hardware = vm.seletHardware.id;
            vm.parking.software = vm.seletSoftware.id;
            ManageParkingService.modifyParking(vm.parking.id,vm.parking.name,vm.parking.address,vm.parking.city_code,vm.parking.price,vm.parking.parking_space_total,vm.parking.owner,vm.parking.acreage,vm.parking.chargetype,vm.parking.has_internet,vm.parking.is_entrusted,vm.parking.is_plate_rec,vm.parking.is3rd,vm.parking.is_active,vm.parking.placetype,vm.parking.zonename,vm.parking.region,vm.parking.manage_company,vm.parking.databasever,vm.parking.osver,vm.parking.hardwarever,vm.parking.softwarever,vm.parking.description,vm.parking.policestationid,vm.parking.businessid,vm.parking.community,vm.parking.hardware,vm.parking.software).then(function (response) {
                if (response.status === 0) {
                    logger.success('修改成功'+vm.parking.name+'停车场：','操作成功');
                    $location.path('/app/parking');
                }else if(response.status === 10002 ){
                    logger.error('添加失败' + '"' + vm.parking.name + '"' + '失败!', '缺少必填字段！');
                }else {
                    logger.error('添加失败');
                }
            });
        };
        // 返回上一层
        vm.backToPrevious = function () {
            $location.path('/app/parking');
        };
    }
})();
/**
 * account-balance.controller.js
 * @author: huangxiang
 * @create 2017-03-20 11:17
 * @description: 对账模块配置及初始化
 */
(function(){


    angular.module('app.bill')
        .controller('AccountBalanceController',AccountBalanceController);
    
    AccountBalanceController.$inject = ['OnlineBill','ManageParkingService','$scope','DTColumnDefBuilder','datatablesOptions','logger'];
    'use strict';
    function AccountBalanceController(OnlineBill,ManageParkingService,$scope,DTColumnDefBuilder,datatablesOptions,logger) {
        var vm = this;
        vm.queryAccountBalances = queryAccountBalances;
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;

        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }

        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }

        function startDateBeforeRender($dates) {
            if (vm.dateRangeEnd) {
                var activeDate = moment(vm.dateRangeEnd);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }

        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }

        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        /*时间日历设置------------------------------------------------*/

        /*停车场选择-------------------------------------------------*/
        vm.disabled = undefined;
        vm.searchEnabled = undefined;

        vm.setInputFocus = function () {
            $scope.$broadcast('UiselectDemo1');
        };
        vm.enable = function () {
            vm.disabled = false;
        };

        vm.disabled = function () {
            vm.disabled = true;
        };

        vm.enableSearch = function () {
            vm.searchEnabled = true;
        };

        vm.disableSearch = function () {
            vm.searchEnabled = false;
        };

        vm.someGroupFn = function (item) {

            if (item.name[0] >= 'A' && item.name[0] <= 'M')
                return 'From A - M';

            if (item.name[0] >= 'N' && item.name[0] <= 'Z')
                return 'From N - Z';

        };

        vm.firstLetterGroupFn = function (item) {
            return item.name[0];
        };

        vm.reverseOrderFilterFn = function (groups) {
            return groups.reverse();
        };
        vm.parkingAsync = {selected: 'wladimir@email.com'};
        vm.parkingAsync = [];

        var allParkLots = [];

        ManageParkingService.queryParking().then(function (response) {
            vm.parkingAsync = response.parking_lots;
            angular.forEach(response.parking_lots, function (value) {
                allParkLots.push(value.id);
            });
        });

        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
        };

        // 搜索框设置
        vm.menuState = {
            show: false
        };
        vm.toggleMenu = function () {
            vm.menuState.show = !vm.menuState.show;
        };


        // 获取表格设置
        vm.dtOptions = datatablesOptions.getDatatableOption();
        // 表格列设置
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5).withClass('text-danger'),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8),
            DTColumnDefBuilder.newColumnDef(9),
            DTColumnDefBuilder.newColumnDef(10),
            DTColumnDefBuilder.newColumnDef(11)
        ];

        vm.dtColumnDefs2 = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1).withClass('text-danger'),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4)
        ];

        /*停车场选择-------------------------------------------------*/
        // 设置选择时间下拉属性
        vm.timeSlot = [
            {name: '一周',time:604800000},
            {name: '一个月',time:2592000000}
        ];
        
        function queryAccountBalances() {
            vm.currentDate = new Date();
            vm.weekDayTime = vm.currentDate.getTime() - vm.selectTime.time;
            OnlineBill.queryAccountBalance(moment(new Date(new Date(vm.weekDayTime))).format('YYYY-MM-DD'), moment(new Date(new Date().getTime()+86400000)).format('YYYY-MM-DD'),vm.eventResult.model.id).then(function (response) {
                console.log(response.status);
                if(response.status === 0){
                    vm.journalaccount = response.journalaccount;
                    vm.abreconcile = response.abreconcile;
                } else if(response.status === 40009){
                    logger.info('当前查询条件下没有账单数据!!请重新选择条件查询！',response.detail,'查找失败');
                } else if(response.status === 10003 || response.status === 500){
                    logger.error('服务器或数据库发生异常！请联系管理员！',response.detail,'查找失败');
                }

            });
        }
    }
})();
/**
 * Created by huangxiang  on 2016/11/28 0028.
 * @author: huangxiang
 * Module: bill.offline.controller.js
 * feature: 停车场线下缴费账单controller
 */
(function () {
    angular.module('app.bill')
        .controller('OfflineBillDetailController', OfflineBillDetailController);

    OfflineBillDetailController.$inject = ['$scope', 'ManageParkingService', 'i18nService', 'ParkingBill', 'UiGridOptions', 'logger','uiGridConstants','uiGridGroupingConstants','$timeout'];

    'use strict';
    function OfflineBillDetailController($scope, ManageParkingService, i18nService, ParkingBill, UiGridOptions, logger,uiGridConstants,uiGridGroupingConstants,$timeout) {
        var vm = this;

        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;

        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }

        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }

        function startDateBeforeRender($dates) {
            if (vm.dateRangeEnd) {
                var activeDate = moment(vm.dateRangeEnd);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }

        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');

                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }

        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        /*时间日历设置------------------------------------------------*/

        /*停车场选择-------------------------------------------------*/
        vm.disabled = undefined;
        vm.searchEnabled = undefined;

        vm.setInputFocus = function () {
            $scope.$broadcast('UiselectDemo1');
        };
        vm.enable = function () {
            vm.disabled = false;
        };

        vm.disabled = function () {
            vm.disabled = true;
        };

        vm.enableSearch = function () {
            vm.searchEnabled = true;
        };

        vm.disableSearch = function () {
            vm.searchEnabled = false;
        };

        vm.someGroupFn = function (item) {

            if (item.name[0] >= 'A' && item.name[0] <= 'M')
                return 'From A - M';

            if (item.name[0] >= 'N' && item.name[0] <= 'Z')
                return 'From N - Z';

        };

        vm.firstLetterGroupFn = function (item) {
            return item.name[0];
        };

        vm.reverseOrderFilterFn = function (groups) {
            return groups.reverse();
        };
        vm.parkingAsync = {selected: 'wladimir@email.com'};
        vm.parkingAsync = [];

        var allParkLots = [];

        ManageParkingService.queryParking().then(function (response) {
            vm.parkingAsync = response.parking_lots;
            angular.forEach(response.parking_lots, function (value) {
                allParkLots.push(value.id);
            });
        });

        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
        };

        // 搜索框设置
        vm.menuState = {
            show: false
        };
        vm.toggleMenu = function () {
            vm.menuState.show = !vm.menuState.show;
        };

        /*停车场选择-------------------------------------------------*/
        //uiGridConstants.aggregationTypes.sum

        i18nService.setCurrentLang('zh-cn');
        vm.gridOptions = UiGridOptions.getUiGridOption();
        vm.gridOptions.enablePaginationControls = true;
        // vm.gridOptions.useExternalPagination = true;
        vm.paginationPageSizes = [100, 150, 200];
        vm.paginationPageSize = 100;
        vm.gridOptions.data = [];
        vm.gridOptions.columnDefs = [
            {field: 'id', displayName: '停车场编号', headerCellClass: 'grid-align', cellClass: 'grid-align'},
            {field: 'payment_time', displayName: '缴费时间', headerCellClass: 'grid-align', cellClass: 'grid-align'},
            {field: 'plate_number', displayName: '车牌号码', headerCellClass: 'grid-align', cellClass: 'grid-align'},
            {field: 'parklot', displayName: '缴费停车场', headerCellClass: 'grid-align', cellClass: 'grid-align'},
            {
                field: 'amount',
                displayName: '缴费金额',
                cellTemplate: '<div class="ui-grid-cell-contents"><span>{{COL_FIELD/100}} 元</span></div>',
                footerCellTemplate: '<div class="ui-grid-cell-contents" style="background-color: Red;color: White">费用合计：{{ vm.totalfee }}</div>',
                // headerCellClass: 'grid-align', cellClass: 'grid-align',
                aggregationType:uiGridConstants.aggregationTypes.sum/100+'元', treeAggregationType: uiGridGroupingConstants.aggregation.sum/100+'元'
            },
            {
                name: '操作',
                cellTemplate: '<button class="btn btn-link btn-small" ng-click="grid.appScope.showMe()">查看详情</button>',
                headerCellClass: 'grid-align',
                cellClass: 'grid-align'
            }
        ];
        vm.totalServerItems = 0;

        /*初始化停车场详情*/
        vm.InitBillDetail = function () {
            vm.currentDate = new Date();
            vm.weekDayTime = vm.currentDate.getTime() - 604800000;

            ParkingBill.queryOfflineBill(moment(new Date(new Date(vm.currentDate.getTime() - 604800000))).format('YYYY-MM-DD'), moment(new Date()).format('YYYY-MM-DD'), allParkLots).then(function (response) {
                if (response.status === 0) {
                    vm.gridOptions.data = response.records;
                    vm.appBills = response.records;
                    vm.totalfee = response.totalfee;
                } else if (response.status === 10003) {
                    logger.error('查询失败', response.detail, '服务器获取数据失败！请联系相关人员处理！');
                } else if (response.status === 40003) {
                    logger.error('查询失败', response.detail, '没有该停车场');
                } else if (response.status === 40008) {
                    logger.error('查询失败', response.detail, '没有缴费记录');
                }
            });
        };

        /*搜索查询停车场账单详情*/
        vm.SearchBillDetail = function () {
            ParkingBill.queryOfflineBill(moment(vm.dateRangeStart).format('YYYY-MM-DD'), moment(vm.dateRangeEnd).format('YYYY-MM-DD'), vm.eventResult.model.id).then(function (response) {
                if (response.status === 0) {
                    vm.gridOptions.data = response.records;
                } else if (response.status === 10003) {
                    logger.error('查询失败', response.detail, '服务器获取数据失败！请联系相关人员处理！');
                } else if (response.status === 40003) {
                    logger.error('查询失败', response.detail, '没有该停车场');
                } else if (response.status === 40008) {
                    logger.error('查询失败', response.detail, '没有缴费记录');
                }
            });
        };

        $timeout(function () {
            vm.InitBillDetail();
        },1000);
    }
})();
/**
 * Created by huangxiang  on 2016/11/28 0028.
 * @author:
 * Module:
 * feature:
 */
(function () {
    angular.module('app.bill')
        .factory('ParkingBill', ParkingBill);

    ParkingBill.$inject = ['$http', 'URL_SEED'];

    'use strict';
    function ParkingBill($http, URL_SEED) {
        var OFFLINE_BILL_URL = URL_SEED.API_URL + 'operation/finance/';

        return {
            queryOfflineBill: queryOfflineBill
        };

        function queryOfflineBill(startdate, enddate, parklotids) {
            return $http({
                method: 'GET',
                url: OFFLINE_BILL_URL,
                params: {
                    parklotids: parklotids.toString(),
                    startdate: startdate,
                    enddate: enddate
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
    }
})();
/**
 * bill.online.controller.js
 * @author: huangxiang
 * @create 2016-12-29 10:43
 */
(function () {
    angular.module('app.bill')
        .controller('OnlineBillController', OnlineBillController);

    OnlineBillController.$inject = ['OnlineBill', '$scope', 'i18nService', 'ManageParkingService', 'UiGridOptions', '$document'];
    'use strict';
    function OnlineBillController(OnlineBill, $scope, i18nService, ManageParkingService, UiGridOptions, $document) {

        var vm = this;

        /*停车场选择-------------------------------------------------*/
        vm.disabled = undefined;
        vm.searchEnabled = undefined;

        vm.setInputFocus = function () {
            $scope.$broadcast('UiselectDemo1');
        };
        vm.enable = function () {
            vm.disabled = false;
        };

        vm.disabled = function () {
            vm.disabled = true;
        };

        vm.enableSearch = function () {
            vm.searchEnabled = true;
        };

        vm.disableSearch = function () {
            vm.searchEnabled = false;
        };

        vm.someGroupFn = function (item) {

            if (item.name[0] >= 'A' && item.name[0] <= 'M')
                return 'From A - M';

            if (item.name[0] >= 'N' && item.name[0] <= 'Z')
                return 'From N - Z';

        };

        vm.firstLetterGroupFn = function (item) {
            return item.name[0];
        };

        vm.reverseOrderFilterFn = function (groups) {
            return groups.reverse();
        };
        vm.parkingAsync = {selected: 'wladimir@email.com'};
        vm.parkingAsync = [];

        var allParkLots = [];


        ManageParkingService.queryParking().then(function (response) {
            vm.parkingAsync = response.parking_lots;
            angular.forEach(response.parking_lots, function (value) {
                allParkLots.push(value.id);
            });
        });

        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.seletPark.id = vm.eventResult.model.id;
        };

        vm.seletPark = {
            id: undefined
        };
        /*停车场选择-------------------------------------------------*/

        i18nService.setCurrentLang('zh-cn');
        vm.gridOptions = UiGridOptions.getUiGridOption();
        vm.gridOptions.enablePaginationControls = false;
        vm.gridOptions.data = [];
        vm.gridOptions.columnDefs = [
            {field: 'id', displayName: '序号'},
            {field: 'user', displayName: '用户编号'},
            {field: 'out_trade_no', displayName: '流水号'},
            {
                field: 'created_time',
                displayName: '创建时间'
            },
            {field: 'paid', displayName: '支付状态'},
            {field: 'payment_channel', displayName: '支付方式'},
            {
                field: 'amount',
                displayName: '缴费金额',
                cellTemplate: '<div class="ui-grid-cell-contents"><span>{{COL_FIELD/100}} 元</span></div>'
            },
            {
                field: 'balance',
                displayName: '账户余额',
                cellTemplate: '<div class="ui-grid-cell-contents"><span>{{COL_FIELD/100}} 元</span></div>'
            },
            {field: 'order_desc', displayName: '备注'}
        ];
        vm.totalServerItems = 0;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            maxid: 0,
            minid: 0,
            pageSize: 50,
            pageNumber: 0,
            next_start_index: 0,
            previous_start_index: 0,
            totalItems: null
        };
        /*加载上一页*/
        vm.loadPreviousPage = function () {
            if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                alert('已经到第一页！');
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
            } else {
                OnlineBill.queryOnlineBill(vm.pagination.previous_start_index, vm.pagination.pageSize, vm.pagination.pagetype.pervious_page, vm.seletPark.id, vm.search_plate_number).then(function (response) {
                    vm.gridOptions.data = response.records;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.maxid = response.maxid;
                    if (vm.gridOptions.data.length < 50) {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }

        };

        /*加载下一页*/
        vm.loadNextPage = function () {
            if (vm.pagination.next_start_index <= vm.pagination.minid || vm.gridOptions.data.length < 50) {
                alert('已经到最后一页！');
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
            } else {
                OnlineBill.queryOnlineBill(vm.pagination.next_start_index, vm.pagination.pageSize, vm.pagination.pagetype.next_page, vm.seletPark.id, vm.search_plate_number).then(function (response) {
                    vm.gridOptions.data = response.records;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.minid = response.minid;
                    if (vm.gridOptions.data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });

            }
        };

        /*加载首页*/
        vm.loadFistPage = function () {
            vm.pagination.next_start_index = 0;
            vm.pagination.maxid = 0;
            vm.pagination.minid = 0;
            OnlineBill.readHome(vm.seletPark.id, vm.search_plate_number).then(function (response) {
                if (response.status == 0 && response.records.length != 0) {
                    vm.gridOptions.data = response.records;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.maxid = response.maxid;
                    vm.pagination.pageNumber = 1;
                    // 如果记录少于20条，则灰掉所有翻页按钮
                    if (vm.gridOptions.data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        // 否则只灰掉上一页按钮，首页留作刷新用
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status == 10003) {
                    alert('查找停车记录错误！！！请检查服务器数据库！');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                } else {
                    alert('暂时没有停车入场记录！！');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }

            });
        };
        /*加载末页*/
        vm.loadLastPage = function () {
            OnlineBill.readLastPage(vm.seletPark.id, vm.search_plate_number).then(function (response) {
                vm.gridOptions.data = response.records;
                vm.pagination.minid = response.minid;
                vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                vm.pagination.previous_start_index = response.records[0].id;
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
            });
        };
        vm.loadFistPage();
        vm.menuState = {
            show: false
        };
        vm.toggleMenu = function () {
            vm.menuState.show = !vm.menuState.show;
        };

        /*查找指定停车场或者车牌号的数据*/
        vm.searchRecords = function () {
            vm.pagination.next_start_index = 0;
            OnlineBill.queryOnlineBill(vm.pagination.start_index, vm.pagination.pageSize, vm.pagination.pagetype.next_page, vm.eventResult.model.id, vm.search_plate_number).then(function (response) {
                if (response.status == 0 && response.records.length != 0) {
                    vm.gridOptions.data = response.records;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.maxid = response.maxid;
                    if (vm.gridOptions.data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status == 40006) {
                    alert('没有找到相关入场记录！');
                } else {
                    alert('没有找到相关入场记录！');
                }
            });
        };
        /*清除查找条件*/
        vm.clearAndRefresh = function () {
            vm.eventResult.model = undefined;
            vm.parkingAsync.selected = undefined;
            vm.seletPark.id = undefined;
            vm.search_plate_number = undefined;
            vm.loadFistPage();
        };
    }
})();
/**
 * bill.online.service.js.js
 * @author: huangxiang
 * @create 2016-12-29 16:01
 */
(function () {
    angular.module('app.bill')
        .factory('OnlineBill', OnlineBill);

    OnlineBill.$inject = ['$http', 'URL_SEED'];
    'use strict';
    /**
     * @jsdoc function
     * @param $http
     * @param URL_SEED
     * @returns {{queryOnlineBill: queryOnlineBill, queryBillDetail: queryBillDetail, readHome: readHome, readLastPage: readLastPage}}
     * @constructor
     */
    function OnlineBill($http, URL_SEED) {

        var ONLINE_BIll_URL = URL_SEED.API_URL + 'billing/onlinebill/';

        var ACCOUNT_BALANCE_URL = URL_SEED.API_URL + 'operation/reconcile/';

        return {
            queryOnlineBill: queryOnlineBill,  // 查询线上缴费记录，根据参数确定是上一页还是下一页
            queryBillDetail: queryBillDetail, // 查询单个缴费记录详情
            readHome: readHome, // 查询首页缴费记录
            readLastPage: readLastPage, // 查询尾页缴费记录
            queryAccountBalance: queryAccountBalance // 查询对账单
        };

        /**
         * @jsdoc function 缴费账单与后台通信的service
         * @param max_result
         * @param pagetype
         * @param parking_lot_id
         * @param plate_number
         * @param start_index
         * @returns {*}
         */
        function queryOnlineBill(start_index, max_result, pagetype, parking_lot_id, plate_number) {
            return $http({
                method: 'GET',
                url: ONLINE_BIll_URL,
                params: {
                    querytype: 'all',
                    start_index: start_index,
                    max_results: max_result,
                    pagedirect: pagetype,
                    parking_lot_id: parking_lot_id,
                    plate_number: plate_number
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

        /**
         * @jsdoc 查询单条记录的详情
         * @param journalid 记录的id
         * @returns {*}
         */
        function queryBillDetail(journalid) {
            return $http({
                method: 'GET',
                url: ONLINE_BIll_URL,
                params: {
                    querytype: 'one',
                    journalid: journalid
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

        /**
         * @jsdoc function 查询首页缴费记录
         * @param parking_lot_id
         * @param plate_number
         * @returns {*}
         */
        function readHome(parking_lot_id, plate_number) {
            return $http({
                method: 'GET',
                url: ONLINE_BIll_URL,
                params: {
                    max_results: 50,
                    start_index: 0,
                    parking_lot_id: parking_lot_id,
                    plate_number: plate_number
                }
            }).then(function (response) {
                return response.data;
            });
        }

        /**
         * @jsdoc function 查询尾页缴费记录
         * @param parking_lot_id
         * @param plate_number
         * @returns {*}
         */
        function readLastPage(parking_lot_id, plate_number) {
            return $http({
                method: 'GET',
                url: ONLINE_BIll_URL,
                params: {
                    max_results: 50,
                    start_index: -1,
                    parking_lot_id: parking_lot_id,
                    plate_number: plate_number
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

        function queryAccountBalance(min_extime,max_extime,parklotid) {

            return $http({
                method: 'GET',
                url: ACCOUNT_BALANCE_URL,
                params:{
                    min_extime:min_extime,
                    max_extime:max_extime,
                    parklotids:parklotid
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

    }
})();
//! moment.js locale configuration
//! locale : Chinese (China) [zh-cn]
//! author : suupic : https://github.com/suupic
//! author : Zeno Zeng : https://github.com/zenozeng

;(function (global, factory) {
   typeof exports === 'object' && typeof module !== 'undefined'
       && typeof require === 'function' ? factory(require('../moment')) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, function (moment) { 'use strict';


    var zh_cn = moment.defineLocale('zh-cn', {
        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
        longDateFormat : {
            LT : 'Ah点mm分',
            LTS : 'Ah点m分s秒',
            L : 'YYYY-MM-DD',
            LL : 'YYYY年MMMD日',
            LLL : 'YYYY年MMMD日Ah点mm分',
            LLLL : 'YYYY年MMMD日ddddAh点mm分',
            l : 'YYYY-MM-DD',
            ll : 'YYYY年MMMD日',
            lll : 'YYYY年MMMD日Ah点mm分',
            llll : 'YYYY年MMMD日ddddAh点mm分'
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' ||
                    meridiem === '上午') {
                return hour;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            } else {
                // '中午'
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar : {
            sameDay : function () {
                return this.minutes() === 0 ? '[今天]Ah[点整]' : '[今天]LT';
            },
            nextDay : function () {
                return this.minutes() === 0 ? '[明天]Ah[点整]' : '[明天]LT';
            },
            lastDay : function () {
                return this.minutes() === 0 ? '[昨天]Ah[点整]' : '[昨天]LT';
            },
            nextWeek : function () {
                var startOfWeek, prefix;
                startOfWeek = moment().startOf('week');
                prefix = this.diff(startOfWeek, 'days') >= 7 ? '[下]' : '[本]';
                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
            },
            lastWeek : function () {
                var startOfWeek, prefix;
                startOfWeek = moment().startOf('week');
                prefix = this.unix() < startOfWeek.unix()  ? '[上]' : '[本]';
                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
            },
            sameElse : 'LL'
        },
        ordinalParse: /\d{1,2}(日|月|周)/,
        ordinal : function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '周';
                default:
                    return number;
            }
        },
        relativeTime : {
            future : '%s内',
            past : '%s前',
            s : '几秒',
            m : '1 分钟',
            mm : '%d 分钟',
            h : '1 小时',
            hh : '%d 小时',
            d : '1 天',
            dd : '%d 天',
            M : '1 个月',
            MM : '%d 个月',
            y : '1 年',
            yy : '%d 年'
        },
        week : {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return zh_cn;

}));
/**
 * current-park-gate.factory.js
 * @author: huangxiang
 * @create 2016-12-26 15:11
 * @feather: 当前点击的停车场入口 及 modal通用的退出方法
 */
(function () {
    angular.module('app.parking')
        .factory('currentClickParkGate', currentClickParkGate);

    currentClickParkGate.$inject = ['currentClickPark'];

    'use strict';
    /**
     * 设置/获取当前点击的parkgate以及modal的通用退出方法
     * @returns {{setParkGate: setParkGate, getParkGate: getParkGate, getGateIsDefault: getGateIsDefault, getGateTypes: getGateTypes}}
     * @param currentClickPark 存储当前点击的停车场的参数
     */
    function currentClickParkGate(currentClickPark) {

        /*定义当前停车场入口的对象模型*/
        var parkgate = {
            gateid: 0,
            gatename: '',
            isdefault: false,
            longitude: 0.0000,
            latitude: 0.0000,
            currentGateParkId: 0
        };

        /*定义停车场出入口是否为默认的常量*/
        var GateIsDefault = [{
            value: true,
            text: '是'
        }, {
            value: false,
            text: '否'
        }];

        /*定义出口类型参数:1--> 入口  2--> 出口  3-->出/入口一体*/
        var GateTypes = [
            {
                text: '出口',
                value: 2
            },
            {
                text: '入口',
                value: 1
            },
            {
                text: '出/入口',
                value: 3
            }
        ];

        /*返回相关方法*/
        return {
            setParkGate: setParkGate,
            getParkGate: getParkGate,
            getGateIsDefault: getGateIsDefault,
            getGateTypes: getGateTypes
        };

        /**
         * 设置当前停车场出口数据
         * @param cParkGate 当前点击的停车场
         */
        function setParkGate(cParkGate) {
            parkgate.gateid = cParkGate.gateid;
            parkgate.gatename = cParkGate.gatename;
            parkgate.isdefault = cParkGate.isdefault;
            parkgate.longitude = cParkGate.longitude;
            parkgate.latitude = cParkGate.latitude;
            parkgate.currentGateParkId = currentClickPark.getPark().id;
        }

        /**
         * 获取当前点击选择的停车场出入口详情
         * @returns {{gateid: number, gatename: string, isdefault: boolean, longitude: number, latitude: number, currentGateParkId: number}}
         */
        function getParkGate() {
            return parkgate;
        }

        /**
         * 获取出口是否是默认出口的常量定义
         * @returns {*[]} 返回一个数组
         */
        function getGateIsDefault() {
            return GateIsDefault;
        }

        /**
         * 获取出口类型的常量定义
         * @returns {*[]} 返回一个数组
         */
        function getGateTypes() {
            return GateTypes;
        }
    }
})();

/**
 * park.add.controller.js
 * @author: huangxiang
 * @create 2016-12-23 16:43
 */
(function () {
    angular.module('app.parking')
        .controller('AddParkController', AddParkController);
    AddParkController.$inject = ['$location', 'ManageParkingService', 'logger','regionService','townService','organService','policeService','busTypeService','communityService'];
    'use strict';
    function AddParkController($location, ManageParkingService, logger,regionService,townService,organService,policeService,busTypeService,communityService) {
        var vm = this;
        /*区域选择-------------------------------------------------*/
        vm.regiongAsync = [];
        var allRegions = [];
        regionService.queryRegion().then(function (response) {
            vm.regiongAsync = response.records;
            angular.forEach(response.records, function (value) {
                allRegions.push(value.id);
            });
        });
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.selectRegion.id = vm.eventResult.model.id;
        };
        vm.selectRegion = {
            id: undefined
        };
        /*商圈选择-------------------------------------------------*/
        vm.TownAsync = [];
        var allTowns = [];
        townService.queryTown().then(function (response) {
            vm.TownAsync = response.data;
            angular.forEach(response.data, function (value) {
                allTowns.push(value.id);
            });
        });
        vm.onSelectCallbackTown = function (item) {
            vm.eventResult = {model: item};
            vm.seletTown.id = vm.eventResult.model.id;
        };
        vm.seletTown = {
            id: undefined
        };
        //停车场所有人
        vm.OrganmanAsync = [];
        var allOrganmans = [];
        organService.queryOrgan().then(function (response) {
            vm.OrganmanAsync = response.records;
            angular.forEach(response.records, function (value) {
                allOrganmans.push(value.id);
            });
        });
        vm.onSelectCallbackOrganman = function (item) {
            vm.eventResult = {model: item};
            vm.seletOrganman.id = vm.eventResult.model.id;
        };
        vm.seletOrganman = {
            id: undefined
        };
        //运营单位
        vm.OrganAsync = [];
        var allOrgans = [];
        organService.queryOrgan().then(function (response) {
            vm.OrganAsync = response.records;
            angular.forEach(response.records, function (value) {
                allOrgans.push(value.id);
            });
        });
        vm.onSelectCallbackOrgan = function (item) {
            vm.eventResult = {model: item};
            vm.seletOrgan.id = vm.eventResult.model.id;
        };
        vm.seletOrgan = {
            id: undefined
        };
        //派出所信息
        vm.policeAsync = [];
        var allPolices = [];
        policeService.queryPolice().then(function (response) {
            angular.forEach(response.records, function (value,index) {
                vm.policeAsync.push(value);
                vm.policeAsync[index].name = value.stationName;
                allPolices.push(value.id);
            });
        });
        vm.onSelectCallbackPolice = function (item) {
            vm.eventResult = {model: item};
            vm.seletPolice.id = vm.eventResult.model.id;
        };
        vm.seletPolice = {
            id: undefined
        };
        /*业态类型选择-------------------------------------------------*/
        vm.BusTypeAsync = [];
        var allBusTypes = [];
        busTypeService.queryBusType().then(function (response) {
            vm.BusTypeAsync = response.records;
            angular.forEach(response.records, function (value,index) {
                vm.BusTypeAsync[index].name = value.genrename;
                allBusTypes.push(value.id);
            });
        });
        vm.onSelectCallbackBusType = function (item) {
            vm.eventResult = {model: item};
            vm.selectBusType.id = vm.eventResult.model.id;
            vm.selectBusType.name = vm.eventResult.model.name;
        };
        vm.selectBusType = {
            id: undefined
        };
        /*社区信息-------------------------------------------------*/
        vm.CommunityAsync = [];
        var allCommunityes = [];
        communityService.queryCommunity().then(function (response) {
            vm.CommunityAsync = response.records;
            angular.forEach(response.records, function (value,index) {
                vm.CommunityAsync[index].name = value.name;
                allCommunityes.push(value.id);
            });
        });
        vm.onSelectCallbackCommunity = function (item) {
            vm.eventResult = {model: item};
            vm.selectCommunity.id = vm.eventResult.model.id;
            vm.selectCommunity.name = vm.eventResult.model.name;
        };
        vm.selectCommunity = {
            id: undefined
        };
        /*硬件厂商-------------------------------------------------*/
        vm.HardwareyAsync = [];
        var allhardwares = [];
        organService.queryOrgan().then(function (response) {
            vm.HardwareyAsync = response.records;
            angular.forEach(response.records, function (value) {
                allhardwares.push(value.id);
            });
        });
        vm.onSelectCallbackHardware = function (item) {
            vm.eventResult = {model: item};
            vm.seletHardware.id = vm.eventResult.model.id;
        };
        vm.seletHardware = {
            id: undefined
        };
        /*软件厂商-------------------------------------------------*/
        vm.SoftwareAsync = [];
        var allsoftwares = [];
        organService.queryOrgan().then(function (response) {
            vm.SoftwareAsync = response.records;
            angular.forEach(response.records, function (value) {
                allsoftwares.push(value.id);
            });
        });
        vm.onSelectCallbackSoftware = function (item) {
            vm.eventResult = {model: item};
            vm.seletSoftware.id = vm.eventResult.model.id;
        };
        vm.seletSoftware = {
            id: undefined
        };
        vm.addParking = addParking; // 添加停车场
        vm.backToPrevious = backToPrevious; // 返回上一层菜单
        function addParking() {
            vm.parking.region = vm.selectRegion.id;
            vm.parking.placetype = vm.seletTown.id;
            vm.parking.manage_company = vm.seletOrgan.id;
            vm.parking.owner = vm.seletOrganman.id;
            vm.parking.policestationid = vm.seletPolice.id;
            vm.parking.businessid = vm.selectBusType.id;
            vm.parking.community = vm.selectCommunity.id;
            vm.parking.hardware = vm.seletHardware.id;
            vm.parking.software = vm.seletSoftware.id;
            ManageParkingService.addParking(vm.parking.name,vm.parking.address,vm.parking.city_code,vm.parking.price,vm.parking.parking_space_total,vm.parking.owner,vm.parking.acreage,vm.parking.chargetype,vm.parking.has_internet,vm.parking.is_entrusted,vm.parking.is_plate_rec,vm.parking.is3rd,vm.parking.is_active,vm.parking.placetype,vm.parking.zonename,vm.parking.region,vm.parking.manage_company,vm.parking.databasever,vm.parking.osver,vm.parking.hardwarever,vm.parking.softwarever,vm.parking.description,vm.parking.policestationid,vm.parking.businessid,vm.parking.community,vm.parking.hardware,vm.parking.software,vm.parking.type,vm.parking.is_show,vm.parking.sign).then(function (response) {
                if (response.data.status === 0) {
                    logger.success('添加成功'+'停车场：'+vm.parking.name,'操作成功');
                    $location.path('/app/parking');
                }else if (response.status === 40004) {
                    logger.error('添加失败' + '"' + vm.parking.name + '"' + '失败!', '该停车场已经存在！');
                }else if(response.data.status === 10002 ){
                    logger.error('添加失败' + '"' + vm.parking.name + '"' + '失败!', '缺少必填字段！');
                }else {
                    logger.error('添加失败');
                }
            });
        }
        function backToPrevious() {
            $location.path('/app/parking');
        }
    }
})();
/**
 * park.modal.controller.js
 * @author: huangxiang
 * @create 2016-12-23 15:52
 */
(function(){
    angular.module('app.parking')
        .controller('ParkingModalController',ParkingModalController);

    ParkingModalController.$inject = ['$uibModalInstance','ManageParkingService','currentClickPark','logger'];
    'use strict';
    function ParkingModalController($uibModalInstance,ManageParkingService,currentClickPark,logger) {
        var vm = this;
        vm.deletePark = deletePark;
        vm.cancel = cancel;

        function deletePark() {
            ManageParkingService.deleteParking(currentClickPark.getPark().id).then(function (response) {
                if(response.status === 0){
                    $uibModalInstance.close('closed');
                    logger.success('成功刪除'+currentClickPark.name,response.data,'操作成功！');
                }else {
                    logger.error('删除失败'+currentClickPark.name + '失败！！',response.data,'操作失败！');
                }
            });
        }

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
/**
 * park.model.factory.js
 * @author: huangxiang
 * @create 2016-12-23 11:32
 */
(function () {

    angular.module('app.parking')
        .factory('currentClickPark', currentClickPark);
    'use strict';
    function currentClickPark() {
        var park = {
            name: '',
            address: '',
            city_code: 0,
            longitude: 0.0000,
            latitude: 0.0000,
            price: 0,
            parking_space_total: '',
            type: '',
            identifier: 0,
            id: 0,
            image: '',
            owner:'',//停车场所有人，下拉
            acreage:'',//面积
            placetype:'',//所属商圈，下拉
            lot_type:0,//0是停车场，1充电桩
            chargetype:'',//停车收费类型，true是收费。false:免费
            has_internet:'',//是否有网络，true是有网，false：无网络
            is_entrusted:'',//True -- 委托经营, False -- 非委托经营
            is_plate_rec:'',//是否车牌识别，true:有,false:无
            is3rd:'',//是否第三方场所
            is_active:'',//是否激活
            description:'',//描述
            zonename:'',//街道名称
            region:'',//所在区编号，下拉选择
            manage_company:'',//运营单位，下拉选择
            databasever:'',//数据库版本信息
            osver:'',//操作系统版本号
            hardwarever:'',//硬件系统版本
            softwarever:'',//收费软件版本
            pol_name:'',//派出所名称
            owner_name:'',//所有人名称
            reg_name:'',//区域名称
            town_name:'',//商圈名称
            bus_name:'',
            is_show:'',//是否再App上显示图片
            sign:''//停车场签约与否
        };
        return {
            setPark: setPark,
            getPark: getPark
        };
        function setPark(cPark) {
            park.owner = cPark.owner;//停车场所有人，下拉
            park.acreage = cPark.acreage;//面积
            park.placetype = cPark.placetype;//所属商圈，下拉
            park.lot_type = cPark.lot_type;//0是停车场，1充电桩
            park.chargetype = cPark.chargetype;//停车收费类型，true是收费。false:免费
            park.has_internet = cPark.has_internet;//是否有网络，true是有网，false：无网络
            park.is_entrusted = cPark.is_entrusted;//True -- 委托经营, False -- 非委托经营
            park.is_plate_rec = cPark.is_plate_rec;//是否车牌识别，true:有,false:无
            park.is3rd = cPark.is3rd;//是否第三方场所
            park.is_active = cPark.is_active;//是否激活
            park.description = cPark.description;//描述
            park.zonename = cPark.zonename;//街道名称
            park.region = cPark.region;//所在区编号，下拉选择
            park.manage_company = cPark.manage_company;//运营单位，下拉选择
            park.databasever = cPark.databasever;//数据库版本信息
            park.osver = cPark.osver;//操作系统版本号
            park.hardwarever = cPark.hardwarever;//硬件系统版本
            park.softwarever = cPark.softwarever;//收费软件版本
            park.name = cPark.name;
            park.address = cPark.address;
            park.city_code = cPark.city_code;
            park.longitude = cPark.longitude;
            park.latitude = cPark.latitude;
            park.price = cPark.price;
            park.parking_space_total = cPark.parking_space_total;
            park.type = cPark.type;
            park.identifier = cPark.identifier;
            park.id = cPark.id;
            park.image = cPark.image;
            park.pol_name = cPark.pol_name;
            park.owner_name = cPark.owner_name;
            park.reg_name = cPark.reg_name;
            park.town_name = cPark.town_name;
            park.bus_name = cPark.bus_name;
            park.is_show= cPark.is_show;
            park.sign= cPark.sign;
        }
        function getPark() {
            return park;
        }
    }
})();
/**
 * parkgate.add.controller.js
 * @author: huangxiang
 * @create 2016-12-23 20:13
 */
(function () {
    angular.module('app.parking')
        .controller('AddParkGateController', AddParkGateController);

    AddParkGateController.$inject = ['$uibModalInstance', 'ManageParkingService', 'logger', 'currentClickParkGate','currentClickPark'];
    'use strict';
    function AddParkGateController($uibModalInstance, ManageParkingService, logger, currentClickParkGate,currentClickPark) {
        var vm = this;
        /*获取出口是否默认的常量数组*/
        vm.ParkGateItems = currentClickParkGate.getGateIsDefault();
        /*获取出口类型数组*/
        vm.ParkGateType = currentClickParkGate.getGateTypes();
        vm.ParkGate = []; // 获取当前停车场入口的信息
        vm.ParkGate.currentGateParkId = currentClickPark.getPark().id; // 获取当前停车场的id
        vm.confirmAddGate = confirmAddGate; // 确定添加停车场入口function
        vm.cancel = cancel; // 关闭modal function
        /**
         * 确认添加停车场入口
         */
        function confirmAddGate() {
            ManageParkingService.addGate(vm.ParkGate.gatename, vm.ParkGate.isdefault.value, vm.ParkGate.gatetype.value, vm.ParkGate.longitude, vm.ParkGate.latitude, vm.ParkGate.currentGateParkId).then(function (response) {

                if (response.status === 0) {
                    logger.success('成功添加入口' + '"' + vm.ParkGate.gatename + '"' + '!', response.data, '操作成功！');
                    vm.cancel();
                    $state.reload();
                } else if (response.status === 400012) {
                    logger.error('添加入口' + '"' + vm.ParkGate.gatename + '"' + '失败!', response.data, '操作失败！');
                }else if (response.status === 400014) {
                    logger.error('添加入口' + '"' + vm.ParkGate.gatename + '"' + '失败!', response.data, '重复的入口坐标！');
                }  else if (response.status === 10003 || response.status === 500) {
                    logger.error('添加入口' + '"' + vm.ParkGate.gatename + '"' + '失败!数据库错误', response.data, '操作失败！');
                } else if(response.status ===10002){
                    logger.error('添加入口' + '"' + vm.ParkGate.gatename + '"' + '失败!请提供一个有效的停车场ID', response.data, '操作失败！');
                }
            });
        }

        /**
         * 关闭modal
         */
        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
(function () {
    angular.module('app.parking')
        .controller('DeleteParkGateController', DeleteParkGateController);

    DeleteParkGateController.$inject = ['ManageParkingService', 'logger', '$state','$uibModalInstance','currentClickParkGate'];
    'use strict';
    function DeleteParkGateController(ManageParkingService, logger, $state,$uibModalInstance,currentClickParkGate) {
        var vm = this;
        vm.confirmDeleteGate = confirmDeleteGate;
        vm.cancel = cancel;
        var currentGateId =currentClickParkGate.getParkGate().gateid;
        function confirmDeleteGate() {
            ManageParkingService.deleteGate(currentGateId).then(function (response) {
                if (response.status === 0) {
                    logger.success('你已成功删除停车场入口!!', response.data, '操作成功');
                    vm.cancel();
                    $state.reload();
                } else if (response.status === 400010 || response.status === 40011) {
                    logger.error('删除停车场入口失败！', response.data, '操作失败');
                } else if (response.status === 10003 || response.status === 500) {
                    logger.error('删除停车场入口失败！ ', response.data, '操作失败');
                }
            });
        }

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
/**
 * parkgate.modify.controller.js
 * @author: huangxiang
 * @create 2016-12-23 20:14
 */
(function () {
    angular.module('app.parking')
        .controller('ModifyParkGateController', ModifyParkGateController);

    ModifyParkGateController.$inject = ['ManageParkingService', 'logger', '$state', '$uibModalInstance', 'currentClickParkGate'];
    'use strict';
    /**
     * 修改停车场入口
     * @param ManageParkingService 与服务器交互的service
     * @param logger $toastr 和 $log 的合并25447\
     * @param $state
     * @param $uibModalInstance
     * @param currentClickParkGate
     * @constructor
     */
    function ModifyParkGateController(ManageParkingService, logger, $state, $uibModalInstance, currentClickParkGate) {
        var vm = this;
        vm.confirmModifyGate = confirmModifyGate; // 确认修改停车场
        vm.cancel = cancel; // 退出modal
        vm.currentParkGate = currentClickParkGate.getParkGate(); // 获取当前停车场入口的信息

        /*获取出口是否默认的常量数组*/
        vm.ParkGateItems = currentClickParkGate.getGateIsDefault();

        /*获取出口类型数组*/
        vm.ParkGateType = currentClickParkGate.getGateTypes();

        function confirmModifyGate() {
            ManageParkingService.modifyGate(vm.currentParkGate.gateid, vm.currentParkGate.gatename, vm.currentParkGate.isdefault.value, vm.currentParkGate.latitude, vm.currentParkGate.longitude, vm.currentParkGate.currentGateParkId).then(function (response) {
                if (response.status === 0) {
                    logger.success('你已成功修改停车场入口' + '"' + vm.currentParkGate.gatename + '"!', response.data, '操作成功');
                    vm.cancel();
                    $state.reload();
                } else if (response.status === 400012) {
                    logger.error('修改入口' + '"' + vm.currentParkGate.gatename + '失败"!', response.data, '操作失败');
                } else if (response.status === 10003 || response.status === 500) {
                    logger.error('修改停车场入口' + '"' + vm.currentParkGate.gatename + '失败"!', response.data, '操作失败');
                } else if (response.status === 10002) {
                    logger.error('修改停车场入口' + '"' + vm.currentParkGate.gatename + '失败"!', response.detail, '操作失败');
                }
            });
        }

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
/**
 * park-gate-query.controller.js
 * @author huangxiang
 * @create 2016-12-23 17:47
 * @feather 停车场入口controller,表格初始化设置及相关方法
 */
(function () {
    angular.module('app.parking')
        .controller('GateModalController', GateModalController);

    GateModalController.$inject = ['$uibModalInstance', 'ManageParkingService', '$uibModal', 'currentClickPark', 'currentClickParkGate'];

    'use strict';
    /**
     * @jsdoc controller
     * @param $uibModalInstance
     * @param ManageParkingService
     * @param $uibModal
     * @param currentClickPark
     * @param currentClickParkGate
     * @constructor
     */
    function GateModalController($uibModalInstance, ManageParkingService, $uibModal, currentClickPark, currentClickParkGate) {
        var vm = this;
        var modalInstance = undefined;
        vm.queryParkGate = queryParkGate; // 查询停车场入口
        vm.cancel = cancel; // 退出modal
        vm.addParkGate = addParkGate;  // 添加停车场入口
        vm.modifyParkGate = modifyParkGate; // 修改停车场入口
        vm.deleteParkGate = deleteParkGate; // 删除停车场入口

        vm.queryParkGate(); // 进入modal后初始化停车场入口数据

        /**
         * @jsdoc function 查询停车场入口数据
         */
        function queryParkGate() {
            ManageParkingService.queryGate(currentClickPark.getPark().id).then(function (response) {
                vm.parkgate = response.parkgate;
            });
        }

        /**
         * @jsdoc function 关闭modal
         */
        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }

        /**
         * @jsdoc function 打开添加停车场入口的modal
         */
        function addParkGate() {
            modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: '/park/app/views/partials/add-park-gate-modal.html',
                controller: 'AddParkGateController',
                controllerAs: 'vm'
            });

            modalInstance.result.then(function () {
                vm.queryParkGate();
            });
        }

        /**
         * @jsdoc function 打开修改停车场入口的modal
         * @param cParkGate
         */
        function modifyParkGate(cParkGate) {
            currentClickParkGate.setParkGate(cParkGate);
            modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: '/park/app/views/partials/modify-park-gate-modal.html',
                controller: 'ModifyParkGateController',
                controllerAs: 'vm'
            });

            modalInstance.result.then(function () {
                vm.queryParkGate();
            });
        }

        /**
         * @jsdoc function 打开删除停车场的modal
         */
        function deleteParkGate(cParkGate) {
            currentClickParkGate.setParkGate(cParkGate);
            modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: '/park/app/views/partials/delete-park-gate-modal.html',
                controller: 'DeleteParkGateController',
                controllerAs: 'vm'
            });

            modalInstance.result.then(function () {
                vm.queryParkGate();
            });
        }
    }
})();
(function () {
    angular.module('app.parking')
        .controller('ParkManageController', ParkManageController);
    ParkManageController.$inject = ['$location', 'ManageParkingService', 'DTColumnDefBuilder', 'datatablesOptions', 'currentClickPark', '$uibModal','$document','regionService','busTypeService','URL_SEED'];
    'use strict';
    function ParkManageController($location, ManageParkingService, DTColumnDefBuilder, datatablesOptions, currentClickPark, $uibModal,$document,regionService,busTypeService,URL_SEED) {
        var vm = this;
        vm.picture_no='';vm.lat_long_no='';vm.price_no='';vm.placetype_no='';vm.other_platform='';
        vm.queryBaiDuMapParking = queryBaiDuMapParking;
        vm.queryBaiDuMapParking();
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            next_start_index:0,
            previous_start_index:0,
            maxid: 0,
            minid: 0
        };
        vm.number={
            start:0,
            next:0
        };
        vm.regiongAsync = [];
        var allRegions = [];
        regionService.queryRegion().then(function (response) {
            vm.regiongAsync = response.records;
            angular.forEach(response.records, function (value) {
                allRegions.push(value.id);
            });
        });
        vm.onSelectCallbackRegion = function (item) {
            vm.eventResult = {model: item};
            vm.selectRegionId = vm.eventResult.model.id;
        };
        vm.selectRegion = {
            id: undefined
        };
        vm.BusTypeAsync = [];
        var allBusTypes = [];
        busTypeService.queryBusType().then(function (response) {
            vm.BusTypeAsync = response.records;
            angular.forEach(response.records, function (value,index) {
                vm.BusTypeAsync[index].name = value.genrename;
                allBusTypes.push(value.id);
            });
        });
        vm.onSelectCallbackBusType = function (item) {
            vm.eventResult = {model: item};
            vm.selectBusTypeId = vm.eventResult.model.id;
        };
        vm.parkingAsync = [];
        var allParkLots = [];
        var start_index = 0;
        function queryBaiDuMapParking() {
            ManageParkingService.queryBaiDuMapParking(start_index).then(function (response) {
                if(response.parking_lots.length !== 0) {
                    start_index =  response.parking_lots[response.parking_lots.length - 1].id;
                    angular.forEach(response.parking_lots, function (value) {
                        vm.parkingAsync.push(value);
                        allParkLots.push(value.id);
                    });
                    queryBaiDuMapParking();
                }
            });
        }
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.seletParkId= vm.eventResult.model.id;
        };
        vm.queryParkings = queryParkings; // 查询所有停车场
        vm.queryParkIdentifier = queryParkIdentifier; // 查询停车场密钥
        vm.queryParkingGate = queryParkingGate; // 查询停车场入口
        vm.queryGates = queryGates; //查询停车入口坐标
        vm.addParkingLot = addParkingLot; //新增停车场
        vm.deleteParking = deleteParking; //删除停车场
        vm.modifyParking = modifyParking; //修改停车场
        vm.parklotExport = parklotExport;
        vm.queryParkings(0); // 初始化停车场表格数据
        vm.dtOptions = datatablesOptions.getDatatableOption(); // 获取datatables表格设置
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8),
            DTColumnDefBuilder.newColumnDef(9)
        ];
        function queryParkingGate(parkId) {
            ManageParkingService.queryGates(parkId).then(function (response) {
               vm.parkgate = response.parkgate;
            });
        }
        /*打开停车场入口modal*/
        function queryGates(parking) {
            currentClickPark.setPark(parking);
            var modalInstance = $uibModal.open({
                backdrop:'static',
                templateUrl: '/park/app/views/partials/park-gate-modal.html',
                size:'lg',
                controller: 'GateModalController',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                // todo do something after modal closed
            });
        }
        /**
         * 新增停车场.跳转至新增停车场界面
         */
        function addParkingLot() {
            $location.path('/app/parking/add-new-parking');
        }

        /**
         * 打开删除停车场的modal;
         * @param parking
         */
        function deleteParking(parking) {
            currentClickPark.setPark(parking);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: 'deleteParking.html',
                size: 'sm',
                controller: 'ParkingModalController',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                vm.queryParkings(0);
            });
        }

        /**
         * 修改停车场，跳转至修改停车场界面
         * @param parking 当前要修改的停车场
         */
        function modifyParking(parking) {
            currentClickPark.setPark(parking);
            $location.path('/app/parking/modify-parking');
        }
        
        function queryParkIdentifier(parking) {
            currentClickPark.setPark(parking);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: '/park/app/views/partials/query-park-detail.html',
                size: 'lg',
                controller: 'QueryIdentifierController',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                vm.queryParkings(0);
            });
        }
        function queryParkings(start_index){
            if(start_index == 0){
                ManageParkingService.readRecords(0,'',vm.selectRegionId,vm.selectBusTypeId,vm.picture_no,vm.lat_long_no,vm.price_no,vm.other_platform,vm.seletParkId).then(function (response) {
                    vm.parking_lots = response.parking_lots;
                    vm.parkNumber = response.parklot_sum;
                    angular.forEach(response.parking_lots, function (value,index) {
                        vm.parking_lots[index].number =index+1;
                    });
                    vm.number.start = vm.parking_lots[0].number;
                    vm.number.next = vm.parking_lots[vm.parking_lots.length - 1].number;
                    vm.pagination.next_start_index = response.parking_lots[0].id;
                    vm.pagination.previous_start_index =response.parking_lots[response.parking_lots.length - 1].id;
                    vm.pagination.maxid = response.maxid;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }else if(start_index == 1){
                if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                    logger.warning('已经到首页！','','没有上一页');
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }else{
                    ManageParkingService.readRecords(vm.pagination.next_start_index,0,vm.selectRegionId,vm.selectBusTypeId,vm.picture_no,vm.lat_long_no,vm.price_no,vm.other_platform,vm.seletParkId).then(function (response) {
                        vm.parking_lots = response.parking_lots;
                        vm.parkNumber = response.parklot_sum;
                        angular.forEach(response.parking_lots, function (value,index) {
                            vm.parking_lots[index].number = vm.number.start+index-response.parking_lots.length+1;
                        });
                        vm.number.start = vm.parking_lots[0].number;
                        vm.number.next = vm.parking_lots[vm.parking_lots.length - 1].number;
                        vm.pagination.next_start_index = response.parking_lots[0].id;
                        vm.pagination.previous_start_index =response.parking_lots[response.parking_lots.length - 1].id;
                        vm.pagination.maxid = response.maxid;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    });
                }
            }else if(start_index == 2){
                if (vm.pagination.next_start_index <= vm.pagination.minid) {
                    logger.warning('已经到最后一页！','','没有下一页');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                }else{
                    ManageParkingService.readRecords(vm.pagination.previous_start_index,1,vm.selectRegionId,vm.selectBusTypeId,vm.picture_no,vm.lat_long_no,vm.price_no,vm.other_platform,vm.seletParkId).then(function (response) {
                        vm.parking_lots = response.parking_lots;
                        vm.parkNumber = response.parklot_sum;
                        angular.forEach(response.parking_lots, function (value,index) {
                            vm.parking_lots[index].number = vm.number.number+index;
                        });
                        vm.number.start = vm.parking_lots[0].number;
                        vm.number.next = vm.parking_lots[vm.parking_lots.length - 1].number;
                        vm.pagination.next_start_index = response.parking_lots[0].id;
                        vm.pagination.previous_start_index =response.parking_lots[response.parking_lots.length - 1].id;
                        vm.pagination.minid = response.minid;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    });
                }
            }else if(start_index == 3){
                ManageParkingService.readRecords(-1,'',vm.selectRegionId,vm.selectBusTypeId,vm.picture_no,vm.lat_long_no,vm.price_no,vm.other_platform,vm.seletParkId).then(function (response) {
                    vm.parking_lots = response.parking_lots;
                    vm.parkNumber = response.parklot_sum;
                    angular.forEach(response.parking_lots, function (value,index) {
                        vm.parking_lots[index].number = response.parklot_sum-index;
                    });
                    vm.number.start = vm.parking_lots[0].number;
                    vm.number.next = vm.parking_lots[vm.parking_lots.length - 1].number;
                    vm.pagination.next_start_index = response.parking_lots[0].id;
                    vm.pagination.previous_start_index =response.parking_lots[response.parking_lots.length - 1].id;
                    vm.pagination.minid = response.minid;
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                });
            }
        }
        
        function parklotExport() {
            ManageParkingService.parklotExport().then(function (response) {
                 vm.url  = response.data.file_name;
                 window.open(URL_SEED.IMG_URL+'media/reconcile/'+vm.url,'_self');
            });
        }
        vm.clearAndRefresh = function () {
            vm.parkingAsync.selected = '';
            vm.display = false;
            vm.vehicleIn = false;
            vm.valid_begintime = '';
            vm.seletParkId = '';
            vm.selectRegionId = '';
            vm.selectBusTypeId = '';
            vm.regiongAsync.selected = '';
            vm.BusTypeAsync.selected = '';
            vm.valid_endtime = '';
            vm.time_type = '';
            vm.queryParkings(0);
        };
    }
})();
/**
 * Created by huangxiang  on 2016/11/23 0023.
 * @author: huangxiang
 * Module: parking.controller.js
 * feature: 停车场表格初始化设置
 */
(function() {
    'use strict';
    angular.module('app.parking')
        .controller('ParkingManageController', ParkingManageController);

    ParkingManageController.$inject = ['$state', '$scope', 'toastr', '$location', 'ManageParkingService', 'DTColumnDefBuilder', '$uibModal', '$timeout', '$cookies', 'datatablesOptions'];
    
    function ParkingManageController($state, $scope, toastr, $location, ManageParkingService, DTColumnDefBuilder, $uibModal, $timeout, $cookies, datatablesOptions) {
        // var vm = this;
        // 查询所有停车场
        $scope.queryParkings = function() {
            ManageParkingService.queryParking().then(function(response) {
                $scope.parking_lots = response.parking_lots;
            });
        };

        /*查询停车场入口*/
        $scope.queryParkingGate = function() {
            ManageParkingService.queryGate(parkid).then(function(response) {    
                // console.log(response);
                $scope.parkgate = response.parkgate;
            });
        };

        //==================================停车场入口设置========================================
        // 查询停车场入口坐标
        var parkid = 0;
        $scope.queryGates = function(id) {
            parkid = id;
            var modalInstance;
            modalInstance = $uibModal.open({
                backdrop: 'static', // 点击空白处不隐藏并保持黑色模态背景，默认是true，false为不隐藏也没有模态背景
                templateUrl: 'queryParkingGate.html',
                size: 'lg',
                controller: GateModalInstanceCtrl
            });
        };


        var GateModalInstanceCtrl = function($scope, $uibModalInstance) {

            ManageParkingService.queryGate(parkid).then(function(response) {
                // console.log(response);
                $scope.parkgate = response.parkgate;
            });


            $scope.cancel = function() {
                $uibModalInstance.dismiss('cancel');
            };

            // 新增停车场入口
            $scope.addGate = function() {
                var modalInstance;
                modalInstance = $uibModal.open({
                    backdrop: 'static', // 点击空白处不隐藏并保持黑色模态背景，默认是true，false为不隐藏也没有模态背景
                    templateUrl: 'addParkingGate.html',
                    controller: AddGateModalInstanceCtrl
                });

                modalInstance.result.then(function() {
                    $scope.cancel();
                });
            };

            // 修改停车场入口
            $scope.modifyGate = function(gate) {
                $cookies.putObject('currentGate', gate);
                /*eslint init-declarations:0*/
                var modalInstance;
                modalInstance = $uibModal.open({
                    backdrop: 'static', // 点击空白处不隐藏并保持黑色模态背景，默认是true，false为不隐藏也没有模态背景
                    templateUrl: 'modifyGate.html',
                    controller: AddGateModalInstanceCtrl
                });

                modalInstance.result.then(function() {
                    $scope.cancel();
                });
            };

            var AddGateModalInstanceCtrl = function($scope, $uibModalInstance) {

                $scope.cancel = function() {
                    $uibModalInstance.dismiss('cancel');
                };

                $scope.ParkGate = {
                    gatename: '',
                    isdefault: true,
                    gatetype: '',
                    longitude: 0.00,
                    latitude: 0.00,
                    parklotid: parkid
                };

                /*定义是否为默认入口*/
                $scope.ParkGateItems = [{
                        value: true,
                        text: '是'
                    },
                    {
                        value: false,
                        text: '否'
                    }
                ];
                /*定义出口类型参数*/
                $scope.ParkGateType = [{
                        text: '出口',
                        value: 2
                    },
                    {
                        text: '入口',
                        value: 1
                    },
                    {
                        text: '出/入口',
                        value: 3
                    }
                ];

                $scope.currentParkGate = {
                    parkgateid: 0,
                    gatename: '',
                    isdefault: true,
                    latitude: 0.00,
                    longitude: 0.00,
                    parklotid: parkid
                };

                var getCurrentParkGate = function() {
                    $timeout(function() {
                        $scope.clickParkGate = $cookies.getObject('currentGate');
                        $scope.currentParkGate.parkgateid = $scope.clickParkGate.gateid;
                        $scope.currentParkGate.gatename = $scope.clickParkGate.gatename;
                        $scope.currentParkGate.isdefault = $scope.clickParkGate.isdefault;
                        $scope.currentParkGate.latitude = $scope.clickParkGate.latitude;
                        $scope.currentParkGate.longitude = $scope.clickParkGate.longitude;
                    }, 500);
                };

                getCurrentParkGate();

                $scope.confirmAddGate = function() {
                    ManageParkingService.addGate($scope.ParkGate.gatename, $scope.ParkGate.isdefault.value, $scope.ParkGate.gatetype.value, $scope.ParkGate.longitude, $scope.ParkGate.latitude, $scope.ParkGate.parklotid).then(function(response) {
                        if (response.status === 0) {
                            $timeout(function() {
                                toastr.success('操作成功', '你已成功添加停车场入口' + '"' + $scope.ParkGate.gatename + '"!', {
                                    closeButton: true,
                                    progressBar: true,
                                    positionClass: 'toast-top-center'
                                });
                            }, 500);
                            // $scope.queryGates();
                            // $scope.queryParkingGate();
                            $scope.cancel();
                            $state.reload();
                        } else if (response.status === 400012) {
                            $timeout(function() {
                                toastr.error('删除失败', '该入口已经存在！！', {
                                    closeButton: true,
                                    progressBar: true,
                                    positionClass: 'toast-top-center'
                                });
                            }, 500);
                        } else if (response.status === 10003 || response.status === 500) {
                            $timeout(function() {
                                toastr.error('删除失败', '后台服务器异常或数据库错误！！！请联系管理员！', {
                                    closeButton: true,
                                    progressBar: true,
                                    positionClass: 'toast-top-center'
                                });
                            }, 500);
                        }
                    });
                };

                $scope.confirmModifyGate = function() {
                    ManageParkingService.modifyGate($scope.currentParkGate.parkgateid, $scope.currentParkGate.gatename, $scope.currentParkGate.isdefault.value, $scope.currentParkGate.latitude, $scope.currentParkGate.longitude, $scope.currentParkGate.parklotid).then(function(response) {
                        if (response.status === 0) {
                            $timeout(function() {
                                toastr.success('操作成功', '你已成功修改停车场入口' + '"' + $scope.currentParkGate.gatename + '"!', {
                                    closeButton: true,
                                    progressBar: true,
                                    positionClass: 'toast-top-center'
                                });
                            }, 500);

                            $state.reload();
                        } else if (response.status === 400012) {
                            $timeout(function() {
                                toastr.error('修改失败', '该入口已经存在！！', {
                                    closeButton: true,
                                    progressBar: true,
                                    positionClass: 'toast-top-center'
                                });
                            }, 500);
                        } else if (response.status === 10003 || response.status === 500) {
                            $timeout(function() {
                                toastr.error('修改失败', '后台服务器异常或数据库错误！！！请联系管理员！', {
                                    closeButton: true,
                                    progressBar: true,
                                    positionClass: 'toast-top-center'
                                });
                            }, 500);
                        }
                    });
                };

                $scope.confirmDeleteGate = function() {
                    ManageParkingService.deleteGate(currentGateId).then(function(response) {
                        if (response.status === 0) {
                            $timeout(function() {
                                toastr.success('操作成功', '你已成功删除停车场入口' + '"' + $scope.ParkGate.gatename + '"!', {
                                    closeButton: true,
                                    progressBar: true,
                                    positionClass: 'toast-top-center'
                                });
                            }, 500);
                            // $scope.queryGates();
                            // $scope.queryParkingGate();
                            // $scope.cancel();
                            // $location.path('/app/parking');
                            $state.reload();
                        } else if (response.status === 400010 || response.status === 40011) {
                            $timeout(function() {
                                toastr.error('删除失败', '您要删除的入口不存在或该停车场没有入口！请检查后再操作！', {
                                    closeButton: true,
                                    progressBar: true,
                                    positionClass: 'toast-top-center'
                                });
                            }, 500);
                        } else if (response.status === 10003 || response.status === 500) {
                            $timeout(function() {
                                toastr.error('删除失败', '后台服务器异常或数据库错误！！！请联系管理员！', {
                                    closeButton: true,
                                    progressBar: true,
                                    positionClass: 'toast-top-center'
                                });
                            }, 500);
                        }
                    });
                };
            };
            // 新增入口结束
            var currentGateId = 0;
            /*删除入口开始*/
            $scope.deleteGate = function(currentGate) {
                currentGateId = currentGate.gateid;
                var modalInstance;
                modalInstance = $uibModal.open({
                    backdrop: 'static', // 点击空白处不隐藏并保持黑色模态背景，默认是true，false为不隐藏也没有模态背景
                    templateUrl: 'deleteGate.html',
                    controller: AddGateModalInstanceCtrl
                });
            };
            /*删除入口结束*/

            AddGateModalInstanceCtrl.$inject = ['$scope', '$uibModalInstance'];
        };

        GateModalInstanceCtrl.$inject = ['$scope', '$uibModalInstance'];
        //==================================停车场入口设置========================================

        $scope.dtOptions = datatablesOptions.getDatatableOption();
        //////////////////////////////////////////////////////////////////////////
        // 加载停车场等百度地图
        /*       $scope.loadMap = function () {
         var modalInstance;
         modalInstance = $uibModal.open({
         backdrop: 'static',  // 点击空白处不隐藏并保持黑色模态背景，默认是true，false为不隐藏也没有模态背景
         templateUrl: 'BmapModal.html',
         size: 'lg',
         controller: ModalInstanceCtrl
         // resolve:{
         //     selectedRole:function(){
         //         return $scope.role;
         //     }
         // }
         });
         };*/

        var ModalInstanceCtrl = function($scope, $uibModalInstance, selectedRole) {};
        ModalInstanceCtrl.$inject = ['$scope', '$uibModalInstance'];
        /*
         // 百度地图的参数设置
         $scope.mapOptions = {
         center: {
         longitude: 113.95168,
         latitude: 22.539713
         },
         zoom: 17,
         city: 'ShenZhen',
         scaleCtrl: true,
         navCtrl: true,
         overViewCtrl: true,
         enableScrollWheelZoom: true
         };*/

        // 百度地图加载完毕
        /////////////////////////////////////////////////////////////////////////////////////
        // 新增停车场开始

        $scope.addParkinglot = function() {
            $location.path('/app/parking/add-new-parking');
        };

        $scope.parking = {
            name: '',
            address: '',
            city_code: 0,
            longitude: 0.0000,
            latitude: 0.0000,
            price: 0,
            parking_space_total: ''
        };
        $scope.addParking_ = function() {
            ManageParkingService.addParking($scope.parking.name, $scope.parking.address, $scope.parking.city_code, $scope.parking.longitude, $scope.parking.latitude, $scope.parking.price, $scope.parking.parking_space_total)
                .success(function(response) {
                    if (response.status == 0) {
                        $timeout(function() {
                            toastr.success('操作成功', '你已成功添加停车场' + '"' + $scope.parking.name + '"!', {
                                closeButton: true,
                                progressBar: true,
                                positionClass: 'toast-top-center'
                            });
                        }, 500);
                        $scope.queryParkings();
                        $location.path('/app/parking');
                    }
                }).error(function(response) {
                    toastr.error('添加失败', response, {
                        closeButton: true,
                        progressBar: true,
                        positionClass: 'toast-top-center'
                    });
                });
        };

        // 返回上一层
        $scope.backToPrevious = function() {
            $location.path('/app/parking');
        };
        // 新增停车场结束
        //////////////////////////////////////////////////////////////////////////////////////
        // 删除停车场开始
        var mParking = {};
        $scope.deleteParking = function(parking) {
            mParking = parking;
            var modalInstance = $uibModal.open({
                backdrop: 'static', // 点击空白处不隐藏并保持黑色模态背景，默认是true，false为不隐藏也没有模态背景
                templateUrl: 'deleteParking.html',
                size: 'sm',
                controller: ParkingModalInstanceCtrl
            });
            // 删除成功后弹出Notify通知
            modalInstance.result.then(function() {
                $timeout(function() {
                    toastr.success('操作成功', '你已成功删除停车场' + '‘' + parking.name + '’！', {
                        closeButton: true,
                        progressBar: true,
                        positionClass: 'toast-top-center'
                    }, 500);
                });
                $scope.queryParkings();
            });
        };

        var parklotid = 0;
        $scope.queryParkDetail = function(id) {
            parklotid = id;
            var modalInstance = $uibModal.open({
                backdrop: 'static', // 点击空白处不隐藏并保持黑色模态背景，默认是true，false为不隐藏也没有模态背景
                templateUrl: 'queryParkDetail.html',
                size: 'lg',
                controller: ParkingDetailModalInstanceCtrl
            });

        };

        var ParkingDetailModalInstanceCtrl = function($scope, $uibModalInstance) {

            ManageParkingService.queryParkingDetail(parklotid).then(function(response) {
                if (response.status == 0) {
                    $scope.identifier = response.identifier;
                    $scope.parklotName = response.name;
                    $scope.private_key = response.private_key;
                } else {
                    alert('从服务器获取数据失败！！');
                }
            });

            $scope.cancel = function() {
                $uibModalInstance.dismiss('cancel');
            };

        };

        var ParkingModalInstanceCtrl = function($scope, $uibModalInstance) {
            $scope.deleteParkingConfirm = function() {
                ManageParkingService.deleteParking(mParking.id)
                    .then(function(response) {
                        if (response.status == 0) {
                            $uibModalInstance.close('closed');
                        } else {
                            alert('删除失败:' + response.detail);
                        }
                    });
            };

            $scope.cancel = function() {
                $uibModalInstance.dismiss('cancel');
            };
        };

        ParkingModalInstanceCtrl.$inject = ['$scope', '$uibModalInstance'];
        ParkingDetailModalInstanceCtrl.$inject = ['$scope', '$uibModalInstance'];
        // 删除停车场完毕
        /////////////////////////////////////////////////////////////////////////////////////
        // 修改停车场开始
        $scope.modifyParking = function(parking) {
            $cookies.putObject('currentClickPark', parking);
            $location.path('/app/parking/modify-parking');
        };
        //  修改停车场结束
        //////////////////////////////////////////////////////////////////////////////////////

        $scope.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0).withOption('width', '6%'),
            DTColumnDefBuilder.newColumnDef(1).withOption('width', '8%'),
            DTColumnDefBuilder.newColumnDef(2).withOption('width', '13%'),
            DTColumnDefBuilder.newColumnDef(3).withOption('width', '13%'),
            DTColumnDefBuilder.newColumnDef(4).withOption('width', '7%'),
            DTColumnDefBuilder.newColumnDef(5).withOption('width', '7%'),
            DTColumnDefBuilder.newColumnDef(6).withOption('width', '8%'),
            DTColumnDefBuilder.newColumnDef(7).withOption('width', '8%'),
            DTColumnDefBuilder.newColumnDef(8).withOption('width', '8%'),
            DTColumnDefBuilder.newColumnDef(9).notSortable().withOption('width', '14%')
        ];

        // 初始化停车场数据
        $scope.queryParkings();
    }
})();
/**
 * parking.identifier.controller.js
 * @author huangxiang
 * @create 2017-01-03 10:57
 * @feather 初始化停车密钥详情及modal控制的controller
 */
(function(){
    angular.module('app.parking')
        .controller('QueryIdentifierController',QueryIdentifierController);

    QueryIdentifierController.$inject = ['ManageParkingService','$uibModalInstance','currentClickPark'];
    'use strict';
    /**
     * @jsdoc function 查询停车场上传密钥controller
     * @param ManageParkingService 与后台交互的dataservice
     * @param $uibModalInstance
     * @param currentClickPark 当前点击的park  factory
     * @constructor
     */
    function QueryIdentifierController(ManageParkingService,$uibModalInstance,currentClickPark) {
        var vm = this;
        vm.queryIdentifier = queryIdentifier;  //查询停车场上传密钥
        vm.cancel = cancel; // 关闭modal
        vm.parklotid = currentClickPark.getPark().id; // 当前点击的停车场的id,查询停车场密钥的必需参数

        vm.queryIdentifier(); // modal打开后自动初始化当前停车场的密钥数据

        /**
         * @jsdoc function 查询停车场上传密钥的方法
         */
        function queryIdentifier() {
            ManageParkingService.queryParkingDetail(vm.parklotid).then(function (response) {
                if(response.status === 0){
                    vm.identifier = response.identifier;
                    vm.parklotName = response.name;
                    vm.private_key = response.private_key;
                }else {
                    alert('从服务器获取数据失败！');
                }
            });
        }

        /**
         * @jsdoc function 关闭modal的方法
         */
        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
(function () {
    angular.module('app.parking')
        .controller('BMapController', BMapController);
    BMapController.$inject = ['ManageParkingService','regionService','URL_SEED','logger','$timeout'];
    'use strict';
    function BMapController(ManageParkingService,regionService,URL_SEED,logger,$timeout) {
        var vm = this;
        // 112.985002,28.199722
        vm.redNumber = 0;
        vm.yellowNumber = 0;
        vm.greenNumber = 0;
        var longitude = 112.985002;
        var latitude = 28.199722;
         vm.marksArray = []; // mark集合
        var contentData ="";
        var imgData ="";
        var proportion = "";
        vm.loadLocation = loadLocation; // 加载停车场数据
        vm.location = location;//定位
        vm.loadLocation();
        // 定义Marker实体类
        function Marker(longitude, latitude, icon, width, height, title, content,img,label,color,proportion) {
            this.longitude = longitude;
            this.latitude = latitude;
            this.icon = icon;
            this.width = width;
            this.height = height;
            this.title = title;
            this.content = content;
            this.label = label;
            this.img = img;
            this.color = color;
            this.proportion = proportion;
        }
        var markObj = null;
        vm.parkAsync = [];
        var allPark = [];
        var start_index = 0;
        function loadLocation() {
            ManageParkingService.queryBaiDuMapParking(start_index).then(function (res) {
                if(res.parking_lots.length !== 0){
                    start_index =  res.parking_lots[res.parking_lots.length - 1].id;
                    angular.forEach(res.parking_lots, function (data) {
                        contentData = '总车位:' + data.parking_space_total + '  ' + '剩余车位:' + data.parking_space_available;
                        allPark.push(data.id);
                        vm.parkAsync.push(data);
                        if(data.image){
                            imgData = URL_SEED.IMG_URL+"media/"+data.image;
                        }else{
                            imgData = URL_SEED.API_IMGURL+"app/img/no_pic.png";
                        }
                        proportion = (((data.parking_space_available)/(data.parking_space_total))*100).toFixed(2);
                        if (data.parkgate.length > 0 && data.parking_space_available <= 20) {
                            markObj = new Marker(data.parkgate[0].longitude, data.parkgate[0].latitude, '/park/app/img/ic_close_red.png', 50, 45, data.name,
                                contentData,imgData,data.parking_space_available,'progress-bar-danger',proportion);
                                vm.redNumber=vm.redNumber+1;
                                vm.marksArray.push(markObj);
                        }else if(data.parkgate.length > 0 && data.parking_space_available <= 50){
                            markObj = new Marker(data.parkgate[0].longitude, data.parkgate[0].latitude, '/park/app/img/ic_close_yellow.png', 50, 45, data.name,
                                contentData,imgData,data.parking_space_available,'progress-bar-warning',proportion);
                                vm.yellowNumber=vm.yellowNumber+1;
                                vm.marksArray.push(markObj);
                        }else if(data.parkgate.length > 0 && data.parking_space_available > 50){
                            markObj = new Marker(data.parkgate[0].longitude, data.parkgate[0].latitude, '/park/app/img/ic_close_green.png', 50, 45, data.name,
                                contentData,imgData,data.parking_space_available,'progress-bar-success',proportion);
                                vm.greenNumber=vm.greenNumber+1;
                                vm.marksArray.push(markObj);
                        }
                    });
                    loadLocation();
                }
            });
        }
        vm.mapOptions = {
            center: {
                longitude: longitude,
                latitude: latitude
            },
            zoom: 16,
            city: '长沙市',
            scaleCtrl: true,
            navCtrl: true,
            overViewCtrl: true,
            enableScrollWheelZoom: true,
            markers: vm.marksArray
        };
        vm.regiongAsync = [];
        var allRegions = [];
        regionService.queryRegion().then(function (response) {
            vm.regiongAsync = response.records;
            angular.forEach(response.records, function (value) {
                allRegions.push(value.id);
            });
        });
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.selectRegion.id = vm.eventResult.model.id;
        };
        vm.onSelectCallbackPark = function (item) {
            vm.eventResult = {model: item};
            vm.selectRegion.id = vm.eventResult.model.id;
            if(vm.eventResult.model.parkgate[0]){
                vm.lat= vm.eventResult.model.parkgate[0].latitude;
                vm.lng= vm.eventResult.model.parkgate[0].longitude;
            };
            vm.disable = true;
        };
        vm.selectRegion = {
            id: undefined
        };
        vm.selectPark = {
            id: undefined
        };
        vm.disable = false;
        function location() {
            $timeout(function () {
                if (vm.lat && vm.lng) {
                    vm.mapOptions.center = {
                        latitude: vm.lat,
                        longitude: vm.lng
                    };
                    vm.mapOptions.zoom = 18;
                    vm.disable = false;
                } else {
                    logger.warning('停车场查找失败！', '', '经纬度为空');
                }
            },500);
        }

    }
})();
/**
 * Created by huangxiang  on 2016/11/23 0023.
 * @author:
 * Module:
 * feature:
 */
(function () {
    "use strict";
    angular.module('app.parking')
        .controller('ModifyParkController', ModifyParkController);

    ModifyParkController.$inject = ['$scope', '$timeout', '$location', 'currentClickPark', 'ManageParkingService', 'toastr','regionService','townService','organService','policeService','busTypeService','communityService','logger'];

    function ModifyParkController($scope, $timeout, $location, currentClickPark, ManageParkingService, toastr,regionService,townService,organService,policeService,busTypeService,communityService,logger) {
        var vm = this;
        /*区域选择-------------------------------------------------*/
        var selectRegion = [];//所选择的区域
        vm.regiongAsync = [];
        var allRegions = [];
        regionService.queryRegion().then(function (response) {
            vm.regiongAsync = response.records;
            angular.forEach(response.records, function (value) {
                allRegions.push(value.id);
            });
        });
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.parking.region = vm.eventResult.model.id;
        };
        /*商圈选择-------------------------------------------------*/
        var selectTown = [];//所选择的商圈
        vm.TownAsync = [];
        var allTowns = [];
        townService.queryTown().then(function (response) {
            vm.TownAsync = response.data;
            angular.forEach(response.records, function (value) {
                allTowns.push(value.id);
            });
        });
        vm.onSelectCallbackTown = function (item) {
            vm.eventResult = {model: item};
            vm.parking.placetype = vm.eventResult.model.id;
        };
        //停车场所有人
        var selectOrganman = [];//所选择的停车场所有人
        vm.OrganmanAsync = [];
        var allOrganmans = [];
        organService.queryOrgan().then(function (response) {
            vm.OrganmanAsync = response.records;
            angular.forEach(response.records, function (value) {
                allOrganmans.push(value.id);
            });
        });
        vm.onSelectCallbackOrganman = function (item) {
            vm.eventResult = {model: item};
            vm.parking.owner = vm.eventResult.model.id;
        };
        //运营单位
        var selectOrgan = [];//所选择运营单位
        vm.OrganAsync = [];
        var allOrgans = [];
        organService.queryOrgan().then(function (response) {
            vm.OrganAsync = response.records;
            angular.forEach(response.records, function (value) {
                allOrgans.push(value.id);
            });
        });
        vm.onSelectCallbackOrgan = function (item) {
            vm.eventResult = {model: item};
            vm.parking.manage_company = vm.eventResult.model.id;
        };
        //派出所信息
        var selectPolice = [];//派出所信息
        vm.policeAsync = [];
        var allPolices = [];
        policeService.queryPolice().then(function (response) {
            angular.forEach(response.records, function (value,index) {
                vm.policeAsync.push(value);
                vm.policeAsync[index].name = value.stationName;
                allPolices.push(value.id);
            });
        });
        vm.onSelectCallbackPolice = function (item) {
            vm.eventResult = {model: item};
            vm.parking.policestationid = vm.eventResult.model.id;
        };
        /*业态类型选择-------------------------------------------------*/
        vm.BusTypeAsync = [];
        var allBusTypes = [];
        busTypeService.queryBusType().then(function (response) {
            vm.BusTypeAsync = response.records;
            angular.forEach(response.records, function (value,index) {
                vm.BusTypeAsync[index].name = value.genrename;
                allBusTypes.push(value.id);
            });
        });
        vm.onSelectCallbackBusType = function (item) {
            vm.eventResult = {model: item};
            vm.parking.businessid = vm.eventResult.model.id;
            vm.selectBusType.name = vm.eventResult.model.name;
        };
        /*社区信息-------------------------------------------------*/
        vm.CommunityAsync = [];
        var allCommunityes = [];
        communityService.queryCommunity().then(function (response) {
            vm.CommunityAsync = response.records;
            angular.forEach(response.records, function (value,index) {
                vm.CommunityAsync[index].name = value.name;
                allCommunityes.push(value.id);
            });
        });
        vm.onSelectCallbackCommunity = function (item) {
            vm.eventResult = {model: item};
            vm.parking.community = vm.eventResult.model.id;
            vm.selectCommunity.name = vm.eventResult.model.name;
        };
        /*硬件厂商-------------------------------------------------*/
        vm.HardwareyAsync = [];
        var allhardwares = [];
        organService.queryOrgan().then(function (response) {
            vm.HardwareyAsync = response.records;
            angular.forEach(response.records, function (value) {
                allhardwares.push(value.id);
            });
        });
        vm.onSelectCallbackHardware = function (item) {
            vm.eventResult = {model: item};
            vm.parking.hardware = vm.eventResult.model.id;
        };
        /*软件厂商-------------------------------------------------*/
        vm.SoftwareAsync = [];
        var allsoftwares = [];
        organService.queryOrgan().then(function (response) {
            vm.SoftwareAsync = response.records;
            angular.forEach(response.records, function (value) {
                allsoftwares.push(value.id);
            });
        });
        vm.onSelectCallbackSoftware = function (item) {
            vm.eventResult = {model: item};
            vm.parking.software = vm.eventResult.model.id;
        };
        vm.parking = {
            parklotid: 0,
            name: "",
            address: "",
            city_code: "",
            longitude: 0.00,
            latitude: 0.00,
            price: "",
            parking_space_total: ""
        };
        vm.getCurrentPark =  getCurrentPark;
        vm.getCurrentPark();
        function getCurrentPark() {
            $timeout(function () {
                    vm.parking = vm.currentPark = currentClickPark.getPark();
                    if(vm.parking.town_name !== null){
                        vm.TownAsync.selected = vm.parking.town_name[0];
                    }
                    vm.OrganmanAsync.selected = vm.parking.owner_name;
                    vm.regiongAsync.selected = vm.parking.reg_name;
                    vm.OrganAsync.selected = vm.parking.manage_company;
                    vm.policeAsync.selected = vm.parking.pol_name;
                    vm.BusTypeAsync.selected = vm.parking.bus_name;
                }, 500);
        };
        // 点击确认修改停车场的操作
        vm.modifyParking = function () {
            // vm.parking.placetype = vm.seletTown.id;
            // vm.parking.manage_company = vm.seletOrgan.id;
            // vm.parking.owner = vm.seletOrganman.id;
            // vm.parking.policestationid =  vm.seletPolice.id;
            // vm.parking.businessid = vm.selectBusType.id;
            // vm.parking.community = vm.selectCommunity.id;
            // vm.parking.hardware = vm.seletHardware.id;
            // vm.parking.software = vm.seletSoftware.id;
            console.log(vm.parking);
            ManageParkingService.modifyParking(vm.parking.id,vm.parking.name,vm.parking.address,vm.parking.city_code,vm.parking.price,vm.parking.parking_space_total,vm.parking.owner,vm.parking.acreage,vm.parking.chargetype,vm.parking.has_internet,vm.parking.is_entrusted,vm.parking.is_plate_rec,vm.parking.is3rd,vm.parking.is_active,vm.parking.placetype,vm.parking.zonename,vm.parking.region,vm.parking.manage_company,vm.parking.databasever,vm.parking.osver,vm.parking.hardwarever,vm.parking.softwarever,vm.parking.description,vm.parking.policestationid,vm.parking.businessid,vm.parking.community,vm.parking.hardware,vm.parking.software,vm.type,vm.parking.is_show,vm.parking.sign).then(function (response) {
                if (response.status === 0) {
                    logger.success('修改成功'+vm.parking.name+'停车场：','操作成功');
                    $location.path('/app/parking');
                }else if(response.status === 10002 ){
                    logger.error('添加失败' + '"' + vm.parking.name + '"' + '失败!', '缺少必填字段！');
                }else {
                    logger.error('添加失败');
                }
            });
        };
        // 返回上一层
        vm.backToPrevious = function () {
            $location.path('/app/parking');
        };
    }
})();
(function () {
    angular.module('app.parking')
        .controller('ParkingNetworkController', ParkingNetworkController);
    ParkingNetworkController.$inject = ['ParkingStateService', '$scope', 'i18nService', 'ManageParkingService', 'UiGridOptions', '$document','StatusCode','logger', '$interval'];
    'use strict';
    function ParkingNetworkController(ParkingStateService, $scope, i18nService, ManageParkingService, UiGridOptions, $document,StatusCode,logger,$interval) {
        var vm = this;
        /*停车场选择-------------------------------------------------*/
        vm.disabled = undefined;
        vm.searchEnabled = undefined;
        vm.setInputFocus = function () {
            $scope.$broadcast('UiselectDemo1');
        };
        vm.enable = function () {
            vm.disabled = false;
        };
        vm.disabled = function () {
            vm.disabled = true;
        };

        vm.enableSearch = function () {
            vm.searchEnabled = true;
        };

        vm.disableSearch = function () {
            vm.searchEnabled = false;
        };

        vm.someGroupFn = function (item) {

            if (item.name[0] >= 'A' && item.name[0] <= 'M')
                return 'From A - M';

            if (item.name[0] >= 'N' && item.name[0] <= 'Z')
                return 'From N - Z';

        };

        vm.firstLetterGroupFn = function (item) {
            return item.name[0];
        };

        vm.reverseOrderFilterFn = function (groups) {
            return groups.reverse();
        };
        vm.parkingAsync = {selected: 'wladimir@email.com'};
        vm.parkingAsync = [];

        var allParkLots = [];

        ManageParkingService.queryParking().then(function (response) {
            vm.parkingAsync = response.parking_lots;
            angular.forEach(response.parking_lots, function (value) {
                allParkLots.push(value.id);
            });
        });
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.seletPark.id = vm.eventResult.model.id;
        };
        vm.seletPark = {
            id: undefined
        };
        /*停车场选择-------------------------------------------------*/
        vm.rowTemplate = function(){
            return '<div ng-class="{ \'my-css-class\': grid.appScope.rowFormatter( row ) }">' +
                '  <div ng-repeat="(colRenderIndex, col) in colContainer.renderedColumns track by col.colDef.name" class="ui-grid-cell" ng-class="{ \'ui-grid-row-header-cell\': col.isRowHeader }"  ui-grid-cell></div>' +
                '</div>';
        }
        $scope.rowFormatter = function( row ) {
            return row.entity.httpstatus == '1';
        };
        i18nService.setCurrentLang('zh-cn');
        vm.gridOptions = UiGridOptions.getUiGridOption();
        vm.gridOptions.enablePaginationControls = false;
        vm.gridOptions.rowTemplate =vm.rowTemplate();
        vm.gridOptions.data = [];
        vm.gridOptions.columnDefs = [
            {field: 'id', displayName: '序号', width: '10%',
                headerCellFilter: 'translate',
                headerCellClass: 'grid-align',
                cellClass: 'grid-align'
            },
            {field: 'name', displayName: '停车场名称',
                headerCellFilter: 'translate',
                headerCellClass: 'grid-align',
                cellClass: 'grid-align'
            },
            {field: 'address', displayName: '停车场地址',
                headerCellFilter: 'translate',
                headerCellClass: 'grid-align',
                cellClass: 'grid-align'
            },
            {field: 'mqttstatus', displayName: '是否接入',
                headerCellFilter: 'translate',
                headerCellClass: 'grid-align',
                cellClass: 'grid-align',
                cellTemplate: '<div class="ui-grid-cell-contents">{{row.entity.mqttstatus==2?"否":"是"}}</div>'
            },
            {field: 'mqttstatus', displayName: '网络在线与否',
                headerCellFilter: 'translate',
                headerCellClass: 'grid-align',
                cellClass: 'grid-align',
                cellTemplate: '<div class="ui-grid-cell-contents"><span ng-if="row.entity.mqttstatus !== 2">{{row.entity.mqttstatus==0?"在线":"不在线"}}</span></div>'
            },
            {field: 'httpheartbeat',displayName: '最后传输时间',
                headerCellFilter: 'translate',
                headerCellClass: 'grid-align',
                cellClass: 'grid-align'
            },
            {field: 'type',displayName: '停车场类型',
                headerCellFilter: 'translate',
                headerCellClass: 'grid-align',
                cellClass: 'grid-align'
            }
        ];
        vm.totalServerItems = 0;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            maxid: 0,
            minid: 0,
            pageSize: 100,
            pageNumber: 0,
            next_start_index: 0,
            previous_start_index: 0,
            totalItems: null,
            now_start_index:0
        };

        /*加载上一页*/
        vm.loadPreviousPage = function () {
            $interval.cancel(queryState);
            vm.pagination.now_start_index = vm.pagination.previous_start_index;
            vm.pagination.new_pagetype = vm.pagination.pagetype.pervious_page;
            if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                logger.warning('已经到首页！','','没有上一页');
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
            } else {
                ParkingStateService.readRecords(vm.pagination.previous_start_index, vm.pagination.pageSize, vm.pagination.pagetype.pervious_page, vm.seletPark.id, vm.search_plate_number).then(function (response) {
                    vm.gridOptions.data = response.parking_lots;
                    vm.pagination.next_start_index = response.parking_lots[response.parking_lots.length - 1].id;
                    vm.pagination.previous_start_index = response.parking_lots[0].id;
                    vm.pagination.maxid = response.maxid;
                    if (vm.gridOptions.data.length < 50) {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }
            vm.loadNowPage();
        };

        /*加载下一页*/
        vm.loadNextPage = function () {
            $interval.cancel(queryState);
            vm.pagination.now_start_index = vm.pagination.next_start_index;
            vm.pagination.new_pagetype = vm.pagination.pagetype.next_page;
            if (vm.pagination.next_start_index <= vm.pagination.minid || vm.gridOptions.data.length < 50) {
                logger.warning('已经到最后一页！','','没有下一页');
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
            } else {
                ParkingStateService.readRecords(vm.pagination.next_start_index, vm.pagination.pageSize, vm.pagination.pagetype.next_page, vm.seletPark.id, vm.search_plate_number).then(function (response) {
                    vm.gridOptions.data = response.parking_lots;
                    vm.pagination.next_start_index = response.parking_lots[response.parking_lots.length - 1].id;
                    vm.pagination.previous_start_index = response.parking_lots[0].id;
                    vm.pagination.minid = response.minid;
                    if (vm.gridOptions.data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });
                vm.loadNowPage();
            }
        };

        /*加载首页*/
        vm.loadFistPage = function () {
            $interval.cancel(queryState);
            vm.pagination.next_start_index = 0;
            vm.pagination.maxid = 0;
            vm.pagination.minid = 0;
            vm.pagination.now_start_index = vm.pagination.next_start_index;
            vm.pagination.new_pagetype = vm.pagination.pagetype.pervious_page;
            ParkingStateService.readHome(vm.seletPark.id, vm.search_plate_number).then(function (response) {
                if (response.status === StatusCode.SUCCESS && response.parking_lots.length !== 0) {
                    vm.gridOptions.data = response.parking_lots;
                    vm.pagination.next_start_index = response.parking_lots[response.parking_lots.length - 1].id;
                    vm.pagination.previous_start_index = response.parking_lots[0].id;
                    vm.pagination.maxid = response.maxid;
                    vm.pagination.pageNumber = 1;
                    // 如果记录少于20条，则灰掉所有翻页按钮
                    if (vm.gridOptions.data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        // 否则只灰掉上一页按钮，首页留作刷新用
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === 10003) {
                    logger.error('数据库发生错误！',response.detail,'查找失败！');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                } else {
                    logger.warning('没有找到停车状态情况',response.detail,'没有停车记录');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }
                vm.loadNowPage();
            });
        };
        /*加载末页*/
        vm.loadLastPage = function () {
            $interval.cancel(queryState);
            vm.pagination.now_start_index = -1;
            vm.pagination.new_pagetype = vm.pagination.pagetype.next_page;
            ParkingStateService.readLastPage(vm.seletPark.id, vm.search_plate_number).then(function (response) {
                vm.gridOptions.data = response.parking_lots;
                vm.pagination.minid = response.minid;
                vm.pagination.next_start_index = response.parking_lots[response.parking_lots.length - 1].id;
                vm.pagination.previous_start_index = response.parking_lots[0].id;
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
            });
            vm.loadNowPage();
        };
        vm.loadFistPage();
        vm.menuState = {
            show: false
        };
        vm.toggleMenu = function () {
            vm.menuState.show = !vm.menuState.show;
        };
        /*查找指定停车场或者车牌号的数据*/
        vm.searchRecords = function () {
            vm.pagination.next_start_index = 0;
            ParkingStateService.readRecords(vm.pagination.start_index, vm.pagination.pageSize, vm.pagination.pagetype.next_page, vm.eventResult.model.id, vm.search_plate_number).then(function (response) {
                if (response.status === StatusCode.SUCCESS && response.parking_lots.length !== 0) {
                    vm.gridOptions.data = response.parking_lots;
                    vm.pagination.next_start_index = response.parking_lots[response.parking_lots.length - 1].id;
                    vm.pagination.previous_start_index = response.parking_lots[0].id;
                    vm.pagination.maxid = response.maxid;
                    if (vm.gridOptions.data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === StatusCode.NO_INOUT_RECORD) {
                    logger.warning('没有找到停车状态情况',response.detail,'没有找到停车状态情况');
                } else {
                    logger.error('没有找到停车状态情况',response.detail,'数据库错误');
                }
            });
            vm.loadNowPage();
        };
        /*清除查找条件*/
        vm.clearAndRefresh = function () {
            vm.eventResult.model = undefined;
            vm.parkingAsync.selected = undefined;
            vm.seletPark.id = undefined;
            vm.search_plate_number = undefined;
            vm.loadFistPage();
        };
        // /*刷新当前页*/
        vm.loadNowPage = function () {
            queryState = $interval(function(){
                ParkingStateService.readNowPage(vm.pagination.now_start_index, vm.pagination.pageSize, vm.seletPark.id, vm.search_plate_number,vm.pagination.new_pagetype).then(function (response) {
                vm.gridOptions.data = response.parking_lots;
                });
            },5000);
        };
        vm.stopQueryState = function(){
            if (angular.isDefined(queryState)) {
                $interval.cancel(queryState);
                queryState = undefined;
            }
        }
        var queryState;
        $scope.$on("$destroy", function() {
            vm.stopQueryState();
        });
    }
})();
/**
 * Created by huangxiang  on 2016/11/23 0023.
 * @author:
 * Module:
 * feature:
 */
(function () {
    angular.module('app.parking')
        .controller('ParkingPicUploadController',ParkingPicUploadController);

    ParkingPicUploadController.$inject = ['$scope','toastr','$timeout','ManageParkingService','URL_SEED','Upload','$location'];

    'use strict';
    function ParkingPicUploadController($scope,toastr, $timeout,ManageParkingService,URL_SEED,Upload,$location) {
        var vm = this;
        var UPLOAD_PARKING_PIC_URL = URL_SEED.API_URL + 'parking/parklots_image/';

        vm.disabled = undefined;
        vm.searchEnabled = undefined;

        vm.setInputFocus = function () {
            $scope.$broadcast('UiselectDemo1');
        };
        vm.enable = function () {
            vm.disabled = false;
        };

        vm.disabled = function () {
            vm.disabled = true;
        };

        vm.enableSearch = function() {
            vm.searchEnabled = true;
        };

        vm.disableSearch = function() {
            vm.searchEnabled = false;
        };

        vm.someGroupFn = function (item){

            if (item.name[0] >= 'A' && item.name[0] <= 'M')
                return 'From A - M';

            if (item.name[0] >= 'N' && item.name[0] <= 'Z')
                return 'From N - Z';

        };

        vm.firstLetterGroupFn = function (item){
            return item.name[0];
        };

        vm.reverseOrderFilterFn = function(groups) {
            return groups.reverse();
        };
        vm.parkingAsync = {selected : 'wladimir@email.com'};
        vm.parkingAsync = [];

        $timeout(function(){
            ManageParkingService.queryParking().then(function (response) {
                console.log(response.parking_lots);
                vm.parkingAsync = response.parking_lots;
            });
        },3000);

        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
        };

        $scope.uploadParkingPic = function (file) {
            file.upload = Upload.upload({
                url: UPLOAD_PARKING_PIC_URL,
                data: {filename: file, identifier:$scope.ctrl.eventResult.model.identifier},
                headers: {
                    'Content-Type': 'multipart/form-data'
                },
                withCredentials: true
            });

            file.upload.then(function (response) {
                $timeout(function () {
                    file.result = response.data;
                });
                if (response.data.status == '0') {
                    $timeout(function () {
                        toastr.success('操作成功，你已经成功上传该图片！', {
                            closeButton: true,
                            progressBar: true,
                            positionClass: 'toast-top-center'
                        });
                        // 上传成功刷新页面。
                        $route.reload();
                    });

                } else {
                    $timeout(function () {
                        toastr.error('上传失败！！请尝试重新上传!', {
                            closeButton: true,
                            progressBar: true,
                            positionClass: 'toast-top-center'
                        });
                    });
                }

            }, function (response) {
                if (response.status > 0)
                    $scope.errorMsg = response.status + ': ' + response.data;
            }, function (evt) {
                // Math.min is to fix IE which reports 200% sometimes
                file.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));
            });
        };
        $scope.backToPrevious = function () {
            $location.path('/app/parkPic/parking-pic');
        };
    }
})();

(function () {
    angular.module('app.parking')
        .factory('ManageParkingService', ManageParkingService);
    ManageParkingService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function ManageParkingService($http, URL_SEED) {
        var service = {};
        var OPERATION_URL = URL_SEED.API_URL + 'operation/parklots/'; // 增删改查停车场URL
        var QUERY_GATE_URL = URL_SEED.API_URL + 'operation/parkgate/'; // 查询停车场入口坐标url
        var BMAP_PARKING_URL = URL_SEED.API_URL + 'parking/parking_lots/'; // 百度地图上的地图显示
        var PAEKLOTEXPORT = URL_SEED.API_URL + 'operation/parklot_export/';//导出
        /*查询百度地图信息*/
        service.queryBaiDuMapParking = function (start_index) {
            return $http({
                method: 'GET',
                url: BMAP_PARKING_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                params:{
                  max_results: 100,
                  start_index:start_index,
                  pagedirect:1
                },
                withCredentials: true
            }).then(function (response) {
               return response.data;
            });
        };
        /*查询单个停车场上传密钥*/
        service.queryParkingDetail = function (id) {
            return $http({
                method: 'GET',
                url: OPERATION_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                params: {
                    'parklotid': id,
                    'querytype': 'one'
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        /*查询所有停车场数据*/
        service.queryParking = function () {
            return $http({
                method: 'GET',
                url: OPERATION_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                params: {
                    'lot_type':'CP',
                    'querytype': 'all'
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        /*查询停车场入口坐标*/
        service.queryGate = function (parklotid) {
            return $http({
                method: 'GET',
                url: QUERY_GATE_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                params: {
                    parklotid: parklotid
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        /*新增停车场入口*/
        service.addGate = function (gatename, isdefault, gatetype, longitude, latitude, parklotid) {
            var gate_info = angular.toJson({
                gatename: gatename,
                isdefault: isdefault,
                gatetype: gatetype,
                longitude: longitude,
                latitude: latitude,
                parklotid: parklotid
            });
            return $http({
                method: 'POST',
                url: QUERY_GATE_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: gate_info,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        /*修改停车场入口*/
        service.modifyGate = function (parkgateid, gatename, isdefault, latitude, longitude, parklotid) {
            var gate_info = angular.toJson({
                parkgateid: parkgateid,
                gatename: gatename,
                isdefault: isdefault,
                longitude: longitude,
                latitude: latitude,
                parklotid: parklotid
            });
            return $http({
                method: 'PUT',
                url: QUERY_GATE_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: gate_info,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        /*删除停车场入口*/
        service.deleteGate = function (gateid) {
            var gate_info = angular.toJson({parkgateid: gateid});
            return $http({
                method: 'DELETE',
                url: QUERY_GATE_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: gate_info,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        /*新增停车场 录入停车场数据*/
        service.addParking = function (name,address,city_code,price,parking_space_total,owner,acreage,chargetype,has_internet,is_entrusted,is_plate_rec,is3rd,is_active,placetype,zonename,region,manage_company,databasever,osver,hardwarever,softwarever,description,policestationid,bussinessid,community,hardware,software,type,is_show) {
            var parking_info = angular.toJson({
                lot_type:0,
                name:name,
                address:address,
                city_code:city_code,
                price:price,
                parking_space_total:parking_space_total,
                owner:owner,
                acreage:owner,
                chargetype:chargetype,
                has_internet:has_internet,
                is_entrusted:is_entrusted,
                is_plate_rec:is_plate_rec,
                is3rd:is3rd,
                is_active:is_active,
                towncentreid:placetype,
                zonename:zonename,
                regionid:region,
                manage_company:manage_company,
                databasever:databasever,
                osver:osver,
                hardwarever:hardwarever,
                softwarever:softwarever,
                description:description,
                policestationid:policestationid,
                placetype:bussinessid,
                communityid:community,
                hardware_companyid:hardware,
                software_companyid:software,
                type:type,
                is_show:is_show
            });
            return $http({
                method: 'POST',
                url: OPERATION_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: parking_info,
                withCredentials: true
            }).success(function (response) {
                return response.data;
            }).error(function (response) {
                return response.data;
            });
        };
        /*修改停车场信息*/
        service.modifyParking = function (id,name,address,city_code,price,parking_space_total,owner,acreage,chargetype,has_internet,is_entrusted,is_plate_rec,is3rd,is_active,placetype,zonename,region,manage_company,databasever,osver,hardwarever,softwarever,description,policestationid,bussinessid,community,hardware,software,type,is_show) {
            var parking_info = angular.toJson({
                parklotid: id,
                name:name,
                address:address,
                city_code:city_code,
                price:price,
                parking_space_total:parking_space_total,
                owner:owner,
                acreage:owner,
                chargetype:chargetype,
                has_internet:has_internet,
                is_entrusted:is_entrusted,
                is_plate_rec:is_plate_rec,
                is3rd:is3rd,
                is_active:is_active,
                towncentreid:placetype,
                zonename:zonename,
                regionid:region,
                manage_company:manage_company,
                databasever:databasever,
                osver:osver,
                hardwarever:hardwarever,
                softwarever:softwarever,
                description:description,
                policestationid:policestationid,
                placetype:bussinessid,
                communityid:community,
                hardware_companyid:hardware,
                software_companyid:software,
                type:type,
                lot_type:0,
                is_show:is_show
            });
            return $http({
                method: 'PUT',
                url: OPERATION_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: parking_info,
                withCredentials: true

            }).then(function (response) {
                return response.data;
            });
        };
        /*删除停车场*/
        service.deleteParking = function (id) {
            var parking_info = angular.toJson({parklotid: id});
            return $http({
                method: 'DELETE',
                url: OPERATION_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: parking_info,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        //分页查询
        service.readRecords =function(start_index,pagedirect,region,business,picture_no,lat_long_no,price_no,other_platform,parkId) {
            var querytype;
            if(parkId || region || business){querytype = "all";}else{querytype = '';}
            return $http({
                method: 'GET',
                url: OPERATION_URL,
                params: {
                    max_results: 50,
                    start_index: start_index,
                    region:region,
                    business:business,
                    pagedirect: pagedirect,
                    picture_no:picture_no,
                    lat_long_no:lat_long_no,
                    price_no:price_no,
                    other_platform:other_platform,
                    parklotid:parkId,
                    querytype:querytype
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        service.parklotExport =function() {
            return $http({
                method: 'GET',
                url: PAEKLOTEXPORT,
                data: '',
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        return service;
    }
})();

(function () {
    angular.module('app.parking')
        .controller('ParkingStateController', ParkingStateController);
    ParkingStateController.$inject = ['ParkingStateService', '$scope', 'i18nService', 'ManageParkingService', 'UiGridOptions', '$document','StatusCode','logger', '$interval'];
    'use strict';
    /**
     * @ngdoc function
     * @param ParkingStateService
     * @param $scope
     * @param i18nService
     * @param ManageParkingService
     * @param UiGridOptions
     * @param $document
     * @param StatusCode
     * @param logger
     * @constructor
     */
    function ParkingStateController(ParkingStateService, $scope, i18nService, ManageParkingService, UiGridOptions, $document,StatusCode,logger,$interval) {
        var vm = this;
        /*停车场选择-------------------------------------------------*/
        vm.disabled = undefined;
        vm.searchEnabled = undefined;
        vm.setInputFocus = function () {
            $scope.$broadcast('UiselectDemo1');
        };
        vm.enable = function () {
            vm.disabled = false;
        };
        vm.disabled = function () {
            vm.disabled = true;
        };

        vm.enableSearch = function () {
            vm.searchEnabled = true;
        };

        vm.disableSearch = function () {
            vm.searchEnabled = false;
        };

        vm.someGroupFn = function (item) {

            if (item.name[0] >= 'A' && item.name[0] <= 'M')
                return 'From A - M';

            if (item.name[0] >= 'N' && item.name[0] <= 'Z')
                return 'From N - Z';

        };

        vm.firstLetterGroupFn = function (item) {
            return item.name[0];
        };

        vm.reverseOrderFilterFn = function (groups) {
            return groups.reverse();
        };
        vm.parkingAsync = {selected: 'wladimir@email.com'};
        vm.parkingAsync = [];

        var allParkLots = [];

        ManageParkingService.queryParking().then(function (response) {
            vm.parkingAsync = response.parking_lots;
            angular.forEach(response.parking_lots, function (value) {
                allParkLots.push(value.id);
            });
        });
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.seletPark.id = vm.eventResult.model.id;
        };
        vm.seletPark = {
            id: undefined
        };
        /*停车场选择-------------------------------------------------*/
        vm.rowTemplate = function(){
            return '<div ng-class="{ \'my-css-class\': grid.appScope.rowFormatter( row ) }">' +
                '  <div ng-repeat="(colRenderIndex, col) in colContainer.renderedColumns track by col.colDef.name" class="ui-grid-cell" ng-class="{ \'ui-grid-row-header-cell\': col.isRowHeader }"  ui-grid-cell></div>' +
                '</div>';
        }
        $scope.rowFormatter = function( row ) {
            return row.entity.httpstatus == '1';
        };
        i18nService.setCurrentLang('zh-cn');
        vm.gridOptions = UiGridOptions.getUiGridOption();
        vm.gridOptions.enablePaginationControls = false;
        vm.gridOptions.rowTemplate =vm.rowTemplate();
        vm.gridOptions.data = [];
        vm.gridOptions.columnDefs = [
            {field: 'id', displayName: '序号', width: '10%',
                headerCellFilter: 'translate',
                headerCellClass: 'grid-align',
                cellClass: 'grid-align'
            },
            {field: 'name', displayName: '停车场名称',
                headerCellFilter: 'translate',
                headerCellClass: 'grid-align',
                cellClass: 'grid-align'
            },
            {field: 'address', displayName: '停车场地址',
                headerCellFilter: 'translate',
                headerCellClass: 'grid-align',
                cellClass: 'grid-align'
            },
            {field: 'mqttstatus', displayName: '是否接入',
                headerCellFilter: 'translate',
                headerCellClass: 'grid-align',
                cellClass: 'grid-align',
                cellTemplate: '<div class="ui-grid-cell-contents">{{row.entity.mqttstatus==2?"否":"是"}}</div>'
            },
            {field: 'httpstatus', displayName: '上传工具在线与否',
                headerCellFilter: 'translate',
                headerCellClass: 'grid-align',
                cellClass: 'grid-align',
                cellTemplate: '<div class="ui-grid-cell-contents"><span ng-if="row.entity.httpstatus !== 2">{{row.entity.httpstatus==0?"在线":"不在线"}}</span></div>'
            },
            {field: 'httpheartbeat',displayName: '最后传输时间',
                headerCellFilter: 'translate',
                headerCellClass: 'grid-align',
                cellClass: 'grid-align'
            },
            {field: 'type',displayName: '停车场类型',
                headerCellFilter: 'translate',
                headerCellClass: 'grid-align',
                cellClass: 'grid-align'
            }
        ];
        vm.totalServerItems = 0;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            maxid: 0,
            minid: 0,
            pageSize: 100,
            pageNumber: 0,
            next_start_index: 0,
            previous_start_index: 0,
            totalItems: null,
            now_start_index:0
        };

        /*加载上一页*/
        vm.loadPreviousPage = function () {
            $interval.cancel(queryState);
            vm.pagination.now_start_index = vm.pagination.previous_start_index;
            vm.pagination.new_pagetype = vm.pagination.pagetype.pervious_page;
            if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                logger.warning('已经到首页！','','没有上一页');
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
            } else {
                ParkingStateService.readRecords(vm.pagination.previous_start_index, vm.pagination.pageSize, vm.pagination.pagetype.pervious_page, vm.seletPark.id, vm.search_plate_number).then(function (response) {
                    vm.gridOptions.data = response.parking_lots;
                    vm.pagination.next_start_index = response.parking_lots[response.parking_lots.length - 1].id;
                    vm.pagination.previous_start_index = response.parking_lots[0].id;
                    vm.pagination.maxid = response.maxid;
                    if (vm.gridOptions.data.length < 50) {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }
            vm.loadNowPage();
        };

        /*加载下一页*/
        vm.loadNextPage = function () {
            $interval.cancel(queryState);
            vm.pagination.now_start_index = vm.pagination.next_start_index;
            vm.pagination.new_pagetype = vm.pagination.pagetype.next_page;
            if (vm.pagination.next_start_index <= vm.pagination.minid || vm.gridOptions.data.length < 50) {
                logger.warning('已经到最后一页！','','没有下一页');
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
            } else {
                ParkingStateService.readRecords(vm.pagination.next_start_index, vm.pagination.pageSize, vm.pagination.pagetype.next_page, vm.seletPark.id, vm.search_plate_number).then(function (response) {
                    vm.gridOptions.data = response.parking_lots;
                    vm.pagination.next_start_index = response.parking_lots[response.parking_lots.length - 1].id;
                    vm.pagination.previous_start_index = response.parking_lots[0].id;
                    vm.pagination.minid = response.minid;
                    if (vm.gridOptions.data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });
                vm.loadNowPage();
            }
        };

        /*加载首页*/
        vm.loadFistPage = function () {
            $interval.cancel(queryState);
            vm.pagination.next_start_index = 0;
            vm.pagination.maxid = 0;
            vm.pagination.minid = 0;
            vm.pagination.now_start_index = vm.pagination.next_start_index;
            vm.pagination.new_pagetype = vm.pagination.pagetype.pervious_page;
            ParkingStateService.readHome(vm.seletPark.id, vm.search_plate_number).then(function (response) {
                if (response.status === StatusCode.SUCCESS && response.parking_lots.length !== 0) {
                    vm.gridOptions.data = response.parking_lots;
                    vm.pagination.next_start_index = response.parking_lots[response.parking_lots.length - 1].id;
                    vm.pagination.previous_start_index = response.parking_lots[0].id;
                    vm.pagination.maxid = response.maxid;
                    vm.pagination.pageNumber = 1;
                    // 如果记录少于20条，则灰掉所有翻页按钮
                    if (vm.gridOptions.data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        // 否则只灰掉上一页按钮，首页留作刷新用
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === 10003) {
                    logger.error('数据库发生错误！',response.detail,'查找失败！');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                } else {
                    logger.warning('没有找到停车状态情况',response.detail,'没有停车记录');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }
                vm.loadNowPage();
            });
        };
        /*加载末页*/
        vm.loadLastPage = function () {
            $interval.cancel(queryState);
            vm.pagination.now_start_index = -1;
            vm.pagination.new_pagetype = vm.pagination.pagetype.next_page;
            ParkingStateService.readLastPage(vm.seletPark.id, vm.search_plate_number).then(function (response) {
                vm.gridOptions.data = response.parking_lots;
                vm.pagination.minid = response.minid;
                vm.pagination.next_start_index = response.parking_lots[response.parking_lots.length - 1].id;
                vm.pagination.previous_start_index = response.parking_lots[0].id;
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
            });
            vm.loadNowPage();
        };
        vm.loadFistPage();
        vm.menuState = {
            show: false
        };
        vm.toggleMenu = function () {
            vm.menuState.show = !vm.menuState.show;
        };
        /*查找指定停车场或者车牌号的数据*/
        vm.searchRecords = function () {
            vm.pagination.next_start_index = 0;
            ParkingStateService.readRecords(vm.pagination.start_index, vm.pagination.pageSize, vm.pagination.pagetype.next_page, vm.eventResult.model.id, vm.search_plate_number).then(function (response) {
                if (response.status === StatusCode.SUCCESS && response.parking_lots.length !== 0) {
                    vm.gridOptions.data = response.parking_lots;
                    vm.pagination.next_start_index = response.parking_lots[response.parking_lots.length - 1].id;
                    vm.pagination.previous_start_index = response.parking_lots[0].id;
                    vm.pagination.maxid = response.maxid;
                    if (vm.gridOptions.data.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === StatusCode.NO_INOUT_RECORD) {
                    logger.warning('没有找到停车状态情况',response.detail,'没有找到停车状态情况');
                } else {
                    logger.error('没有找到停车状态情况',response.detail,'数据库错误');
                }
            });
            vm.loadNowPage();
        };
        /*清除查找条件*/
        vm.clearAndRefresh = function () {
            vm.eventResult.model = undefined;
            vm.parkingAsync.selected = undefined;
            vm.seletPark.id = undefined;
            vm.search_plate_number = undefined;
            vm.loadFistPage();
        };
        // /*刷新当前页*/
        vm.loadNowPage = function () {
            queryState = $interval(function(){
                ParkingStateService.readNowPage(vm.pagination.now_start_index, vm.pagination.pageSize, vm.seletPark.id, vm.search_plate_number,vm.pagination.new_pagetype).then(function (response) {
                vm.gridOptions.data = response.parking_lots;
                });
            },5000);
        };
        vm.stopQueryState = function(){
            if (angular.isDefined(queryState)) {
                $interval.cancel(queryState);
                queryState = undefined;
            }
        }
        var queryState;
        $scope.$on("$destroy", function() {
            vm.stopQueryState();
        });
    }
})();
(function () {
    angular.module('app.parking')
        .service('ParkingStateService',ParkingStateService);
    ParkingStateService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function ParkingStateService($http, URL_SEED) {
        var self = this;
        var baseUrl = URL_SEED.API_URL + 'parking/parking_lots/';
        var NEWURL = URL_SEED.API_URL + 'parking/network/';
        /*获取首页记录*/
        self.readHome = function (parking_lot_id,plate_number) {
            return $http({
                method: 'GET',
                url: baseUrl,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    max_results: 100,
                    start_index: 0,
                    parklotid:parking_lot_id,
                    plate_number:plate_number
                },
                withCredentials: true,
                ignoreLoadingBar: true
            }).then(function (response) {
                return response.data;
            });
        };
        // self.readRecords = function (start_index, max_result, pagetype,parking_lot_id,plate_number) {
        //     return $http({
        //         method: 'GET',
        //         url: baseUrl,
        //         headers: {
        //             'Content-Type': 'application/json'
        //         },
        //         params: {
        //             start_index: start_index,
        //             max_results: max_result,
        //             pagedirect: pagetype,
        //             parklotid:parking_lot_id,
        //             plate_number:plate_number
        //         },
        //         withCredentials: true,
        //         ignoreLoadingBar: true
        //     }).then(function (response) {
        //         return response.data;
        //     });
        // };
        /*获取尾页记录*/
        self.readLastPage = function (parking_lot_id,plate_number) {
            return $http({
                method: 'GET',
                url: baseUrl,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    max_results: 50,
                    start_index: -1,
                    parklotid:parking_lot_id,
                    plate_number:plate_number
                },
                withCredentials: true,
                ignoreLoadingBar: true
            }).then(function (response) {
                return response.data;
            });
        };
        /*刷新当前页的数据*/
            self.readNowPage = function (now_start_index,now_max_results,parking_lot_id,now_plate_number,pagetype) {
                return $http({
                    method: 'GET',
                    url: baseUrl,
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    params: {
                        max_results: now_max_results,
                        start_index: now_start_index,
                        pagedirect: pagetype,
                        parklotid:parking_lot_id,
                        plate_number:now_plate_number
                    },
                    withCredentials: true,
                    ignoreLoadingBar: true
                }).then(function (response) {
                    return response.data;
                });
        };
        //分页查询
        self.readRecords =function(start_index,pagedirect,parklotid,start_time,end_time) {
            return $http({
                method: 'GET',
                url: baseUrl,
                params: {
                    max_results: 50,
                    start_index: start_index,
                    pagedirect: pagedirect,
                    start_time:start_time,
                    end_time:end_time,
                    parklotid:parklotid
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
    }
})();
(function () {
    angular.module('app.prepayment')
        .controller('OnlinePayAliController',OnlinePayAliController);
    OnlinePayAliController.$inject = ['OnlinePaymentService', '$scope', 'datatablesOptions','DTColumnDefBuilder','$document','billOnlineFactory','$location'];
    'use strict';
    function OnlinePayAliController(OnlinePaymentService, $scope, datatablesOptions,DTColumnDefBuilder,$document,billOnlineFactory,$location) {
        var vm = this;
        $scope.servicetype = 'parkingpay';
        $scope.payment_channel = 'alipay';
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        $scope.coupon ={
            valid_begintime:undefined,
            valid_endtime:undefined
        };
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        /*时间日历设置------------------------------------------------*/
        $scope.jumputDetail = function (recordsData) {
            billOnlineFactory.setBillOnline(recordsData);
            $location.path('/app/online-detail');
        }
        vm.dtOptions = datatablesOptions.getDatatableOption();
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8),
            DTColumnDefBuilder.newColumnDef(9),
            DTColumnDefBuilder.newColumnDef(10)
        ];
        $scope.deSelectRow = function(row) {
            billOnlineFactory.setBillOnline(row.entity);
            $location.path('/app/online-detail');
        };
        $scope.totalServerItems = 0;
        $scope.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            maxid: 0,
            minid: 0,
            pageSize: 50,
            pageNumber: 0,
            next_start_index: 0,
            previous_start_index: 0,
            totalItems: null,
            getTotalPages: function () {
                return Math.ceil(this.totalItems / this.pageSize);
            },
            nextPage: function () {
                $scope.loadNextPage();
                this.pageNumber++;
            },
            previousPage: function () {
                this.pageNumber--;
                $scope.loadPreviousPage();
            }
        };
        /*加载上一页*/
        $scope.loadPreviousPage = function () {
            if ($scope.pagination.previous_start_index >= $scope.pagination.maxid) {
                alert('已经到第一页！');
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
            } else {
                if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                    vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                    vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
                }
                OnlinePaymentService.readRecords($scope.pagination.previous_start_index, $scope.pagination.pageSize, $scope.pagination.pagetype.pervious_page,$scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime,vm.plate_number).then(function (response) {
                    $scope.recordsData = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.paid){
                            $scope.recordsData[index].paidName = '已支付';
                        }else {
                            $scope.recordsData[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                            case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                            case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                            case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                        }
                    });
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.maxid = response.maxid;
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }
        };
        /*加载下一页*/
        $scope.loadNextPage = function () {
            if ($scope.pagination.next_start_index <= $scope.pagination.minid) {
                alert('已经到最后一页！');
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
            } else {
                if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                    vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                    vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
                }
                OnlinePaymentService.readRecords($scope.pagination.next_start_index, $scope.pagination.pageSize, $scope.pagination.pagetype.next_page,$scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime,vm.plate_number).then(function (response) {
                    $scope.recordsData = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.paid){
                            $scope.recordsData[index].paidName = '已支付';
                        }else {
                            $scope.recordsData[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                            case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                            case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                            case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                        }
                    });
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.minid = response.minid;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });

            }
        };

        /*加载首页*/
        $scope.loadFistPage = function () {
            $scope.pagination.start_index = 0;
            $scope.pagination.maxid = 0;
            $scope.pagination.minid = 0;
            if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            OnlinePaymentService.readHome($scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime,vm.plate_number).then(function (response) {
                console.log(response);
                if (response.records == null) {
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                } else {
                    $scope.recordsData = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.paid){
                            $scope.recordsData[index].paidName = '已支付';
                        }else {
                            $scope.recordsData[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                            case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                            case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                            case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                        }
                    });
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.maxid = response.maxid;
                    $scope.pagination.pageNumber = 1;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                }
            });
        };
        /*加载末页*/
        $scope.loadLastPage = function () {
            if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            OnlinePaymentService.readLastPage($scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime,vm.plate_number).then(function (response) {
                $scope.recordsData = response.records;
                angular.forEach(response.records, function (value,index) {
                    if(value.paid){
                        $scope.recordsData[index].paidName = '已支付';
                    }else {
                        $scope.recordsData[index].paidName = '未支付';
                    }
                    switch (value.payment_channel){
                        case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                        case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                        case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                        case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                    }
                });
                $scope.pagination.minid = response.minid;
                $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                $scope.pagination.previous_start_index = response.records[0].id;
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
            });
        };
        $scope.loadFistPage();
        $scope.menuState = {
            show: false
        };
        $scope.toggleMenu = function () {
            $scope.menuState.show = !$scope.menuState.show;
        };
        /*查找指定停车场或者车牌号的数据*/
        $scope.searchRecords = function () {
            $scope.pagination.next_start_index = 0;
            if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            OnlinePaymentService.readRecords( $scope.pagination.start_index, $scope.pagination.pageSize, $scope.pagination.pagetype.next_page,$scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime,vm.plate_number).then(function (response) {
                if (response.status == 0 && response.records !== null) {
                    $scope.recordsData = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.paid){
                            $scope.recordsData[index].paidName = '已支付';
                        }else {
                            $scope.recordsData[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                            case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                            case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                            case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                        }
                    });
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.maxid = response.maxid;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                }
            });
        };

        /*清除查找条件*/
        $scope.clearAndRefresh = function () {
            $scope.ctrl.eventResult.model = undefined;
            $scope.ctrl.parkingAsync.selected = undefined;
            $scope.seletPark.id = undefined;
            $scope.search_plate_number = undefined;
            $scope.payment_channel = '';$scope.username = '';$scope.paid = '';vm.valid_begintime = '';vm.valid_endtime = '';
            $scope.loadFistPage();
        };
    }
})();
(function () {
    angular.module('app.prepayment')
        .controller('OnlineRechargeAliController',OnlineRechargeAliController);
    OnlineRechargeAliController.$inject = ['OnlinePaymentService', '$scope', 'datatablesOptions','DTColumnDefBuilder','$document','billOnlineFactory','$location'];
    'use strict';
    function OnlineRechargeAliController(OnlinePaymentService, $scope, datatablesOptions,DTColumnDefBuilder,$document,billOnlineFactory,$location) {
        var vm = this;
        $scope.servicetype = 'recharge';
        $scope.payment_channel = 'alipay';
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        $scope.coupon ={
            valid_begintime:undefined,
            valid_endtime:undefined
        };
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        /*时间日历设置------------------------------------------------*/
        $scope.jumputDetail = function (recordsData) {
            billOnlineFactory.setBillOnline(recordsData);
            $location.path('/app/online-detail');
        }
        vm.dtOptions = datatablesOptions.getDatatableOption();
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8),
            DTColumnDefBuilder.newColumnDef(9),
            DTColumnDefBuilder.newColumnDef(10)
        ];
        $scope.totalServerItems = 0;
        $scope.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            maxid: 0,
            minid: 0,
            pageSize: 50,
            pageNumber: 0,
            next_start_index: 0,
            previous_start_index: 0,
            totalItems: null,
            getTotalPages: function () {
                return Math.ceil(this.totalItems / this.pageSize);
            },
            nextPage: function () {
                $scope.loadNextPage();
                this.pageNumber++;
            },
            previousPage: function () {
                this.pageNumber--;
                $scope.loadPreviousPage();
            }
        };
        /*加载上一页*/
        $scope.loadPreviousPage = function () {
            if ($scope.pagination.previous_start_index >= $scope.pagination.maxid) {
                alert('已经到第一页！');
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
            } else {
                if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                    vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                    vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
                }
                OnlinePaymentService.readRecords($scope.pagination.previous_start_index, $scope.pagination.pageSize, $scope.pagination.pagetype.pervious_page,$scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime,vm.plate_number).then(function (response) {
                    $scope.recordsData = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.paid){
                            $scope.recordsData[index].paidName = '已支付';
                        }else {
                            $scope.recordsData[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                            case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                            case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                            case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                        }
                    });
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.maxid = response.maxid;
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }

        };

        /*加载下一页*/
        $scope.loadNextPage = function () {
            if ($scope.pagination.next_start_index <= $scope.pagination.minid) {
                alert('已经到最后一页！');
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
            } else {
                if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                    vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                    vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
                }
                OnlinePaymentService.readRecords($scope.pagination.next_start_index, $scope.pagination.pageSize, $scope.pagination.pagetype.next_page,$scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime,vm.plate_number).then(function (response) {
                    $scope.recordsData = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.paid){
                            $scope.recordsData[index].paidName = '已支付';
                        }else {
                            $scope.recordsData[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                            case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                            case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                            case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                        }
                    });
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.minid = response.minid;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });

            }
        };

        /*加载首页*/
        $scope.loadFistPage = function () {
            $scope.pagination.start_index = 0;
            $scope.pagination.maxid = 0;
            $scope.pagination.minid = 0;
            if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            OnlinePaymentService.readHome($scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime,vm.plate_number).then(function (response) {
                console.log(response);
                if (response.records == null) {
                    alert('没有线上缴费记录！！！请检查服务器数据库！');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                } else {
                    $scope.recordsData = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.paid){
                            $scope.recordsData[index].paidName = '已支付';
                        }else {
                            $scope.recordsData[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                            case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                            case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                            case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                        }
                    });
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.maxid = response.maxid;
                    $scope.pagination.pageNumber = 1;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                }
            });

        };
        /*加载末页*/
        $scope.loadLastPage = function () {
            if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            OnlinePaymentService.readLastPage($scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime,vm.plate_number).then(function (response) {
                $scope.recordsData = response.records;
                angular.forEach(response.records, function (value,index) {
                    if(value.paid){
                        $scope.recordsData[index].paidName = '已支付';
                    }else {
                        $scope.recordsData[index].paidName = '未支付';
                    }
                    switch (value.payment_channel){
                        case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                        case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                        case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                        case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                    }
                });
                $scope.pagination.minid = response.minid;
                $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                $scope.pagination.previous_start_index = response.records[0].id;
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
            });
        };
        $scope.loadFistPage();
        $scope.menuState = {
            show: false
        };
        $scope.toggleMenu = function () {
            $scope.menuState.show = !$scope.menuState.show;
        };
        /*查找指定停车场或者车牌号的数据*/
        $scope.searchRecords = function () {
            $scope.pagination.next_start_index = 0;
            if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            OnlinePaymentService.readRecords( $scope.pagination.start_index, $scope.pagination.pageSize, $scope.pagination.pagetype.next_page,$scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime,vm.plate_number).then(function (response) {
                if (response.status == 0 && response.records !== null) {
                    $scope.recordsData = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.paid){
                            $scope.recordsData[index].paidName = '已支付';
                        }else {
                            $scope.recordsData[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                            case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                            case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                            case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                        }
                    });
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.maxid = response.maxid;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                }else if (response.status == 40006){
                    alert('没有找到相关入场记录！');
                } else {
                    alert('没有找到相关入场记录！');
                }
            });
        };

        /*清除查找条件*/
        $scope.clearAndRefresh = function () {
            $scope.ctrl.eventResult.model = undefined;
            $scope.ctrl.parkingAsync.selected = undefined;
            $scope.seletPark.id = undefined;
            $scope.search_plate_number = undefined;
            $scope.payment_channel = '';$scope.username = '';$scope.paid = '';vm.valid_begintime = '';vm.valid_endtime = '';
            vm.plate_number = '';
            $scope.loadFistPage();
        };
    }
})();
(function () {
    angular.module('app.prepayment')
        .controller('OnlinePayDaDaController',OnlinePayDaDaController);
    OnlinePayDaDaController.$inject = ['OnlinePaymentService', '$scope', 'DTColumnDefBuilder','datatablesOptions','$document','billOnlineFactory','$location'];
    'use strict';
    function OnlinePayDaDaController(OnlinePaymentService, $scope, DTColumnDefBuilder,datatablesOptions,$document,billOnlineFactory,$location) {
        var vm = this;
        $scope.servicetype = 'parkingpay';
        $scope.payment_channel = 'dadapay';
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        $scope.coupon ={
            valid_begintime:undefined,
            valid_endtime:undefined
        };
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        $scope.jumputDetail = function (recordsData) {
            billOnlineFactory.setBillOnline(recordsData);
            $location.path('/app/online-detail');
        }
        vm.dtOptions = datatablesOptions.getDatatableOption();
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8),
            DTColumnDefBuilder.newColumnDef(9),
            DTColumnDefBuilder.newColumnDef(10)
        ];
        $scope.totalServerItems = 0;
        $scope.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            maxid: 0,
            minid: 0,
            pageSize: 50,
            pageNumber: 0,
            next_start_index: 0,
            previous_start_index: 0,
            totalItems: null,
            getTotalPages: function () {
                return Math.ceil(this.totalItems / this.pageSize);
            },
            nextPage: function () {
                $scope.loadNextPage();
                this.pageNumber++;
            },
            previousPage: function () {
                this.pageNumber--;
                $scope.loadPreviousPage();
            }
        };
        /*加载上一页*/
        $scope.loadPreviousPage = function () {
            if ($scope.pagination.previous_start_index >= $scope.pagination.maxid) {
                alert('已经到第一页！');
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
            } else {
                if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                    vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                    vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
                }
                OnlinePaymentService.readRecords($scope.pagination.previous_start_index, $scope.pagination.pageSize, $scope.pagination.pagetype.pervious_page,$scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                    $scope.recordsData = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.paid){
                            $scope.recordsData[index].paidName = '已支付';
                        }else {
                            $scope.recordsData[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                            case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                            case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                            case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                        }
                    });
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.maxid = response.maxid;
                    if($scope.recordsData.length < 30){
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }

        };

        /*加载下一页*/
        $scope.loadNextPage = function () {
            if ($scope.pagination.next_start_index <= $scope.pagination.minid) {
                alert('已经到最后一页！');
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
            } else {
                if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                    vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                    vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
                }
                OnlinePaymentService.readRecords($scope.pagination.next_start_index, $scope.pagination.pageSize, $scope.pagination.pagetype.next_page,$scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                    $scope.recordsData = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.paid){
                            $scope.recordsData[index].paidName = '已支付';
                        }else {
                            $scope.recordsData[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                            case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                            case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                            case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                        }
                    });
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.minid = response.minid;
                    if($scope.recordsData.length < 30){
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });

            }
        };

        /*加载首页*/
        $scope.loadFistPage = function () {
            $scope.pagination.start_index = 0;
            $scope.pagination.maxid = 0;
            $scope.pagination.minid = 0;
            if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            OnlinePaymentService.readHome($scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                console.log(response);
                if (response.records == null) {
                    alert('没有线上缴费记录！！！请检查服务器数据库！');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                } else {
                    $scope.recordsData = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.paid){
                            $scope.recordsData[index].paidName = '已支付';
                        }else {
                            $scope.recordsData[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                            case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                            case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                            case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                        }
                    });
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.maxid = response.maxid;
                    $scope.pagination.pageNumber = 1;
                    // 如果记录少于50条，则灰掉所有翻页按钮
                    if($scope.recordsData.length < 30){
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else {
                        // 否则只灰掉上一页按钮，首页留作刷新用
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                }
            });

        };
        /*加载末页*/
        $scope.loadLastPage = function () {
            if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            OnlinePaymentService.readLastPage($scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                $scope.recordsData = response.records;
                angular.forEach(response.records, function (value,index) {
                    if(value.paid){
                        $scope.recordsData[index].paidName = '已支付';
                    }else {
                        $scope.recordsData[index].paidName = '未支付';
                    }
                    switch (value.payment_channel){
                        case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                        case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                        case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                        case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                    }
                });
                $scope.pagination.minid = response.minid;
                $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                $scope.pagination.previous_start_index = response.records[0].id;
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
            });
        };
        $scope.loadFistPage();
        $scope.menuState = {
            show: false
        };
        $scope.toggleMenu = function () {
            $scope.menuState.show = !$scope.menuState.show;
        };
        /*查找指定停车场或者车牌号的数据*/
        $scope.searchRecords = function () {
            $scope.pagination.next_start_index = 0;
            if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            OnlinePaymentService.readRecords( $scope.pagination.start_index, $scope.pagination.pageSize, $scope.pagination.pagetype.next_page,$scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                if (response.status == 0 && response.records !== null) {
                    $scope.recordsData = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.paid){
                            $scope.recordsData[index].paidName = '已支付';
                        }else {
                            $scope.recordsData[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                            case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                            case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                            case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                        }
                    });
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.maxid = response.maxid;
                    if($scope.recordsData.length < 50){
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                }else if (response.status == 40006){
                    alert('没有找到相关入场记录！');
                } else {
                    alert('没有找到相关入场记录！');
                }
            });
        };

        /*清除查找条件*/
        $scope.clearAndRefresh = function () {
            $scope.ctrl.eventResult.model = undefined;
            $scope.ctrl.parkingAsync.selected = undefined;
            $scope.seletPark.id = undefined;
            $scope.search_plate_number = undefined;
            $scope.payment_channel = '',$scope.username = '',$scope.paid = '',vm.valid_begintime = '',vm.valid_endtime = '';
            $scope.loadFistPage();
        };
    }
})();
(function () {
    angular.module('app.prepayment')
        .factory('billOnlineFactory', billOnlineFactory);
    'use strict';
    function billOnlineFactory() {
        var billOnline = {
            amount: '',
            balance: '',
            created_time: '',
            id: '',
            netreceipts: '',
            order_desc: '',
            out_trade_no: '',
            paid: true,
            payment_channel: '',
            paytime: '',
            serviceid: '',
            servicetype:'',
            status:'',
            updated_time:'',
            user:'',
            username:'',
            rdpay_trade_no:''
        };
        return {
            setBillOnline:setBillOnline,
            getBillOnline:getBillOnline
        };
        function setBillOnline(cBillOnline) {
            billOnline.amount = cBillOnline.amount;
            billOnline.balance = cBillOnline.balance;
            billOnline.created_time = cBillOnline.created_time;
            billOnline.id = cBillOnline.id;
            billOnline.netreceipts = cBillOnline.netreceipts;
            billOnline.order_desc = cBillOnline.order_desc;
            billOnline.out_trade_no = cBillOnline.out_trade_no;
            billOnline.paid = cBillOnline.paid;
            billOnline.payment_channel = cBillOnline.payment_channel;
            billOnline.paytime = cBillOnline.paytime;
            billOnline.serviceid = cBillOnline.serviceid;
            billOnline.servicetype = cBillOnline.servicetype;
            billOnline.status = cBillOnline.status;
            billOnline.updated_time = cBillOnline.updated_time;
            billOnline.user = cBillOnline.user;
            billOnline.username = cBillOnline.username;
            billOnline.rdpay_trade_no = cBillOnline.rdpay_trade_no;
        }
        function getBillOnline() {
            return billOnline;
        }
    }
})();
(function () {
    angular.module('app.prepayment')
        .controller('billOnlineDetailController',billOnlineDetailController);
    billOnlineDetailController.$inject = ['OnlinePaymentService','$document','billOnlineFactory','$location'];
    'use strict';
    function billOnlineDetailController(OnlinePaymentService, document,billOnlineFactory,$location) {
        var vm = this;
        vm.bill = billOnlineFactory.getBillOnline();
        vm.wechatpay = false;
        vm.alipay = false;
        vm.dadapay = false;
        switch (vm.bill.payment_channel){
            case 'wechatpay': vm.wechatpay = true;break;
            case 'alipay': vm.alipay = true;break;
            case 'dadapay': vm.dadapay = true;break;
        };
        vm.queryDetail = queryDetail;
        vm.queryDetail();
        function queryDetail() {
            OnlinePaymentService.queryDetail(vm.bill.id).then(function (response) {
                vm.billDetail = response.billdetail[0];
                // angular.forEach(){
                //
                // }
            });
        }
        // 返回上一层
        vm.backToPrevious = function () {
            switch (vm.bill.payment_channel){
                case 'wechatpay': $location.path('/app/bill/online-wechatpay');break;
                case 'alipay': $location.path('/app/bill/online-alipay');break;
                case 'dadapay': $location.path('/app/bill/online-dadapay');break;
            };
        };
    }
})();
(function () {
    angular.module('app.prepayment')
        .controller('OnlinePayWeChatPayController',OnlinePayWeChatPayController);
    OnlinePayWeChatPayController.$inject = ['OnlinePaymentService', '$scope','$document','billOnlineFactory','$location','datatablesOptions','DTColumnDefBuilder','logger'];
    'use strict';
    function OnlinePayWeChatPayController(OnlinePaymentService, $scope,$document,billOnlineFactory,$location,datatablesOptions,DTColumnDefBuilder,logger) {
        var vm = this;
        $scope.servicetype = 'parkingpay';
        $scope.payment_channel = 'wechatpay';
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        $scope.coupon ={
            valid_begintime:undefined,
            valid_endtime:undefined
        };
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        $scope.jumputDetail = function (recordsData) {
            billOnlineFactory.setBillOnline(recordsData);
            $location.path('/app/online-detail');
        }
        vm.dtOptions = datatablesOptions.getDatatableOption();
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8),
            DTColumnDefBuilder.newColumnDef(9),
            DTColumnDefBuilder.newColumnDef(10),
            DTColumnDefBuilder.newColumnDef(11)
        ];
        $scope.totalServerItems = 0;
        $scope.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            maxid: 0,
            minid: 0,
            pageSize: 50,
            pageNumber: 0,
            next_start_index: 0,
            previous_start_index: 0,
            totalItems: null,
            getTotalPages: function () {
                return Math.ceil(this.totalItems / this.pageSize);
            },
            nextPage: function () {
                $scope.loadNextPage();
                this.pageNumber++;
            },
            previousPage: function () {
                this.pageNumber--;
                $scope.loadPreviousPage();
            }
        };
        /*加载上一页*/
        $scope.loadPreviousPage = function () {
            if ($scope.pagination.previous_start_index >= $scope.pagination.maxid) {
                logger.warning('已经到第一页！','','请重新查询');
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
            } else {
                if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                    vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                    vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
                }
                OnlinePaymentService.readRecords($scope.pagination.previous_start_index, $scope.pagination.pageSize, $scope.pagination.pagetype.pervious_page,$scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime,vm.plate_number).then(function (response) {
                    $scope.recordsData = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.paid){
                            $scope.recordsData[index].paidName = '已支付';
                        }else {
                            $scope.recordsData[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                            case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                            case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                            case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                        }
                    });
                    $scope.recordsData = $scope.recordsData;
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.maxid = response.maxid;
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });
            }

        };

        /*加载下一页*/
        $scope.loadNextPage = function () {
            if ($scope.pagination.next_start_index <= $scope.pagination.minid) {
                logger.warning('已经到最后一页！','','请重新查询');
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
            } else {
                if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                    vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                    vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
                }
                OnlinePaymentService.readRecords($scope.pagination.next_start_index, $scope.pagination.pageSize, $scope.pagination.pagetype.next_page,$scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime,vm.plate_number).then(function (response) {
                    $scope.recordsData = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.paid){
                            $scope.recordsData[index].paidName = '已支付';
                        }else {
                            $scope.recordsData[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                            case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                            case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                            case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                        }
                    });
                    $scope.recordsData = $scope.recordsData;
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.minid = response.minid;
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });

            }
        };

        /*加载首页*/
        $scope.loadFistPage = function () {
            $scope.pagination.start_index = 0;
            $scope.pagination.maxid = 0;
            $scope.pagination.minid = 0;
            if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            OnlinePaymentService.readHome($scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime,vm.plate_number).then(function (response) {
                console.log(response);
                if (response.records == null) {
                    logger.warning('没有记录！','','请重新查询');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                } else {
                    $scope.recordsData = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.paid){
                            $scope.recordsData[index].paidName = '已支付';
                        }else {
                            $scope.recordsData[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                            case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                            case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                            case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                        }
                    });
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.maxid = response.maxid;
                    $scope.pagination.pageNumber = 1;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                }
            });

        };
        /*加载末页*/
        $scope.loadLastPage = function () {
            if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            OnlinePaymentService.readLastPage($scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime,vm.plate_number).then(function (response) {
                $scope.recordsData = response.records;
                angular.forEach(response.records, function (value,index) {
                    if(value.paid){
                        $scope.recordsData[index].paidName = '已支付';
                    }else {
                        $scope.recordsData[index].paidName = '未支付';
                    }
                    switch (value.payment_channel){
                        case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                        case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                        case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                        case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                    }
                });
                $scope.pagination.minid = response.minid;
                $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                $scope.pagination.previous_start_index = response.records[0].id;
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
            });
        };
        $scope.loadFistPage();
        $scope.menuState = {
            show: false
        };
        $scope.toggleMenu = function () {
            $scope.menuState.show = !$scope.menuState.show;
        };
        $scope.searchRecords = function () {
            $scope.pagination.next_start_index = 0;
            if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            OnlinePaymentService.readRecords( $scope.pagination.start_index, $scope.pagination.pageSize, $scope.pagination.pagetype.next_page,$scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime,vm.plate_number).then(function (response) {
                if (response.status == 0 && response.records !== null) {
                    $scope.recordsData = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.paid){
                            $scope.recordsData[index].paidName = '已支付';
                        }else {
                            $scope.recordsData[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                            case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                            case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                            case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                        }
                    });
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.maxid = response.maxid;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                }else if (response.status == 40006){
                    logger.warning('没有相关记录！','','请重新查询');
                } else {
                    logger.warning('没有相关记录！','','请重新查询');
                }
            });
        };

        /*清除查找条件*/
        $scope.clearAndRefresh = function () {
            $scope.ctrl.eventResult.model = undefined;
            $scope.ctrl.parkingAsync.selected = undefined;
            $scope.seletPark.id = undefined;
            $scope.username= '';$scope.paid='';vm.valid_begintime='';vm.valid_endtime = '';
            vm.plate_number = '';
            $scope.loadFistPage();
        };
    }
})();
(function () {
    angular.module('app.prepayment')
        .controller('OnlineRechargeWeChatPayController',OnlineRechargeWeChatPayController);
    OnlineRechargeWeChatPayController.$inject = ['OnlinePaymentService', '$scope', 'DTColumnDefBuilder','datatablesOptions','$document','billOnlineFactory','$location'];
    'use strict';
    function OnlineRechargeWeChatPayController(OnlinePaymentService, $scope, DTColumnDefBuilder,datatablesOptions,$document,billOnlineFactory,$location) {
        var vm = this;
        $scope.servicetype = 'recharge';
        $scope.payment_channel = 'wechatpay';
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        $scope.coupon ={
            valid_begintime:undefined,
            valid_endtime:undefined
        };
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        /*时间日历设置------------------------------------------------*/
        // $scope.gridOptions = UiGridOptions.getUiGridOption();
        // $scope.gridOptions.enablePaginationControls = false;
        // $scope.recordsData = [];
        // $scope.gridOptions.columnDefs = [
        //     {field: 'id', displayName: '序号'},
        //     {field: 'username', displayName: '用户编号'},
        //     {field: 'out_trade_no', displayName: '流水号'},
        //     {
        //         field: 'created_time',
        //         displayName: '创建时间'
        //     },
        //     {field: 'paidName', displayName: '支付状态'},
        //     {field: 'payment_channelName', displayName: '支付方式'},
        //     {
        //         field: 'amount',
        //         displayName: '缴费金额',
        //         cellTemplate: '<div class="ui-grid-cell-contents"><span>{{COL_FIELD/100}} 元</span></div>'
        //     },
        //     {
        //         field: 'balance',
        //         displayName: '账户余额',
        //         cellTemplate: '<div class="ui-grid-cell-contents"><span>{{COL_FIELD/100}} 元</span></div>'
        //     },
        //     {field: 'order_desc', displayName: '备注'},
        //     {
        //         field: 'id',
        //         displayName: '操作',
        //         cellTemplate: '<div class="ui-grid-cell-contents"><a ng-click="grid.appScope.deSelectRow(row)">详情</a></div>'
        //     }
        // ];
        $scope.jumputDetail = function (recordsData) {
            billOnlineFactory.setBillOnline(recordsData);
            $location.path('/app/online-detail');
        }
        vm.dtOptions = datatablesOptions.getDatatableOption();
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8),
            DTColumnDefBuilder.newColumnDef(9),
            DTColumnDefBuilder.newColumnDef(10)
        ];
        $scope.totalServerItems = 0;
        $scope.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            maxid: 0,
            minid: 0,
            pageSize: 50,
            pageNumber: 0,
            next_start_index: 0,
            previous_start_index: 0,
            totalItems: null,
            getTotalPages: function () {
                return Math.ceil(this.totalItems / this.pageSize);
            },
            nextPage: function () {
                $scope.loadNextPage();
                this.pageNumber++;
            },
            previousPage: function () {
                this.pageNumber--;
                $scope.loadPreviousPage();
            }
        };
        /*加载上一页*/
        $scope.loadPreviousPage = function () {
            if ($scope.pagination.previous_start_index >= $scope.pagination.maxid) {
                alert('已经到第一页！');
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
            } else {
                if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                    vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                    vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
                }
                OnlinePaymentService.readRecords($scope.pagination.previous_start_index, $scope.pagination.pageSize, $scope.pagination.pagetype.pervious_page,$scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                    $scope.recordsData = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.paid){
                            $scope.recordsData[index].paidName = '已支付';
                        }else {
                            $scope.recordsData[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                            case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                            case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                            case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                        }
                    });
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.maxid = response.maxid;
                    if($scope.recordsData.length < 30){
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }

        };

        /*加载下一页*/
        $scope.loadNextPage = function () {
            if ($scope.pagination.next_start_index <= $scope.pagination.minid) {
                alert('已经到最后一页！');
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
            } else {
                if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                    vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                    vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
                }
                OnlinePaymentService.readRecords($scope.pagination.next_start_index, $scope.pagination.pageSize, $scope.pagination.pagetype.next_page,$scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                    $scope.recordsData = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.paid){
                            $scope.recordsData[index].paidName = '已支付';
                        }else {
                            $scope.recordsData[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                            case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                            case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                            case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                        }
                    });
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.minid = response.minid;
                    if($scope.recordsData.length < 30){
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });

            }
        };

        /*加载首页*/
        $scope.loadFistPage = function () {
            $scope.pagination.start_index = 0;
            $scope.pagination.maxid = 0;
            $scope.pagination.minid = 0;
            if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            OnlinePaymentService.readHome($scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                console.log(response);
                if (response.records == null) {
                    alert('没有线上缴费记录！！！请检查服务器数据库！');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                } else {
                    $scope.recordsData = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.paid){
                            $scope.recordsData[index].paidName = '已支付';
                        }else {
                            $scope.recordsData[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                            case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                            case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                            case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                        }
                    });
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.maxid = response.maxid;
                    $scope.pagination.pageNumber = 1;
                    // 如果记录少于50条，则灰掉所有翻页按钮
                    if($scope.recordsData.length < 30){
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else {
                        // 否则只灰掉上一页按钮，首页留作刷新用
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                }
            });

        };
        /*加载末页*/
        $scope.loadLastPage = function () {
            if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            OnlinePaymentService.readLastPage($scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                $scope.recordsData = response.records;
                angular.forEach(response.records, function (value,index) {
                    if(value.paid){
                        $scope.recordsData[index].paidName = '已支付';
                    }else {
                        $scope.recordsData[index].paidName = '未支付';
                    }
                    switch (value.payment_channel){
                        case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                        case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                        case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                        case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                    }
                });
                $scope.pagination.minid = response.minid;
                $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                $scope.pagination.previous_start_index = response.records[0].id;
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
            });
        };
        $scope.loadFistPage();
        $scope.menuState = {
            show: false
        };
        $scope.toggleMenu = function () {
            $scope.menuState.show = !$scope.menuState.show;
        };
        /*查找指定停车场或者车牌号的数据*/
        $scope.searchRecords = function () {
            $scope.pagination.next_start_index = 0;
            if($scope.coupon.valid_begintime && $scope.coupon.valid_endtime) {
                vm.valid_begintime = moment(new Date(new Date($scope.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date($scope.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            OnlinePaymentService.readRecords( $scope.pagination.start_index, $scope.pagination.pageSize, $scope.pagination.pagetype.next_page,$scope.servicetype,$scope.payment_channel,$scope.username,$scope.paid,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                if (response.status == 0 && response.records !== null) {
                    $scope.recordsData = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.paid){
                            $scope.recordsData[index].paidName = '已支付';
                        }else {
                            $scope.recordsData[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': $scope.recordsData[index].payment_channelName ='微信';break;
                            case 'alipay': $scope.recordsData[index].payment_channelName ='支付宝';break;
                            case 'unionpay': $scope.recordsData[index].payment_channelName ='银联';break;
                            case 'dadapay': $scope.recordsData[index].payment_channelName ='账上余额';break;
                        }
                    });
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.maxid = response.maxid;
                    if($scope.recordsData.length < 50){
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                }else if (response.status == 40006){
                    alert('没有找到相关入场记录！');
                } else {
                    alert('没有找到相关入场记录！');
                }
            });
        };

        /*清除查找条件*/
        $scope.clearAndRefresh = function () {
            $scope.ctrl.eventResult.model = undefined;
            $scope.ctrl.parkingAsync.selected = undefined;
            $scope.seletPark.id = undefined;
            $scope.search_plate_number = undefined;
            $scope.payment_channel = '',$scope.username = '',$scope.paid = '',vm.valid_begintime = '',vm.valid_endtime = '';
            $scope.loadFistPage();
        };
    }
})();
(function () {
    angular.module('app.prepayment')
        .controller('OfflinePaymentController',OfflinePaymentController);
    OfflinePaymentController.$inject = ['OfflinePaymentService', '$scope', 'DTColumnDefBuilder','ManageParkingService','datatablesOptions','$document'];
    'use strict';
    function OfflinePaymentController(OfflinePaymentService, $scope, DTColumnDefBuilder, ManageParkingService,datatablesOptions,$document) {
        var vm = this;
        vm.queryBaiDuMapParking = queryBaiDuMapParking;
        vm.queryBaiDuMapParking();
        vm.coupon ={
            valid_begintime:undefined,
            valid_endtime:undefined
        };
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        /*停车场选择-------------------------------------------------*/
        vm.disabled = undefined;
        vm.searchEnabled = undefined;
        vm.setInputFocus = function () {
            $scope.$broadcast('UiselectDemo1');
        };
        vm.enable = function () {
            vm.disabled = false;
        };
        vm.display = false;
        vm.disabled = function () {
            vm.disabled = true;
        };
        vm.enableSearch = function () {
            vm.searchEnabled = true;
        };
        vm.disableSearch = function () {
            vm.searchEnabled = false;
        };
        vm.someGroupFn = function (item) {
            if (item.name[0] >= 'A' && item.name[0] <= 'M')
                return 'From A - M';
            if (item.name[0] >= 'N' && item.name[0] <= 'Z')
                return 'From N - Z';
        };
        vm.firstLetterGroupFn = function (item) {
            return item.name[0];
        };
        vm.reverseOrderFilterFn = function (groups) {
            return groups.reverse();
        };
        vm.parkingAsync = [];
        var allParkLots = [];
        var start_index = 0;
        function queryBaiDuMapParking() {
            ManageParkingService.queryBaiDuMapParking(start_index).then(function (response) {
                if(response.parking_lots.length !== 0) {
                    start_index =  response.parking_lots[response.parking_lots.length - 1].id;
                    angular.forEach(response.parking_lots, function (value) {
                        vm.parkingAsync.push(value);
                        allParkLots.push(value.id);
                    });
                    queryBaiDuMapParking();
                }
            });
        }
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            $scope.seletParkId = vm.eventResult.model.id;
        };
        /*停车场选择-------------------------------------------------*/
        vm.dtOptions = datatablesOptions.getDatatableOption(); // 获取datatables表格设置
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5)
        ];
        $scope.totalServerItems = 0;
        $scope.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            maxid: 0,
            minid: 0,
            next_start_index: 0,
            previous_start_index: 0,
            pageSize: 50,
            pageNumber: 0,
            totalItems: null,
            getTotalPages: function () {
                return Math.ceil(this.totalItems / this.pageSize);
            },
            nextPage: function () {
                $scope.loadNextPage();
                this.pageNumber++;
            },
            previousPage: function () {
                this.pageNumber--;
                $scope.loadPreviousPage();
            }
        };
        /*加载上一页*/
        $scope.loadPreviousPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if ($scope.pagination.previous_start_index >= $scope.pagination.maxid) {
                alert('已经到第一页！');
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
            } else {
                OfflinePaymentService.readRecords($scope.pagination.previous_start_index, $scope.pagination.pageSize, $scope.pagination.pagetype.pervious_page,$scope.seletParkId,$scope.search_plate_number,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                    $scope.park_data = response.records;
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.maxid = response.maxid;
                    if($scope.park_data.length < 50){
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }

        };
        /*加载下一页*/
        $scope.loadNextPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if ($scope.pagination.next_start_index <= $scope.pagination.minid || $scope.park_data.length < 50) {
                alert('已经到最后一页！');
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
            } else {
                OfflinePaymentService.readRecords($scope.pagination.next_start_index, $scope.pagination.pageSize, $scope.pagination.pagetype.next_page,$scope.seletParkId,$scope.search_plate_number,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                    $scope.park_data = response.records;
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.minid = response.minid;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });

            }
        };
        /*加载首页*/
        $scope.loadFistPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            $scope.pagination.start_index = 0;
            $scope.pagination.maxid = 0;
            $scope.pagination.minid = 0;
            OfflinePaymentService.readHome($scope.seletParkId,$scope.search_plate_number).then(function (response) {
                if (response.records.length == 0) {
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                } else {
                    $scope.park_data = response.records;
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.maxid = response.maxid;
                    $scope.pagination.pageNumber = 1;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                }
            });

        };
        /*加载末页*/
        $scope.loadLastPage = function () {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            OfflinePaymentService.readLastPage($scope.seletParkId,$scope.search_plate_number,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                $scope.park_data = response.records;
                $scope.pagination.minid = response.minid;
                $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                $scope.pagination.previous_start_index = response.records[0].id;
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
            })
        };
        $scope.loadFistPage();
        $scope.menuState = {
            show: false
        };
        $scope.toggleMenu = function () {
            $scope.menuState.show = !$scope.menuState.show;
        };
        /*查找指定停车场或者车牌号的数据*/
        $scope.searchRecords = function () {
            $scope.pagination.start_index = 0;
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            OfflinePaymentService.readRecords( $scope.pagination.start_index, $scope.pagination.pageSize, $scope.pagination.pagetype.next_page,$scope.seletParkId,$scope.search_plate_number,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                if (response.status == 0 && response.records.length != 0) {
                    $scope.park_data = response.records;
                    $scope.pagination.next_start_index = response.records[response.records.length - 1].id;
                    $scope.pagination.previous_start_index = response.records[0].id;
                    $scope.pagination.maxid = response.maxid;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                }
            });
        };
        /*清除查找条件*/
        $scope.clearAndRefresh = function () {
            vm.parkingAsync.selecte = undefined;
            vm.seletParkId = undefined;
            $scope.search_plate_number = undefined;
            $scope.payment_channel = '',$scope.username = '',$scope.paid = '',vm.valid_begintime = '',vm.valid_endtime = '';
            $scope.loadFistPage();
        };
    }
})();
/**
 * Created by huangxiang  on 2016/11/24 0024.
 * @author:
 * Module:
 * feature:
 */
(function () {
    "use strict";
    angular.module('app.prepayment')
        .service('OfflinePaymentService',OfflinePaymentService);

    OfflinePaymentService.$inject = ['$http','URL_SEED'];

    function OfflinePaymentService($http, URL_SEED) {
        var self = this;
        var ONLINE_PAYMENT = URL_SEED.API_URL + 'billing/offlinepay/';
        /*获取首页记录*/
        self.readHome = function (parking_lot_id,plate_number,valid_begintime,valid_endtime) {
            return $http({
                method :'GET',
                url:ONLINE_PAYMENT,
                headers:{
                    'Content-Type':'application/json'
                },
                params:{
                    max_results:50,
                    start_index:0,
                    parking_lot_id:parking_lot_id,
                    plate_number:plate_number,
                    min_payment_time:valid_begintime,
                    max_payment_time:valid_endtime
                },
                withCredentials:true,
                ignoreLoadingBar: true
            }).then(function(response){
                console.log('停车入场记录=='+response.data);
                return response.data;
            });
        };

        self.readRecords = function (start_index, max_result, pagetype,parking_lot_id,plate_number,valid_begintime,valid_endtime) {
            return $http({
                method :'GET',
                url:ONLINE_PAYMENT,
                headers:{
                    'Content-Type':'application/json'
                },
                params:{
                    max_results:max_result,
                    start_index:start_index,
                    pagedirect:pagetype,
                    parking_lot_id:parking_lot_id,
                    plate_number:plate_number,
                    min_payment_time:valid_begintime,
                    max_payment_time:valid_endtime
                },
                withCredentials:true,
                ignoreLoadingBar: true
            }).then(function(response){
                return response.data;
            });
        };

        /*获取尾页记录*/
        self.readLastPage = function (parking_lot_id,plate_number,valid_begintime,valid_endtime) {
            return $http({
                method: 'GET',
                url:ONLINE_PAYMENT,
                headers:{
                    'Content-Type':'application/json'
                },
                params:{
                    max_results:50,
                    start_index:-1,
                    parking_lot_id:parking_lot_id,
                    plate_number:plate_number,
                    min_payment_time:valid_begintime,
                    max_payment_time:valid_endtime
                },
                withCredentials:true,
                ignoreLoadingBar: true
            }).then(function(response){
                return response.data;
            });
        };
    }
})();
/**
 * Created by huangxiang  on 2016/11/24 0024.
 * @author:
 * Module:
 * feature:
 */
(function () {
    angular.module('app.prepayment')
        .service('OnlinePaymentService',OnlinePaymentService);

    OnlinePaymentService.$inject = ['$http','URL_SEED'];

    'use strict';
    function OnlinePaymentService($http, URL_SEED) {
        var self = this;
        var ONLINE_PAYMENT = URL_SEED.API_URL + 'billing/onlinebill/';

        /*获取首页记录*/
        self.readHome = function (servicetype,payment_channel,username,paid,min_created_time,max_created_time,b) {
            var d=[];var c ='';
            if(b){
                d[0] = b;
                c = angular.toJson(d);
            }
            return $http({
                method :'GET',
                url:ONLINE_PAYMENT,
                headers:{
                    'Content-Type':'application/json'
                },
                params:{
                    max_results:50,
                    start_index:0,
                    servicetype:servicetype,
                    payment_channel:payment_channel,
                    paid:paid,
                    username:username,
                    min_created_time:min_created_time,
                    max_created_time:max_created_time,
                    plate_number:c
                },
                withCredentials:true,
                ignoreLoadingBar: true
            }).then(function(response){
                return response.data;
            });
        };
        self.readRecords = function (start_index,max_results, pagetype,servicetype,payment_channel,username,paid,min_created_time,max_created_time,b) {
            var d=[];var c ='';
            if(b){
                d[0] = b;
                c = angular.toJson(d);
            }
            var params = {
                    max_results:50,
                    start_index:start_index,
                    pagedirect:pagetype,
                    servicetype:servicetype,
                    payment_channel:payment_channel,
                    paid:paid,
                    username:username,
                    min_created_time:min_created_time,
                    max_created_time:max_created_time,
                    plate_number:c
                };
            return $http({
                method :'GET',
                url:ONLINE_PAYMENT,
                headers:{
                    'Content-Type':'application/json'
                },
                params:params,
                withCredentials:true,
                ignoreLoadingBar: true
            }).then(function(response){
                return response.data;
            });
        };

        /*获取尾页记录*/
        self.readLastPage = function (servicetype,payment_channel,username,paid,min_created_time,max_created_time,b) {
            var d=[];var c ='';
            if(b){
                d[0] = b;
                c = angular.toJson(d);
            }
            return $http({
                method: 'GET',
                url:ONLINE_PAYMENT,
                headers:{
                    'Content-Type':'application/json'
                },
                params:{
                    max_results:50,
                    start_index:-1,
                    servicetype:servicetype,
                    payment_channel:payment_channel,
                    paid:paid,
                    username:username,
                    min_created_time:min_created_time,
                    max_created_time:max_created_time,
                    plate_number:c
                },
                withCredentials:true,
                ignoreLoadingBar: true
            }).then(function(response){
                return response.data;
            });
        };
        self.queryDetail = function(journalid){
            return $http({
                method :'GET',
                url:ONLINE_PAYMENT,
                headers:{
                    'Content-Type':'application/json'
                },
                params:{
                    querytype:'one',
                    journalid:journalid
                },
                withCredentials:true,
                ignoreLoadingBar: true
            }).then(function(response){
                return response.data;
            });
        }
    }
})();
(function () {
    angular.module('app.vehicle')
        .controller('VehicleInController', VehicleInController);
    VehicleInController.$inject = ['VehicleInService', '$scope', 'DTColumnDefBuilder', 'ManageParkingService', 'datatablesOptions', '$document','StatusCode','logger','$interval','URL_SEED'];
    'use strict';
    function VehicleInController(VehicleInService, $scope, DTColumnDefBuilder, ManageParkingService, datatablesOptions, $document,StatusCode,logger,$interval,URL_SEED) {
        var vm = this;
        var selectPark = [];//所选择的停车场
        var queryState;
        $scope.$on("$destroy", function() {
            vm.stopQueryState();
        });
        vm.queryBaiDuMapParking = queryBaiDuMapParking;
        vm.queryBaiDuMapParking();
        vm.coupon ={
            valid_begintime:'',
            valid_endtime:''
        };
        vm.valid_begintime='';
        vm.valid_endtime='';
        vm.vehicleIn = false;
        /*停车场选择-------------------------------------------------*/
        vm.disabled = undefined;
        vm.searchEnabled = undefined;
        vm.setInputFocus = function () {
            $scope.$broadcast('UiselectDemo1');
        };
        vm.enable = function () {
            vm.disabled = false;
        };
        vm.disabled = function () {
            vm.disabled = true;
        };
        vm.enableSearch = function () {
            vm.searchEnabled = true;
        };
        vm.disableSearch = function () {
            vm.searchEnabled = false;
        };
        vm.someGroupFn = function (item) {
            if (item.name[0] >= 'A' && item.name[0] <= 'M')
                return 'From A - M';
            if (item.name[0] >= 'N' && item.name[0] <= 'Z')
                return 'From N - Z';
        };
        vm.firstLetterGroupFn = function (item) {
            return item.name[0];
        };
        vm.reverseOrderFilterFn = function (groups) {
            return groups.reverse();
        };
        vm.parkingAsync = [];
        var allParkLots = [];
        var start_index = 0;
        function queryBaiDuMapParking() {
            ManageParkingService.queryBaiDuMapParking(start_index).then(function (response) {
                if(response.parking_lots.length !== 0) {
                    start_index =  response.parking_lots[response.parking_lots.length - 1].id;
                    angular.forEach(response.parking_lots, function (value) {
                        vm.parkingAsync.push(value);
                        allParkLots.push(value.id);
                    });
                    queryBaiDuMapParking();
                }
            });
        }
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.seletParkId = vm.eventResult.model.id;
        };
        vm.seletPark = {
            id: undefined
        };
        /*停车场选择-------------------------------------------------*/
        vm.dtOptions = datatablesOptions.getDatatableOption(); // 获取datatables表格设置
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6)
        ];
        vm.totalServerItems = 0;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            maxid: 0,
            minid: 0,
            pageSize: 50,
            pageNumber: 0,
            next_start_index: 0,
            previous_start_index: 0,
            totalItems: null,
            start_index:0,
            now_start_index:0,
        };
        // /*刷新当前页*/
        vm.loadNowPage = function () {
            queryState = $interval(function(){
                if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                    vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                    vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
                }
                VehicleInService.readNowPage(vm.pagination.now_start_index, vm.pagination.pageSize,vm.pagination.new_pagetype, vm.seletParkId, vm.search_plate_number,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                    vm.vehicle = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.in_plateimg){
                            vm.vehicle[index].src =URL_SEED.IMG_URL+'media/'+value.in_vehicleimg;
                        }else {
                            vm.vehicle[index].src = URL_SEED.API_IMGURL+'app/img/no_pic.png';
                        }
                    });
                });
            },10000);
        };
        /*加载上一页*/
        vm.loadPreviousPage = function () {
            $interval.cancel(queryState);
            vm.pagination.now_start_index = vm.pagination.previous_start_index;
            vm.pagination.new_pagetype = vm.pagination.pagetype.pervious_page;
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                logger.warning('已经到首页！','','没有上一页');
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
            } else {
                VehicleInService.readRecords(vm.pagination.previous_start_index, vm.pagination.pageSize, vm.pagination.pagetype.pervious_page,  vm.seletParkId, vm.search_plate_number,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                    vm.vehicle = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.in_plateimg){
                            vm.vehicle[index].src =URL_SEED.IMG_URL+'media/'+value.in_vehicleimg;
                        }else {
                            vm.vehicle[index].src = URL_SEED.API_IMGURL+'app/img/no_pic.png';
                        }
                    });
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.maxid = response.maxid;
                    if (vm.vehicle.length < 50) {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                });
            }
            vm.loadNowPage();
        };

        /*加载下一页*/
        vm.loadNextPage = function () {
            $interval.cancel(queryState);
            vm.pagination.now_start_index = vm.pagination.previous_start_index;
            vm.pagination.new_pagetype = vm.pagination.pagetype.pervious_page;
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if (vm.pagination.next_start_index <= vm.pagination.minid) {
                logger.warning('已经到最后一页！','','没有下一页');
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
            } else {
                VehicleInService.readRecords(vm.pagination.next_start_index, vm.pagination.pageSize, vm.pagination.pagetype.next_page,  vm.seletParkId, vm.search_plate_number,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                    vm.vehicle = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.in_plateimg){
                            vm.vehicle[index].src =URL_SEED.IMG_URL+'media/'+value.in_plateimg;
                        }else {
                            vm.vehicle[index].src = URL_SEED.API_IMGURL+'app/img/no_pic.png';
                        }
                    });
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.minid = response.minid;
                    if (vm.vehicle.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    }
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });

            }
            vm.loadNowPage();
        };

        /*加载首页*/
        vm.loadFistPage = function () {
            vm.pagination.next_start_index = 0;
            vm.pagination.maxid = 0;
            vm.pagination.minid = 0;
            $interval.cancel(queryState);
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            vm.pagination.now_start_index = vm.pagination.next_start_index;
            vm.pagination.new_pagetype = vm.pagination.pagetype.pervious_page;
            VehicleInService.readHome( vm.seletParkId, vm.search_plate_number,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                if (response.status === StatusCode.SUCCESS && response.records.length !== 0) {
                    vm.vehicle = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.in_plateimg){
                            vm.vehicle[index].src =URL_SEED.IMG_URL+'media/'+value.in_plateimg;
                        }else {
                            vm.vehicle[index].src = URL_SEED.API_IMGURL+'app/img/no_pic.png';
                        }
                    });
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.maxid = response.maxid;
                    vm.pagination.pageNumber = 1;
                    // 如果记录少于20条，则灰掉所有翻页按钮
                    if (vm.vehicle.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        // 否则只灰掉上一页按钮，首页留作刷新用
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === 10003) {
                    logger.error('数据库发生错误！',response.detail,'查找失败！');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                } else {
                    logger.warning('没有找到停车记录',response.detail,'没有停车记录');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }

            });
            vm.loadNowPage();
        };
        /*加载末页*/
        vm.loadLastPage = function () {
            $interval.cancel(queryState);
            vm.pagination.now_start_index = -1;
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            vm.pagination.new_pagetype = vm.pagination.pagetype.pervious_page;
            VehicleInService.readLastPage( vm.seletParkId, vm.search_plate_number,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                vm.vehicle = response.records;
                angular.forEach(response.records, function (value,index) {
                    if(value.in_plateimg){
                        vm.vehicle[index].src =URL_SEED.IMG_URL+'media/'+value.in_plateimg;
                    }else {
                        vm.vehicle[index].src = URL_SEED.API_IMGURL+'app/img/no_pic.png';
                    }
                });
                vm.pagination.minid = response.minid;
                vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                vm.pagination.previous_start_index = response.records[0].id;
                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
            });
            vm.loadNowPage();
        };
        vm.loadFistPage();
        vm.menuState = {
            show: false
        };
        vm.toggleMenu = function () {
            vm.menuState.show = !vm.menuState.show;
        };
        vm.changeBtn = function () {
            vm.vehicleIn = !vm.vehicleIn;
            $interval.cancel(queryState);
        };
        vm.coupon ={
            valid_begintime:'',
            valid_endtime:''
        };
        vm.valid_begintime='';
        vm.valid_endtime='';
        /*查找指定停车场或者车牌号的数据*/
        vm.searchRecords = function () {
            vm.stopQueryState();
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            vm.pagination.next_start_index = 0;
            selectPark.push(vm.seletParkId);
            $interval.cancel(queryState);
            VehicleInService.readRecords(vm.pagination.next_start_index, vm.pagination.pageSize, vm.pagination.pagetype.next_page, vm.seletParkId, vm.search_plate_number,vm.valid_begintime,vm.valid_endtime).then(function (response) {
                if (response.status === StatusCode.SUCCESS && response.records.length !== 0) {
                    vm.vehicle = response.records;
                    angular.forEach(response.records, function (value,index) {
                        if(value.in_plateimg){
                            vm.vehicle[index].src =URL_SEED.IMG_URL+'media/'+value.in_plateimg;
                        }else {
                            vm.vehicle[index].src = URL_SEED.API_IMGURL+'app/img/no_pic.png';
                        }
                    });
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.maxid = response.maxid;
                    if (vm.vehicle.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    } else {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                } else if (response.status === StatusCode.NO_INOUT_RECORD) {
                    logger.warning('没有找到停车记录',response.detail,'没有停车记录');
                } else {
                    logger.error('没有找到停车记录',response.detail,'数据库错误');
                }
            });
        };
        /*清除查找条件*/
        vm.clearAndRefresh = function () {
            vm.seletPark.id = '';
            vm.search_plate_number = '';
            vm.parkingAsync.selected = '';
            vm.seletParkId = '';vm.search_plate_number = '';vm.valid_begintime = '';vm.valid_endtime = '';
            vm.coupon ={
                valid_begintime:'',
                valid_endtime:''
            };
            vm.valid_begintime='';
            vm.valid_endtime='';
            vm.loadNowPage();
        };

        vm.stopQueryState = function(){
            if (angular.isDefined(queryState)) {
                $interval.cancel(queryState);
                queryState = undefined;
            }
        }

    }
})();
/**
 * Created by huangxiang  on 2016/11/24 0024.
 * @author: huangxiang
 * Module: vehicle.in.service.js
 * feature: 停车入场记录与后台交互service
 */
(function () {
    angular.module('app.vehicle')
        .service('VehicleInService',VehicleInService);
    VehicleInService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function VehicleInService($http, URL_SEED) {
        var self = this;
        var baseUrl = URL_SEED.API_URL + 'parking/inout/';
        /*获取首页记录*/
        self.readHome = function (parking_lot_id,plate_number,a,b) {
            return $http({
                method: 'GET',
                url: baseUrl,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    max_results: 50,
                    start_index: 0,
                    parklotids:parking_lot_id,
                    plate_number:plate_number,
                    type:1,
                    min_intime:a,
                    max_intime:b
                },
                withCredentials: true,
                ignoreLoadingBar: true
            }).then(function (response) {
                return response.data;
            });
        };
        self.readRecords = function (start_index,max_results , pagetype,parking_lot_id,plate_number,a,b) {
            return $http({
                method: 'GET',
                url: baseUrl,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    max_results: 50,
                    start_index: start_index,
                    pagedirect: pagetype,
                    parklotids:parking_lot_id,
                    plate_number:plate_number,
                    type:1,
                    min_intime:a,
                    max_intime:b
                },
                withCredentials: true,
            }).then(function (response) {
                return response.data;
            });
        };

        /*获取尾页记录*/
        self.readLastPage = function (parking_lot_id,plate_number,a,b) {
            return $http({
                method: 'GET',
                url: baseUrl,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    max_results: 50,
                    start_index: -1,
                    parklotids:parking_lot_id,
                    plate_number:plate_number,
                    type:1,
                    min_intime:a,
                    max_intime:b
                },
                withCredentials: true,
                ignoreLoadingBar: true
            }).then(function (response) {
                return response.data;
            });
        };
        /*刷新当前页的数据*/
        self.readNowPage = function (now_start_index,now_max_results,pagetype,parking_lot_id,now_plate_number,a,b) {
            return $http({
                method: 'GET',
                url: baseUrl,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    max_results: now_max_results,
                    start_index: now_start_index,
                    pagedirect: pagetype,
                    parking_lot_id:parking_lot_id,
                    plate_number:now_plate_number,
                    type:1,
                    min_intime:a,
                    max_intime:b
                },
                withCredentials: true,
                ignoreLoadingBar: true
            }).then(function (response) {
                return response.data;
            });
        };
    }
})();
/**
 * Town.controller.js
 * @author: yumaotao
 * @create 2017/11/6
 * @feather: 区域信息表单初始化配置
 */
(function () {
    angular.module('app.basicinfo')
        .controller('platfromPowerController', platfromPowerController);
    platfromPowerController.$inject = ['$location', 'platformService', 'DTColumnDefBuilder', 'datatablesOptions', 'platformFactory', '$uibModal','$document','logger'];
    'use strict';
    function platfromPowerController($location, platformService, DTColumnDefBuilder, datatablesOptions, platformFactory, $uibModal,$document,logger) {
        var vm = this;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            next_start_index:0,
            previous_start_index:0,
            maxid: 0,
            minid: 0
        };
        vm.number={
            start:0,
            next:0
        };
        vm.queryPlatformPower = queryPlatformPower;
        vm.modifyPlatformPower = modifyPlatformPower;
        vm.readRecords = readRecords;
        vm.readRecords(0);
        vm.dtOptions = datatablesOptions.getDatatableOption(); // 获取datatables表格设置
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7).notSortable()
        ];
        function queryPlatformPower() {
            platformService.queryPlatform().then(function (response) {
                vm.platfromPowerPower = response.records;
            });
        }
        function modifyPlatformPower(platfrom) {
            platformFactory.setPlatform(platfrom);
            $location.path('/app/platform/modify-platform-power');
        }
        function readRecords(start_index){
            if(start_index == 0){//首页index
                platformService.readRecords(0,'').then(function (response) {
                    vm.platfromPower =  response.records;
                    vm.number.start = vm.platfromPower[0];
                    vm.number.next = vm.platfromPower[vm.platfromPower.length - 1].number;
                    vm.pagination.next_start_index =  response.records[ response.records.length - 1].id;
                    vm.pagination.previous_start_index =  response.records[0].id;
                    vm.pagination.maxid = response.maxid;
                    if ( response.records.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else{
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                });
            }else if(start_index == 1){//上一页
                if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                    logger.warning('已经到首页！','','没有上一页');
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }else{
                    platformService.readRecords(vm.pagination.previous_start_index,0).then(function (response) {
                        vm.platfromPower =  response.records;
                        vm.number.start = vm.platfromPower[0];
                        vm.number.next = vm.platfromPower[vm.platfromPower.length - 1].number;
                        vm.pagination.next_start_index =  response.records[ response.records.length - 1].id;
                        vm.pagination.previous_start_index =  response.records[0].id;
                        vm.pagination.maxid = response.maxid;
                        if ( response.records.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        }
                    });
                }
            }else if(start_index == 2){//下一页
                if (vm.pagination.next_start_index <= vm.pagination.minid) {
                    logger.warning('已经到最后一页！','','没有下一页');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                }else{
                    platformService.readRecords(vm.pagination.next_start_index,1).then(function (response) {
                        vm.platfromPower =  response.records;
                        vm.number.start = vm.platfromPower[0];
                        vm.number.next = vm.platfromPower[vm.platfromPower.length - 1].number;
                        vm.pagination.next_start_index =  response.records[ response.records.length - 1].id;
                        vm.pagination.previous_start_index =  response.records[0].id;
                        vm.pagination.minid = response.minid;
                        if ( response.records.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        }
                    });
                }
            }else if(start_index == 3){//加载最后一页
                platformService.readRecords(-1,'').then(function (response) {
                    vm.platfromPower =  response.records;
                    vm.number.start = vm.platfromPower[0];
                    vm.number.next = vm.platfromPower[vm.platfromPower.length - 1].number;
                    vm.pagination.next_start_index =  response.records[ response.records.length - 1].id;
                    vm.pagination.previous_start_index =  response.records[0].id;
                    vm.pagination.minid = response.minid;
                    if ( response.records.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else{
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    }
                });
            }
        }
    }
})();
(function () {
    "use strict";
    angular.module('app.basicinfo')
        .controller('modifyPlatformPowerController', modifyPlatformPowerController);
    modifyPlatformPowerController.$inject = ['$scope', '$timeout', '$location','platformService', 'toastr','platformFactory','ManageParkingService','logger'];
    function modifyPlatformPowerController($scope, $timeout, $location, platformService, toastr,platformFactory,ManageParkingService,logger) {
        var vm = this;
        vm.parkSearchText = ''; // 停车场搜索关键字
        vm.GroupSelectedAvailItems = [];
        vm.GroupSelectedSelectedListItems = [];
        vm.GroupSelectedListItems = [];
        vm.GroupAvailableListItems = [];
        vm.ParkSelectedAvailItems = [];
        vm.ParkSelectedSelectedListItems = [];
        vm.ParkSelectedListItems = [];
        vm.ParkAvailableListItems = [];
        vm.currentParkSelect=[];
        var selectGroup = [];
        var selectPark = [];
        /*获取停车场列表*/
        ManageParkingService.queryParking().then(function (response) {
            vm.allParking = response.parking_lots;
            angular.copy(vm.allParking, vm.ParkAvailableListItems);
        });
        /*获取平台信息*/
        platformService.queryPlatformPower(platformFactory.getPlatform().id).then(function (response) {
            vm.currentOperator = response;
            angular.copy(vm.currentOperator.records, vm.ParkSelectedListItems); // 获取用户当前所能操作停车场
            angular.forEach(vm.ParkSelectedListItems, function (value) {
                for (var i = vm.ParkSelectedListItems.length - 1; i >= 0; i--) {
                    vm.ParkSelectedListItems[i].name = vm.ParkSelectedListItems[i].parkname;
                }
            });
            // 用户已有的停车场从可用停车场删除
            angular.forEach(vm.ParkSelectedListItems, function (value) {
                for (var i = vm.ParkAvailableListItems.length - 1; i >= 0; i--) {
                    if (vm.ParkAvailableListItems[i].name == value.name) {
                        vm.ParkAvailableListItems.splice(i, 1);
                    }
                }
            });
            // 将用户已有停车场的id存入一个数组
            angular.forEach(vm.currentOperator.records, function (data) {
                selectPark.push(data.parkid);
            });
        });

        vm.OnAvailableChange = function () {
            vm.AvailLength = vm.SelectedAvailItems.length;
        };
        // 停车场操作
        /*从左边等select移动至右边的select*/
        vm.ParkBtnRight = function () {
            //move selected.
            angular.forEach(vm.ParkSelectedAvailItems, function (value) {
                this.push(value);
            }, vm.ParkSelectedListItems);

            //remove the ones that were moved.
            angular.forEach(vm.ParkSelectedAvailItems, function (value) {
                for (var i = vm.ParkAvailableListItems.length - 1; i >= 0; i--) {
                    if (vm.ParkAvailableListItems[i].name == value.name) {
                        vm.ParkAvailableListItems.splice(i, 1);
                        selectPark.push(value.id);
                    }
                }
            });
            vm.ParkSelectedAvailItems = [];
        };
        /*把左边select中等所有option移动至右边等select内*/
        vm.ParkBtnAllRight = function () {
            //move all.
            angular.forEach(vm.ParkAvailableListItems, function (value) {
                this.push(value);
                selectPark.push(value.id);
            }, vm.ParkSelectedListItems);
            //remove the ones that were moved from the source.
            for (var i = vm.ParkAvailableListItems.length - 1; i >= 0; i--) {
                vm.ParkAvailableListItems.splice(i, 1);
            }
        };
        /*把右边select中选中的option移动至左边等select中*/
        vm.ParkBtnLeft = function () {
            //move selected.
            angular.forEach(vm.ParkSelectedSelectedListItems, function (value) {
                this.push(value);
            }, vm.ParkAvailableListItems);

            //remove the ones that were moved from the source container.
            angular.forEach(vm.ParkSelectedSelectedListItems, function (value) {
                for (var i = vm.ParkSelectedListItems.length - 1; i >= 0; i--) {
                    if (vm.ParkSelectedListItems[i].name == value.name) {
                        vm.ParkSelectedListItems.splice(i, 1);
                        selectPark.splice(i, 1);
                    }
                }
            });
            vm.ParkSelectedSelectedListItems = [];
        };
        /*把左边select中的全部option移动至右边等select中*/
        vm.ParkBtnAllLeft = function () {
            //move over all items
            angular.forEach(vm.ParkSelectedListItems, function (value) {
                this.push(value);
            }, vm.ParkAvailableListItems);

            //remove the ones that were moved from the source.
            for (var i = vm.ParkSelectedListItems.length - 1; i >= 0; i--) {
                vm.ParkSelectedListItems.splice(i, 1);
            }
            selectPark = [];
            vm.ParkSelectedSelectedListItems = [];
        };
        vm.BaoCunOperator = function () {
            platformService.modifyPlatformPower(platformFactory.getPlatform().id,selectPark).then(function (response) {
                if (response.status == 0) {
                    logger.success('操作成功', response.detail, '你已成功修改平台' + '‘' + platformFactory.getPlatform().id + '’！');
                    $location.path('/app/platform-power');
                } else {
                    alert('修改失败！！' + response.detail);
                }
            });
        };
        vm.backToPrevious = function () {
            $location.path('/app/platform-power');
        };
    }
})();
/**
 * park.add.controller.js
 * @author: huangxiang
 * @create 2016-12-23 16:43
 */
(function () {
    angular.module('app.basicinfo')
        .controller('addPlatformController', addPlatformController);
    addPlatformController.$inject = ['$location', 'platformService', 'logger'];
    'use strict';
    function addPlatformController($location, platformService, logger) {
        var vm = this;
        vm.addPlatform = addPlatform;
        vm.backToPrevious = backToPrevious;
        function addPlatform() {
            platformService.addPlatform(vm.platform.plateformname,vm.platform.username,vm.platform.loginurl,vm.platform.password,vm.platform.encrypt_passwd,vm.platform.dataurl,vm.platform.param1).then(function (response) {
                if (response.status === 0) {
                    logger.success('添加成功'+'平台：'+vm.platform.plateformname,'操作成功');
                    $location.path('/app/platform');
                }else if (response.status === 40004) {
                    logger.error('添加失败' + '"' + vm.platform.plateformname + '"' + '失败!', vm.platform.plateformname, '该平台已经存在！');
                }  else {
                    logger.error('添加失败');
                }
            });
        }
        function backToPrevious() {
            $location.path('/app/platform');
        }
    }
})();
/**
 * Town.controller.js
 * @author: yumaotao
 * @create 2017/11/6
 * @feather: 区域信息表单初始化配置
 */
(function () {
    angular.module('app.basicinfo')
        .controller('platfromController', platfromController);
    platfromController.$inject = ['$location', 'platformService', 'DTColumnDefBuilder', 'datatablesOptions', 'platformFactory', '$uibModal','$document','logger'];
    'use strict';
    function platfromController($location, platformService, DTColumnDefBuilder, datatablesOptions, platformFactory, $uibModal,$document,logger) {
        var vm = this;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            next_start_index:0,
            previous_start_index:0,
            maxid: 0,
            minid: 0
        };
        vm.number={
            start:0,
            next:0
        };
        vm.queryPlatform = queryPlatform;
        vm.addPlatform = addPlatform;
        vm.deletePlatform = deletePlatform;
        vm.modifyPlatform = modifyPlatform;
        vm.readRecords = readRecords;
        vm.readRecords(0);
        vm.dtOptions = datatablesOptions.getDatatableOption(); // 获取datatables表格设置
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7).notSortable()
        ];
        function queryPlatform() {
            platformService.queryPlatform().then(function (response) {
                vm.platfrom = response.records;
            });
        }
        function addPlatform() {
            $location.path('/app/platform/add-new-platform');
        }
        function deletePlatform(platfrom) {
            platformFactory.setPlatform(platfrom);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: 'deletePlatform.html',
                size: 'sm',
                controller: 'platfromDeleteController',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                vm.readRecords(0);
            });
        }
        function modifyPlatform(platfrom) {
            platformFactory.setPlatform(platfrom);
            $location.path('/app/platform/modify-platform');
        }
        function readRecords(start_index){
            if(start_index == 0){//首页index
                platformService.readRecords(0,'').then(function (response) {
                    vm.platfrom =  response.records;
                    vm.number.start = vm.platfrom[0];
                    vm.number.next = vm.platfrom[vm.platfrom.length - 1].number;
                    vm.pagination.next_start_index =  response.records[ response.records.length - 1].id;
                    vm.pagination.previous_start_index =  response.records[0].id;
                    vm.pagination.maxid = response.maxid;
                    if ( response.records.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else{
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                });
            }else if(start_index == 1){//上一页
                if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                    logger.warning('已经到首页！','','没有上一页');
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }else{
                    platformService.readRecords(vm.pagination.previous_start_index,0).then(function (response) {
                        vm.platfrom =  response.records;
                        vm.number.start = vm.platfrom[0];
                        vm.number.next = vm.platfrom[vm.platfrom.length - 1].number;
                        vm.pagination.next_start_index =  response.records[ response.records.length - 1].id;
                        vm.pagination.previous_start_index =  response.records[0].id;
                        vm.pagination.maxid = response.maxid;
                        if ( response.records.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        }
                    });
                }
            }else if(start_index == 2){//下一页
                if (vm.pagination.next_start_index <= vm.pagination.minid) {
                    logger.warning('已经到最后一页！','','没有下一页');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                }else{
                    platformService.readRecords(vm.pagination.next_start_index,1).then(function (response) {
                        vm.platfrom =  response.records;
                        vm.number.start = vm.platfrom[0];
                        vm.number.next = vm.platfrom[vm.platfrom.length - 1].number;
                        vm.pagination.next_start_index =  response.records[ response.records.length - 1].id;
                        vm.pagination.previous_start_index =  response.records[0].id;
                        vm.pagination.minid = response.minid;
                        if ( response.records.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        }
                    });
                }
            }else if(start_index == 3){//加载最后一页
                platformService.readRecords(-1,'').then(function (response) {
                    vm.platfrom =  response.records;
                    vm.number.start = vm.platfrom[0];
                    vm.number.next = vm.platfrom[vm.platfrom.length - 1].number;
                    vm.pagination.next_start_index =  response.records[ response.records.length - 1].id;
                    vm.pagination.previous_start_index =  response.records[0].id;
                    vm.pagination.minid = response.minid;
                    if ( response.records.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else{
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    }
                });
            }
        }
    }
})();
(function(){
    angular.module('app.basicinfo')
        .controller('platfromDeleteController',platfromDeleteController);
    platfromDeleteController.$inject = ['$uibModalInstance','platformService','platformFactory','logger'];
    'use strict';
    function platfromDeleteController($uibModalInstance,platformService,platformFactory,logger) {
        var vm = this;
        vm.deletePlatform = deletePlatform;
        vm.cancel = cancel;
        function deletePlatform() {
            platformService.deletePlatform(platformFactory.getPlatform().id).then(function (response) {
                if(response.status === 0){
                    $uibModalInstance.close('closed');
                    logger.success('成功刪除'+platformFactory.getPlatform().plateformname,response.data,'操作成功！');
                }else {
                    logger.error('删除失败'+platformFactory.getPlatform().plateformname + '失败！！',response.data,'操作失败！');
                }
            });
        }
        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
/**
 * basic.police.factory.js
 * @author: yumaotao
 * @create 2017/12/2
 */
(function () {
    angular.module('app.basicinfo')
        .factory('platformFactory', platformFactory);
    'use strict';
    function platformFactory(){
        var platform = {
            id:'',//平台数据id
            plateformname:'',//平台名字
            loginurl:'',//平台登录url
            username:'',//平台用户名
            password:'',//平台密码
            encrypt_passwd:'',//平台加密密码
            dataurl:'',//数据上传接口
            param1:''//可以用来保存密钥文件的路径
        };
        return {
            setPlatform: setPlatform,
            getPlatform: getPlatform
        };
        function setPlatform(cPlatform) {
            platform.id = cPlatform.id;
            platform.plateformname = cPlatform.plateformname;
            platform.loginurl = cPlatform.loginurl;
            platform.username = cPlatform.username;
            platform.password = cPlatform.password;
            platform.encrypt_passwd = cPlatform.encrypt_passwd;
            platform.dataurl = cPlatform.dataurl;
            platform.param1 = cPlatform.param1;
        }
        function getPlatform() {
            return platform;
        }
    }
})();
(function () {
    "use strict";
    angular.module('app.basicinfo')
        .controller('modifyPlatformController', modifyPlatformController);
    modifyPlatformController.$inject = ['$scope', '$timeout', '$location','platformService', 'toastr','platformFactory'];
    function modifyPlatformController($scope, $timeout, $location, platformService, toastr,platformFactory) {
        var vm = this;
        vm.getPlatform =  getPlatform;
        vm.getPlatform();
        function getPlatform() {
            $timeout(function () {
                vm.platform = platformFactory.getPlatform();
            }, 500);
        };
        vm.modifyPlatform = function () {
            platformService.modifyPlatform(vm.platform.id,vm.platform.plateformname,vm.platform.username,vm.platform.loginurl,vm.platform.password,vm.platform.encrypt_passwd,vm.platform.dataurl,vm.platform.param1).then(function (response) {
                if (response.status == 0) {
                    toastr.success('修改成功!!', response, {
                        closeButton: true,
                        progressBar: true,
                        positionClass: 'toast-top-center'
                    });
                    $location.path('/app/platform');
                }
            });
        };
        vm.backToPrevious = function () {
            $location.path('/app/platform');
        };
    }
})();
/**
 * basic.Platform.factory.js
 * @author: yumaotao
 * @create 2017/12/2
 */
(function () {
    angular.module('app.basicinfo')
        .factory('platformService', platformService);
    platformService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function platformService($http, URL_SEED) {
        var PLATFORM_URL = URL_SEED.API_URL + 'join3rd/platefrom3rd/'
        var PLATFORM_POWER_URL = URL_SEED.API_URL + 'join3rd/dataObject/'
        return {
            queryPlatform:queryPlatform,
            addPlatform: addPlatform,
            deletePlatform:deletePlatform,
            modifyPlatform:modifyPlatform,
            modifyPlatformPower:modifyPlatformPower,
            queryPlatformPower:queryPlatformPower,
            readRecords:readRecords
        };
        function queryPlatform() {
            return $http({
                method: 'GET',
                url: PLATFORM_URL,
                params: {
                    querytype: 'all',
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function addPlatform(plateformname,username,loginurl,password,encrypt_passwd,dataurl,param1) {
            var platform = angular.toJson({
                    plateformname: plateformname,
                    username: username,
                    loginurl: loginurl,
                    password: password,
                    encrypt_passwd: encrypt_passwd,
                    dataurl: dataurl,
                    param1: param1
            });
            return $http({
                method: 'POST',
                url: PLATFORM_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: platform,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function deletePlatform(id) {
            var platform = angular.toJson({plateformid: id});
            return $http({
                method: 'DELETE',
                url: PLATFORM_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: platform,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function modifyPlatform(platformid,plateformname,username,loginurl,password,encrypt_passwd,dataurl,param1) {
            var platform = angular.toJson({
                platformid:platformid,
                plateformname: plateformname,
                username: username,
                loginurl: loginurl,
                password: password,
                encrypt_passwd: encrypt_passwd,
                dataurl: dataurl,
                param1: param1
            });
            return $http({
                method: 'PUT',
                url: PLATFORM_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: platform,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function queryPlatformPower(plateform) {
            return $http({
                method: 'GET',
                url: PLATFORM_POWER_URL,
                params: {
                    plateform: plateform,
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function modifyPlatformPower(staffid, parklots) {
            var platformPower = angular.toJson({plateform: staffid,objidentifier: parklots});
            return $http({
                method: 'PUT',
                url: PLATFORM_POWER_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: platformPower,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function readRecords(start_index,pagedirect) {
            var readRecords = angular.toJson({
                start_index:start_index,
                pagedirect : pagedirect       // 组织名称
            });
            return $http({
                method: 'GET',
                url: PLATFORM_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: readRecords,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
    }
})();
(function() {
    'use strict';

    angular
        .module('app.preloader')
        .directive('preloader', preloader);

    preloader.$inject = ['$animate', '$timeout', '$q'];
    function preloader ($animate, $timeout, $q) {

        var directive = {
            restrict: 'EAC',
            template: 
              '<div class="preloader-progress">' +
                  '<div class="preloader-progress-bar" ' +
                       'ng-style="{width: loadCounter + \'%\'}"></div>' +
              '</div>'
            ,
            link: link
        };
        return directive;

        ///////

        function link(scope, el) {

          scope.loadCounter = 0;

          var counter  = 0,
              timeout;

          // disables scrollbar
          angular.element('body').css('overflow', 'hidden');
          // ensure class is present for styling
          el.addClass('preloader');

          appReady().then(endCounter);

          timeout = $timeout(startCounter);

          ///////

          function startCounter() {

            var remaining = 100 - counter;
            counter = counter + (0.015 * Math.pow(1 - Math.sqrt(remaining), 2));

            scope.loadCounter = parseInt(counter, 10);

            timeout = $timeout(startCounter, 20);
          }

          function endCounter() {

            $timeout.cancel(timeout);

            scope.loadCounter = 100;

            $timeout(function(){
              // animate preloader hiding
              $animate.addClass(el, 'preloader-hidden');
              // retore scrollbar
              angular.element('body').css('overflow', '');
            }, 300);
          }

          function appReady() {
            var deferred = $q.defer();
            var viewsLoaded = 0;
            // if this doesn't sync with the real app ready
            // a custom event must be used instead
            var off = scope.$on('$viewContentLoaded', function () {
              viewsLoaded ++;
              // we know there are at least two views to be loaded 
              // before the app is ready (1-index.html 2-app*.html)
              if ( viewsLoaded === 2) {
                // with resolve this fires only once
                $timeout(function(){
                  deferred.resolve();
                }, 3000);

                off();
              }

            });

            return deferred.promise;
          }

        } //link
    }

})();
(function () {
    angular.module('app.parking')
        .controller('organReconcileController', organReconcileController);
    organReconcileController.$inject = ['$location', 'organService', 'datatablesOptions', 'DTColumnDefBuilder','organReconcileService','$scope','organReconcileFactory','$uibModal','URL_SEED','logger'];
    'use strict';
    function organReconcileController($location, organService, datatablesOptions, DTColumnDefBuilder,organReconcileService,$scope,organReconcileFactory,$uibModal,URL_SEED,logger) {
        var vm = this;
        vm.queryOrganReconcile = queryOrganReconcile;
        vm.queryOrgan = queryOrgan;
        vm.queryOrgan();
        var selectOrgan = [];//所选择运营单位
        vm.OrganAsync = [];
        var allOrgans = [];
        function queryOrgan() {
            organService.queryOrgan().then(function (response) {
                vm.OrganAsync = response.records;
                angular.forEach(response.records, function (value) {
                    allOrgans.push(value.id);
                });
            });
        }
        vm.onSelectCallbackOrgan = function (item) {
            vm.eventResult = {model: item};
            vm.organId = vm.eventResult.model.id;
        };
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        vm.coupon ={
            valid_begintime:undefined,
            valid_endtime:undefined
        };
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        /*时间日历设置------------------------------------------------*/
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            next_start_index:0,
            previous_start_index:0,
            maxid: 0,
            minid: 0
        };
        vm.number={
            start:0,
            next:0
        };
        /*停车场选择-------------------------------------------------*/
        vm.dtOptions = datatablesOptions.getDatatableOption(); // 获取datatables表格设置
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8),
            DTColumnDefBuilder.newColumnDef(9),
            DTColumnDefBuilder.newColumnDef(10),
            DTColumnDefBuilder.newColumnDef(10),
            DTColumnDefBuilder.newColumnDef(11),
            DTColumnDefBuilder.newColumnDef(12),
            DTColumnDefBuilder.newColumnDef(13),
            DTColumnDefBuilder.newColumnDef(14),
            DTColumnDefBuilder.newColumnDef(15),
            DTColumnDefBuilder.newColumnDef(16),
            DTColumnDefBuilder.newColumnDef(17),
            DTColumnDefBuilder.newColumnDef(18),
            DTColumnDefBuilder.newColumnDef(19),
            DTColumnDefBuilder.newColumnDef(20)
        ];
        vm.show = false;
        //查询停车场功能
        function queryOrganReconcile() {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
                organReconcileService.readRecords(vm.organId,vm.valid_begintime,vm.valid_endtime,vm.lottype).then(function (response) {
                    var i = 0;
                    vm.reconcileDate = [];
                    angular.forEach(response.data.parklot_summary, function (value,index) {
                        vm.reconcileDate[i] = value;
                        vm.reconcileDate[i].numberId = index;
                        vm.reconcileDate[i].id = i+1;
                        i++;
                    });
                    var countDate= {};
                    var countDateId = i+1;
                    var countDateName = '合计';
                    countDate.id =countDateId;
                    countDate.parklotname = countDateName;
                    countDate.aggregate_amount = response.data.aggregate_amount;
                    countDate.alipay_amount = response.data.alipay_amount;
                    countDate.alipay_refund = response.data.alipay_refund;
                    countDate.alipay_stroke_count = response.data.alipay_stroke_count;
                    countDate.alipay_surplus = response.data.alipay_surplus;
                    countDate.general_surplus = response.data.general_surplus;
                    countDate.total_refund = response.data.total_refund;
                    countDate.total_refund_stroke_count = response.data.total_refund_stroke_count;
                    countDate.total_stroke_count = response.data.total_stroke_count;
                    countDate.wechatpay_refund = response.data.wechatpay_refund;
                    countDate.wechatpay_stroke_count = response.data.wechatpay_stroke_count;
                    countDate.wechatpay_surplus = response.data.wechatpay_surplus;
                    countDate.wechatpay_amount = response.data.wechatpay_amount;
                    countDate.coupon_fee = response.data.coupon_fee;
                    countDate.apppay_amount = response.data.apppay_amount;
                    countDate.apppay_surplus = response.data.apppay_surplus;
                    countDate.apppay_refund = response.data.apppay_refund;
                    countDate.apppay_stroke_count = response.data.apppay_stroke_count;
                    vm.reconcileDate[i] = countDate;
                    vm.allData =  response.data;
                    vm.show = true;
                });
            }
        }
        vm.exportReconcile = exportReconcile;
        vm.clearAndRefresh = clearAndRefresh;
        function clearAndRefresh() {
            vm.OrganAsync.selected = undefined;
            vm.coupon.valid_endtime = undefined ;
            vm.coupon.valid_begintime = undefined ;
            vm.reconcileDate = '';
            vm.show = false;
            vm.allData = '';
            vm.lottype = '';
        }
        vm.parkReconcile = parkReconcile;
        function parkReconcile(reconcileDate,b) {
            var obj = {
                id:reconcileDate,
                parklotname:b,
                valid_begintime:vm.valid_begintime,
                valid_endtime:vm.valid_endtime,
                organId:vm.organId,
                lottype:vm.lottype
            }
            organReconcileFactory.setorganReconcile(obj);
            $location.path('/app/reconcile');
        }
        function exportReconcile() {
            vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
            vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            var obj = {
                valid_begintime:vm.valid_begintime,
                valid_endtime:vm.valid_endtime,
                organId:vm.organId,
                lottype:vm.lottype
            }
            organReconcileFactory.setorganReconcile(obj);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: 'exportDetail.html',
                size: 'lg',
                controller: 'organReconcileExportController',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                vm.queryOrganReconcile();
            });
        }
    }

})();
(function () {
    angular.module('app.parking')
        .controller('organReconcileExportController', organReconcileExportController);
    organReconcileExportController.$inject = ['organReconcileService','organReconcileFactory','URL_SEED','logger','$uibModalInstance'];
    'use strict';
    function organReconcileExportController(organReconcileService,organReconcileFactory,URL_SEED,logger,$uibModalInstance) {
        var vm = this;
        var obj = organReconcileFactory.getorganReconcile();
        vm.exportReconcile = exportReconcile;
        vm.exportReconcile();
        function exportReconcile() {
            organReconcileService.exportReconcile(obj.organId,obj.valid_begintime,obj.valid_endtime,obj.lottype).then(function (response) {
                if(response.status == 0){
                    vm.detaliName = response.detailfile;
                    vm.sumName = response.summaryfile;
                     vm.detailfile = URL_SEED.IMG_URL +'media/'+response.detailfile;
                     vm.summaryfile = URL_SEED.IMG_URL +'media/'+response.summaryfile;
                }else {
                    logger.warning('查询失败！','','请重现查询导出');
                }
            });
        }
        vm.cancel = cancel;
        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
(function () {
    angular.module('app.parking')
        .factory('organReconcileFactory', organReconcileFactory);
    'use strict';
    function organReconcileFactory() {
        var organReconcile = {
            id:'',
            organId:'',
            valid_begintime:'',
            valid_endtime:'',
            parklotname:'',
            lottype:''
        };
        return {
            setorganReconcile: setorganReconcile,
            getorganReconcile: getorganReconcile
        };
        function setorganReconcile(cOrganReconcile,b) {
            organReconcile.id = cOrganReconcile.id;
            organReconcile.organId = cOrganReconcile.organId;
            organReconcile.valid_begintime = cOrganReconcile.valid_begintime;
            organReconcile.valid_endtime = cOrganReconcile.valid_endtime;
            organReconcile.parklotname = cOrganReconcile.parklotname;
            organReconcile.lottype = cOrganReconcile.lottype;
        }
        function getorganReconcile() {
            return organReconcile;
        }
    }
})();
(function () {
    angular.module('app.parking')
        .factory('organReconcileService', organReconcileService);
    organReconcileService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function organReconcileService($http, URL_SEED) {
        var service = {};
        var ORGAN_URL = URL_SEED.API_URL + 'billing/parklotreconcile/';
        service.readRecords =function(organId,begintime,endtime,lottype) {
            return $http({
                method: 'GET',
                url: ORGAN_URL,
                params: {
                    ownerid:organId,
                    begintime:begintime,
                    endtime:endtime,
                    lottype:lottype
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        service.exportReconcile =function(organId,begintime,endtime,lottype) {
            var reconcileDate = angular.toJson({
                ownerid:organId,
                begintime:begintime,
                endtime:endtime,
                lottype:lottype
            });
            return $http({
                method: 'POST',
                url: ORGAN_URL,
                data: reconcileDate,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        return service;
    }
})();

(function () {
    angular.module('app.parking')
        .controller('reconcileController', reconcileController);
    reconcileController.$inject = ['$location', 'ManageParkingService', 'datatablesOptions', 'DTColumnDefBuilder','reconcileService','$scope','organReconcileFactory','$uibModal','URL_SEED','logger','reconcileExportFactory'];
    'use strict';
    function reconcileController($location, ManageParkingService, datatablesOptions, DTColumnDefBuilder,reconcileService,$scope,organReconcileFactory,$uibModal,URL_SEED,logger,reconcileExportFactory) {
        var vm = this;
        vm.queryReconcile = queryReconcile;
        vm.coupon ={
            valid_begintime:undefined,
            valid_endtime:undefined
        };
        vm.parkingAsync = [];
        var obj = organReconcileFactory.getorganReconcile();
        vm.seletParkId = obj.id;vm.coupon.valid_begintime = obj.valid_begintime;vm.coupon.valid_endtime = obj.valid_endtime;vm.parkingAsync.selected = obj.parklotname;
        if(obj.id && obj.valid_begintime && obj.valid_endtime && obj.parklotname){
            vm.queryReconcile();
        }
        vm.queryBaiDuMapParking = queryBaiDuMapParking;
        vm.queryBaiDuMapParking();
        var selectPark = [];//所选择的停车场
        /*停车场选择-------------------------------------------------*/
        vm.disabled = undefined;
        vm.searchEnabled = undefined;
        vm.setInputFocus = function () {
            $scope.$broadcast('UiselectDemo1');
        };
        vm.enable = function () {
            vm.disabled = false;
        };
        vm.disabled = function () {
            vm.disabled = true;
        };
        vm.enableSearch = function () {
            vm.searchEnabled = true;
        };
        vm.disableSearch = function () {
            vm.searchEnabled = false;
        };
        vm.someGroupFn = function (item) {
            if (item.name[0] >= 'A' && item.name[0] <= 'M')
                return 'From A - M';
            if (item.name[0] >= 'N' && item.name[0] <= 'Z')
                return 'From N - Z';
        };
        vm.firstLetterGroupFn = function (item) {
            return item.name[0];
        };
        vm.reverseOrderFilterFn = function (groups) {
            return groups.reverse();
        };

        var allParkLots = [];
        var start_index = 0;
        function queryBaiDuMapParking() {
            ManageParkingService.queryBaiDuMapParking(start_index).then(function (response) {
                if(response.parking_lots.length !== 0) {
                    start_index =  response.parking_lots[response.parking_lots.length - 1].id;
                    angular.forEach(response.parking_lots, function (value) {
                        vm.parkingAsync.push(value);
                        allParkLots.push(value.id);
                    });
                    queryBaiDuMapParking();
                }
            });
        }

        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.seletParkId = vm.eventResult.model.id;
        };
        /*停车场选择-------------------------------------------------*/
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });

        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        /*时间日历设置------------------------------------------------*/
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            next_start_index:0,
            previous_start_index:0,
            maxid: 0,
            minid: 0
        };
        vm.number={
            start:0,
            next:0
        };
        /*停车场选择-------------------------------------------------*/
        vm.dtOptions = datatablesOptions.getDatatableOption(); // 获取datatables表格设置
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8),
            DTColumnDefBuilder.newColumnDef(9),
            DTColumnDefBuilder.newColumnDef(10)
        ];
        vm.show = false;
        //查询停车场功能
        function queryReconcile() {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
                vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
                var i= 0;
                reconcileService.readRecords(vm.seletParkId,vm.valid_begintime,vm.valid_endtime,vm.plate_number).then(function (response) {
                    angular.forEach(response.data.water_bill, function (value,index) {
                        if(value.paid){
                            response.data.water_bill[index].paidName = '已支付';
                        }else {
                            response.data.water_bill[index].paidName = '未支付';
                        }
                        switch (value.payment_channel){
                            case 'wechatpay': response.data.water_bill[index].payment_channelName ='微信';break;
                            case 'alipay': response.data.water_bill[index].payment_channelName ='支付宝';break;
                            case 'unionpay': response.data.water_bill[index].payment_channelName ='银联';break;
                            case 'dadapay': response.data.water_bill[index].payment_channelName ='账上余额';break;
                        }
                        response.data.water_bill[index].numberId = index+1;
                        i++;
                    });
                    vm.reconcileDate = response.data.water_bill;
                    var countDate= {};
                    var countDateId = i+1;
                    var countDateName = '合计';
                    countDate.id =countDateId;
                    countDate.username = countDateName;
                    countDate.rdpay_trade_no = '--';
                    countDate.out_trade_no = '--';
                    countDate.created_time = '--';
                    countDate.paidName = '--';
                    countDate.payment_channelName = '--';
                    countDate.balance = '';
                    countDate.amount = response.data.general_surplus-response.data.coupon_fee;
                    countDate.coupon_fee = response.data.coupon_fee;
                    countDate.order_desc = '--';
                    vm.reconcileDate[i] = countDate;
                    vm.allData =  response.data;
                    vm.show = true;
                });
            }
        }
        vm.exportReconcile = exportReconcile;
        vm.clearAndRefresh = clearAndRefresh;
        function clearAndRefresh() {
            vm.seletParkId = '';vm.valid_begintime = '';vm.valid_endtime = '';
            vm.parkingAsync.selected = undefined;
            vm.coupon.valid_endtime = undefined ;
            vm.coupon.valid_begintime = undefined ;
            vm.plate_number = '';
            queryReconcile();
        }
        function exportReconcile() {
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime) {
                vm.valid_begintime = moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            var obj = {
                valid_begintime:vm.valid_begintime,
                valid_endtime:vm.valid_endtime,
                organId:vm.organId,
                parklotname:vm.seletParkId
            }
            reconcileExportFactory.setorganReconcile(obj);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: 'exportDetail.html',
                size: 'lg',
                controller: 'reconcileExportController',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                vm.queryOrganReconcile();
            });
        }
    }
})();
(function () {
    angular.module('app.parking')
        .factory('reconcileExportFactory', reconcileExportFactory);
    'use strict';
    function reconcileExportFactory() {
        var organReconcile = {
            id:'',
            organId:'',
            valid_begintime:'',
            valid_endtime:'',
            parklotname:''
        };
        return {
            setorganReconcile: setorganReconcile,
            getorganReconcile: getorganReconcile
        };
        function setorganReconcile(cOrganReconcile,b) {
            organReconcile.id = cOrganReconcile.id;
            organReconcile.organId = cOrganReconcile.organId;
            organReconcile.valid_begintime = cOrganReconcile.valid_begintime;
            organReconcile.valid_endtime = cOrganReconcile.valid_endtime;
            organReconcile.parklotname = cOrganReconcile.parklotname;
        }
        function getorganReconcile() {
            return organReconcile;
        }
    }
})();
(function () {
    angular.module('app.parking')
        .controller('reconcileExportController', reconcileExportController);
    reconcileExportController.$inject = ['reconcileService','reconcileExportFactory','URL_SEED','logger','$uibModalInstance'];
    'use strict';
    function reconcileExportController(reconcileService,reconcileExportFactory,URL_SEED,logger,$uibModalInstance) {
        var vm = this;
        var obj = reconcileExportFactory.getorganReconcile();
        vm.exportReconcile = exportReconcile;
        vm.exportReconcile();
        function exportReconcile() {
            reconcileService.exportReconcile(obj.parklotname,obj.valid_begintime,obj.valid_endtime).then(function (response) {
                if(response.status == 0){
                    vm.detaliName = response.detailfile;
                    vm.sumName = response.summaryfile;
                    vm.detailfile = URL_SEED.IMG_URL +'media/'+response.detailfile;
                    vm.summaryfile = URL_SEED.IMG_URL +'media/'+response.summaryfile;
                }else {
                    logger.warning('导出失败！','','请重现查询导出');
                }
            });
        }
        vm.cancel = cancel;
        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
(function () {
    angular.module('app.parking')
        .factory('reconcileFactory', reconcileFactory);
    'use strict';
    function reconcileFactory() {
        var reconcile = {
            id:'',
            username:'',
            out_trade_no: '',
            created_time: '',
            paidName: '',
            payment_channelName: '',
            amount: '',
            balance:'',
            order_desc:'',
            water_bill:''
        };
        return {
            setReconcile: setReconcile,
            getReconcile: getReconcile
        };
        function setReconcile(cReconcile) {
            reconcile.id = cReconcile.id;//id
            reconcile.username = cReconcile.username;
            reconcile.out_trade_no = cReconcile.out_trade_no;
            reconcile.created_time = cReconcile.created_time;
            reconcile.paidName = cReconcile.paidName;
            reconcile.payment_channelName = cReconcile.payment_channelName;
            reconcile.amount = cReconcile.amount;
            reconcile.balance = cReconcile.balance;
            reconcile.order_desc = cReconcile.order_desc;
            reconcile.water_bill = cReconcile.water_bill;
        }
        function getReconcile() {
            return reconcile;
        }
    }
})();
(function () {
    angular.module('app.parking')
        .factory('reconcileService', reconcileService);
    reconcileService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function reconcileService($http, URL_SEED) {
        var service = {};
        var PARKPOWER_URL = URL_SEED.API_URL + 'billing/parklotreconcile/';
        //对账查询
        service.readRecords =function(parklotid,begintime,endtime,plate_number) {
            return $http({
                method: 'GET',
                url: PARKPOWER_URL,
                params: {
                    parklotid:parklotid,
                    begintime:begintime,
                    endtime:endtime,
                    plate_number:plate_number
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        service.exportReconcile =function(parklotid,begintime,endtime) {
            var reconcileDate = angular.toJson({
                parklotid:parklotid,
                begintime:begintime,
                endtime:endtime
            });
            return $http({
                method: 'POST',
                url: PARKPOWER_URL,
                data: reconcileDate,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        return service;
    }
})();

(function () {
    angular.module('app.parking')
        .controller('settlementController', settlementController);
    settlementController.$inject = ['$location', 'ManageParkingService', 'DTColumnDefBuilder', 'datatablesOptions','settlementService','$scope','settlementFactory','$uibModal','logger'];
    'use strict';
    function settlementController($location, ManageParkingService, DTColumnDefBuilder, datatablesOptions,settlementService,$scope,settlementFactory,$uibModal,logger) {
        var vm = this;
        vm.querySettlement = querySettlement;
        vm.queryBaiDuMapParking = queryBaiDuMapParking;
        vm.queryBaiDuMapParking();
        /*停车场选择-------------------------------------------------*/
        vm.disabled = undefined;
        vm.searchEnabled = undefined;
        vm.setInputFocus = function () {
            $scope.$broadcast('UiselectDemo1');
        };
        vm.enable = function () {
            vm.disabled = false;
        };
        vm.disabled = function () {
            vm.disabled = true;
        };
        vm.enableSearch = function () {
            vm.searchEnabled = true;
        };
        vm.disableSearch = function () {
            vm.searchEnabled = false;
        };
        vm.someGroupFn = function (item) {
            if (item.name[0] >= 'A' && item.name[0] <= 'M')
                return 'From A - M';
            if (item.name[0] >= 'N' && item.name[0] <= 'Z')
                return 'From N - Z';
        };
        vm.firstLetterGroupFn = function (item) {
            return item.name[0];
        };
        vm.reverseOrderFilterFn = function (groups) {
            return groups.reverse();
        };
        vm.parkingAsync = [];
        var allParkLots = [];
        var start_index = 0;
        function queryBaiDuMapParking() {
            ManageParkingService.queryBaiDuMapParking(start_index).then(function (response) {
                if(response.parking_lots.length !== 0) {
                    start_index =  response.parking_lots[response.parking_lots.length - 1].id;
                    angular.forEach(response.parking_lots, function (value) {
                        vm.parkingAsync.push(value);
                        allParkLots.push(value.id);
                    });
                    queryBaiDuMapParking();
                }
            });
        }
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.seletPark.id = vm.eventResult.model.id;
        };
        vm.seletPark = {
            id: undefined
        };
        /*停车场选择-------------------------------------------------*/
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        vm.coupon ={
            valid_begintime:undefined,
            valid_endtime:undefined
        };
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        /*时间日历设置------------------------------------------------*/
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            next_start_index:0,
            previous_start_index:0,
            maxid: 0,
            minid: 0
        };
        vm.number={
            start:0,
            next:0
        };
        // i18nService.setCurrentLang('zh-cn');
        // vm.gridOptions = UiGridOptions.getUiGridOption();
        // vm.gridOptions.enablePaginationControls = false;
        // vm.gridOptions.data = [];
        // vm.gridOptions.columnDefs = [
        //     {field: 'number', displayName: '序号'},
        //     {
        //         field: 'aggregate_amount',
        //         displayName: '总订单金额',
        //         cellTemplate: '<div class="ui-grid-cell-contents"><span>{{COL_FIELD/100}} 元</span></div>'
        //     },
        //     {
        //         field: 'alipay_amount',
        //         displayName: '支付宝总订单金额',
        //         cellTemplate: '<div class="ui-grid-cell-contents"><span>{{COL_FIELD/100}} 元</span></div>'
        //     },
        //     {
        //         field: 'alipay_refund',
        //         displayName: '支付宝总退款金额',
        //         cellTemplate: '<div class="ui-grid-cell-contents"><span>{{COL_FIELD/100}} 元</span></div>'
        //     },
        //     {
        //         field: 'alipay_stroke_count',
        //         displayName: '支付宝总笔数'
        //     },
        //     {
        //         field: 'alipay_surplus',
        //         displayName: '支付宝结余',
        //         cellTemplate: '<div class="ui-grid-cell-contents"><span>{{COL_FIELD/100}} 元</span></div>'
        //     },
        //     {
        //         field: 'general_surplus',
        //         displayName: '总结余',
        //         cellTemplate: '<div class="ui-grid-cell-contents"><span>{{COL_FIELD/100}} 元</span></div>'
        //     },
        //     {
        //         field: 'total_refund',
        //         displayName: '总退款金额',
        //         cellTemplate: '<div class="ui-grid-cell-contents"><span>{{COL_FIELD/100}} 元</span></div>'
        //     },
        //     {
        //         field: 'total_refund_stroke_count',
        //         displayName: '总退款笔数'
        //     },
        //     {
        //         field: 'total_stroke_count',
        //         displayName: '总笔数'
        //     },
        //     {
        //         field: 'wechatpay_amount',
        //         displayName: '微信总订单金额',
        //         cellTemplate: '<div class="ui-grid-cell-contents"><span>{{COL_FIELD/100}} 元</span></div>'
        //     },
        //     {
        //         field: 'wechatpay_refund',
        //         displayName: '微信总退款金额',
        //         cellTemplate: '<div class="ui-grid-cell-contents"><span>{{COL_FIELD/100}} 元</span></div>'
        //     },
        //     {
        //         field: 'wechatpay_stroke_count',
        //         displayName: '微信总笔数'
        //     },
        //     {
        //         field: 'wechatpay_surplus',
        //         displayName: '微信结余',
        //         cellTemplate: '<div class="ui-grid-cell-contents"><span>{{COL_FIELD/100}} 元</span></div>'
        //     },
        //     {
        //         field: 'id',
        //         displayName: '操作',
        //         cellTemplate: '<div class="ui-grid-cell-contents"><a ng-click="grid.appScope.deSelectRow(row)">详情</a></div>'
        //     }
        // ];
        vm.dtOptions = datatablesOptions.getDatatableOption();
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8),
            DTColumnDefBuilder.newColumnDef(9),
            DTColumnDefBuilder.newColumnDef(10),
            DTColumnDefBuilder.newColumnDef(11),
            DTColumnDefBuilder.newColumnDef(12),
            DTColumnDefBuilder.newColumnDef(13),
            DTColumnDefBuilder.newColumnDef(14)
        ];
        vm.data = [];
        vm.deSelectRow = function(data) {
            settlementFactory.setSettlement(data);
            var modalInstance = $uibModal.open({
                backdrop:'static',
                templateUrl: '../app/views/settlementDetail.html',
                size:'lg',
                controller: 'settlementDetailController',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
            });
        };
        //查询停车场功能
        function querySettlement() {
            logger.warning('暂无可结算停车场！','','查询无效');
            // if(vm.coupon.valid_begintime && vm.coupon.valid_endtime){
            //     vm.valid_begintime =  moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
            //     vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            //     settlementService.readRecords(vm.seletPark.id,vm.valid_begintime,vm.valid_endtime,vm.time_type).then(function (response) {
            //         vm.gridOptions.data = response.data;
            //     });
            // }
        }
    }
})();
(function () {
    angular.module('app.parking')
        .factory('settlementFactory', settlementFactory);
    'use strict';
    function settlementFactory() {
        var settlement = {
            id:'',      //数据id
            number:'',//序号
            funcbase: '',//功能id
            funcname: '',//功能名
            funcvalue: true,//功能状态
            parklot: '',//停车场id
            parklot_name: ''//停车场名
        };
        return {
            setSettlement: setSettlement,
            getSettlement: getSettlement
        };
        function setSettlement(cSettlement) {
            settlement.id = cSettlement.id;//id
            settlement.number = cSettlement.number;
            settlement.funcbase = cSettlement.funcbase;
            settlement.funcname = cSettlement.funcname;
            settlement.funcvalue = cSettlement.funcvalue;
            settlement.parklot = cSettlement.parklot;
            settlement.parklot_name = cSettlement.parklot_name;
        }
        function getSettlement() {
            return settlement;
        }
    }
})();
(function () {
    angular.module('app.parking')
        .factory('settlementService', settlementService);
    settlementService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function settlementService($http, URL_SEED) {
        var service = {};
        var PARKPOWER_URL = URL_SEED.API_URL + 'billing/settlement/';
        //对账查询
        service.readRecords =function(parklotid,begintime,endtime,settletype) {
            return $http({
                method: 'GET',
                url: PARKPOWER_URL,
                params: {
                    parklotid:parklotid,
                    begintime:begintime,
                    endtime:endtime,
                    settletype:settletype
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        return service;
    }
})();

/**
 * Created by huangxiang  on 2016/11/30 0030.
 * @author: huangxiang
 * Module: reconciliation.controller.js
 * feature: 对账 module 设置
 */
(function () {
    angular.module('app.reconciliation')
        .controller('ReconciliationController',ReconciliationController);

    ReconciliationController.$inject = [];

    'use strict';
    function ReconciliationController() {
        //TODO something with module setting
    }
})();
/**
 * Created by huangxiang  on 2016/11/30 0030.
 * @author: huangxiang
 * Module: reconciliation.service.js
 * feature: 对账 module 服务器交互
 */
(function () {
    angular.module('app.reconciliation')
        .factory('ReconciliationService', ReconciliationService);

    ReconciliationService.$inject = [];

    'use strict';
    function ReconciliationService() {
        // TODO something with server
    }
})();

(function () {
    angular.module('app.parking')
        .controller('AddParkPowerController', AddParkPowerController);
    AddParkPowerController.$inject = ['$location', 'ParkPowerService', 'logger'];
    'use strict';
    function AddParkPowerController($location, ParkPowerService, logger) {
        var vm = this;
        vm.addParkPower = addParkPower; // 新增功能功能
        vm.backToPrevious = backToPrevious; // 返回上一层菜单
        function addParkPower() {
            ParkPowerService.addParkPower(vm.parkPower.funcname,vm.parkPower.introduce).then(function (response) {
                if (response.status === 0) {
                    logger.success('添加成功'+'功能：'+vm.parkPower.funcname,'操作成功');
                    $location.path('/app/parkPower');
                }else if (response.status === 40004) {
                    logger.error('添加失败' + '"' + vm.parkPower.funcname + '"' + '失败!', '该功能已经存在！');
                }else if(response.status === 10002 ){
                    logger.error('添加失败' + '"' + vm.parkPower.funcname + '"' + '失败!', '缺少必填字段！');
                }else {
                    logger.error('添加失败');
                }
            });
        }
        function backToPrevious() {
            $location.path('/app/parkPower');
        }
    }
})();
(function(){
    angular.module('app.parking')
        .controller('ParkPowerDeleteController',ParkPowerDeleteController);

    ParkPowerDeleteController.$inject = ['$uibModalInstance','ParkPowerService','parkPowerFactory','logger'];
    'use strict';
    function ParkPowerDeleteController($uibModalInstance,ParkPowerService,parkPowerFactory,logger) {
        var vm = this;
        vm.deleteParkPower = deleteParkPower;
        vm.cancel = cancel;
        function deleteParkPower() {
            ParkPowerService.deleteParkPower(parkPowerFactory.getParkPower().id).then(function (response) {
                if(response.status === 0){
                    $uibModalInstance.close('closed');
                    logger.success('成功刪除'+parkPowerFactory.getParkPower().name,response.data,'操作成功！');
                }else {
                    logger.error('删除失败'+parkPowerFactory.getParkPower().name + '失败！！',response.data,'操作失败！');
                }
            });
        }

        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
(function () {
    angular.module('app.parking')
        .factory('parkPowerFactory', parkPowerFactory);
    'use strict';
    function parkPowerFactory() {
        var parkPower = {
            id:'',      //数据id
            number:'',//序号
            funcbase: '',//功能id
            funcname: '',//功能名
            funcvalue: true,//功能状态
            parklot: '',//停车场id
            parklot_name: ''//停车场名
        };
        return {
            setParkPower: setParkPower,
            getParkPower: getParkPower
        };
        function setParkPower(cParkPower) {
            parkPower.id = cParkPower.id;//id
            parkPower.number = cParkPower.number;
            parkPower.funcbase = cParkPower.funcbase;
            parkPower.funcname = cParkPower.funcname;
            parkPower.funcvalue = cParkPower.funcvalue;
            parkPower.parklot = cParkPower.parklot;
            parkPower.parklot_name = cParkPower.parklot_name;
        }
        function getParkPower() {
            return parkPower;
        }
    }
})();
(function () {
    "use strict";
    angular.module('app.parking')
        .controller('ModifyParkPowerController', ModifyParkPowerController);

    ModifyParkPowerController.$inject = ['$scope', '$timeout', '$location', 'parkPowerFactory', 'logger','ParkPowerService'];

    function ModifyParkPowerController($scope, $timeout, $location, parkPowerFactory, logger,ParkPowerService) {
        var vm = this;
        vm.getParkPower =  getParkPower;
        vm.getParkPower();
        function getParkPower() {
            $timeout(function () {
                vm.parkPower = parkPowerFactory.getParkPower();
            }, 500);
        };
        // 点击确认修改功能的操作
        vm.modifyParkPower = function () {
            ParkPowerService.modifyParkPower(vm.parkPower.id,vm.parkPower.funcname,vm.parkPower.introduce).then(function (response) {
                if (response.status === 0) {
                    logger.success('修改成功'+vm.parkPower.funcname+'功能：','操作成功');
                    $location.path('/app/parkPower');
                }else if(response.status === 10002 ){
                    logger.error('添加失败' + '"' + vm.parkPower.funcname + '"' + '失败!', '缺少必填字段！');
                }else {
                    logger.error('添加失败');
                }
            });
        };
        // 返回上一层
        vm.backToPrevious = function () {
            $location.path('/app/parkPower');
        };
    }
})();
(function () {
    angular.module('app.parking')
        .controller('ParkPowerController', ParkPowerController);
    ParkPowerController.$inject = ['$location', 'ParkPowerService', 'DTColumnDefBuilder', 'datatablesOptions', 'parkPowerFactory', '$uibModal','$document'];
    'use strict';
    function ParkPowerController($location, ParkPowerService, DTColumnDefBuilder, datatablesOptions, parkPowerFactory, $uibModal,$document) {
        var vm = this;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            next_start_index:0,
            previous_start_index:0,
            maxid: 0,
            minid: 0
        };
        vm.number={
          start:0,
          next:0
        };
        vm.queryParkPower = queryParkPower; // 查询停车场功能
        vm.addParkPower = addParkPower; //新增停车场功能
        vm.deleteParkPower = deleteParkPower; //删除停车场功能
        vm.modifyParkPower = modifyParkPower; //修改停车场功能
        vm.queryParkPower(0); // 初始化停车场功能表格
        vm.dtOptions = datatablesOptions.getDatatableOption().withOption('paging', false); // 获取datatables表格设置
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2).notSortable()
        ];
        //查询停车场功能
        function queryParkPower(start_index) {
            if(start_index == 0){//首页index
                ParkPowerService.readRecords(0,'').then(function (response) {
                    vm.parkPower = response.records;
                    angular.forEach(response.records, function (value,index) {
                        vm.parkPower[index].number =index+1;
                    });
                    vm.number.start = vm.parkPower[0];
                    vm.number.next = vm.parkPower[vm.parkPower.length - 1].number;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.maxid = response.maxid;
                    if (response.records.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else{
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    }
                });
            }else if(start_index == 1){//上一页
                if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                    logger.warning('已经到首页！','','没有上一页');
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }else{
                    ParkPowerService.readRecords(vm.pagination.previous_start_index,0).then(function (response) {
                        vm.parkPower = response.records;
                        angular.forEach(response.records, function (value,index) {
                            vm.parkPower[index].number = vm.number.start+index-response.records.length+1;
                        });
                        vm.number.start = vm.parkPower[0];
                        vm.number.next = vm.parkPower[vm.parkPower.length - 1].number;
                        vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                        vm.pagination.previous_start_index = response.records[0].id;
                        vm.pagination.maxid = response.maxid;
                        if (response.records.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        }
                    });
                }
            }else if(start_index == 2){//下一页
                if (vm.pagination.next_start_index <= vm.pagination.minid) {
                    logger.warning('已经到最后一页！','','没有下一页');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                }else{
                    ParkPowerService.readRecords(vm.pagination.next_start_index,1).then(function (response) {
                        vm.parkPower = response.records;
                        angular.forEach(response.records, function (value,index) {
                            vm.parkPower[index].number = vm.number.number+index;
                        });
                        vm.number.start = vm.parkPower[0];
                        vm.number.next = vm.parkPower[vm.parkPower.length - 1].number;
                        vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                        vm.pagination.previous_start_index = response.records[0].id;
                        vm.pagination.minid = response.minid;
                        if (response.records.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        }
                    });
                }
            }else if(start_index == 3){//加载最后一页
                ParkPowerService.readRecords(-1,'').then(function (response) {
                    vm.parkPower = response.records;
                    angular.forEach(response.records, function (value,index) {
                        vm.parkPower[index].number = response.records[0].id+index;
                    });
                    vm.number.start = vm.parkPower[0];
                    vm.number.next = vm.parkPower[vm.parkPower.length - 1].number;
                    vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                    vm.pagination.previous_start_index = response.records[0].id;
                    vm.pagination.minid = response.minid;
                    if (response.records.length < 50) {
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                    }else{
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    }
                });
            }
        }
        //新增停车场功能
        function addParkPower() {
            $location.path('/app/parkPowerAdd');
        }
        //打开删除model
        function deleteParkPower(parkPower) {
            parkPowerFactory.setParkPower(parkPower);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: 'deleteParkPower.html',
                size: 'sm',
                controller: 'ParkPowerDeleteController',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                vm.queryParkPower(0);
            });
        }
        //修改停车场功能
        function modifyParkPower(parkPower) {
            parkPowerFactory.setParkPower(parkPower);
            $location.path('/app/parkPowerModify');
        }
    }
})();
(function () {
    angular.module('app.parking')
        .factory('ParkPowerService', ParkPowerService);
    ParkPowerService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function ParkPowerService($http, URL_SEED) {
        var service = {};
        var PARKPOWER_URL = URL_SEED.API_URL + 'parking/func/';
        /*新增停车场功能*/
        service.addParkPower = function (funcname, introduce) {
            var gate_info = angular.toJson({
                funcname: funcname,
                introduce: introduce
            });
            return $http({
                method: 'POST',
                url: PARKPOWER_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: gate_info,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        /*修改停场功能*/
        service.modifyParkPower = function (funcbId, funcname, introduce) {
            var gate_info = angular.toJson({
                funcb_id: funcbId,
                funcname: funcname,
                introduce: introduce
            });
            return $http({
                method: 'PUT',
                url: PARKPOWER_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: gate_info,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        /*删除停车场功能*/
        service.deleteParkPower = function (funcb_id) {
            var gate_info = angular.toJson({funcb_id: funcb_id});
            return $http({
                method: 'DELETE',
                url: PARKPOWER_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: gate_info,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        };
        //分页查询
        service.readRecords =function(start_index,pagedirect) {
            return $http({
                method: 'GET',
                url: PARKPOWER_URL,
                params: {
                    max_results: 50,
                    start_index: start_index,
                    pagedirect: pagedirect
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        return service;
    }
})();

/**
 * Created by huangxiang  on 2016/11/28 0028.
 * @author:
 * Module:
 * feature:
 */
(function () {
    angular.module('app.user-group')
        .controller('AddGroupController', AddGroupController);

    AddGroupController.$inject = ['$scope', '$location', '$timeout', 'logger', 'OperatorManageFactory', 'RolesManageService'];

    'use strict';
    function AddGroupController($scope, $location, $timeout, logger, OperatorManageFactory, RolesManageService) {

        var vm = this;

        vm.searchText = '';

        vm.SelectedAvailItems = [];
        vm.SelectedSelectedListItems = [];

        vm.SelectedListItems = [];
        vm.AvailableListItems = [];

        vm.queryAllPermissions = queryAllPermissions;
        vm.OnAvailableChange = OnAvailableChange;
        vm.btnRight = btnRight;
        vm.btnAllRight = btnAllRight;
        vm.btnLeft = btnLeft;
        vm.btnAllLeft = btnAllLeft;
        vm.addRoleGroup = addRoleGroup;

        vm.queryAllPermissions(); // 初始化获取所有权限

       /* ========================================================================================*/

        function queryAllPermissions() {
            OperatorManageFactory.queryPermissions().then(function (response) {
                vm.allPermission = response.groupinfo;
                angular.copy(vm.allPermission, vm.AvailableListItems);

            });
        }


        function OnAvailableChange() {
            vm.AvailLength = vm.SelectedAvailItems.length;
        }


        function btnRight() {
            //move selected.
            angular.forEach(vm.SelectedAvailItems, function (value) {
                this.push(value);
            }, $scope.SelectedListItems);

            //remove the ones that were moved.
            angular.forEach(vm.SelectedAvailItems, function (value) {
                for (var i = vm.AvailableListItems.length - 1; i >= 0; i--) {
                    if (vm.AvailableListItems[i].permname == value.permname) {
                        vm.AvailableListItems.splice(i, 1);
                    }
                }
            });
            vm.SelectedAvailItems = [];
        }

        function btnAllRight() {
            //move all.
            angular.forEach(vm.AvailableListItems, function (value) {
                this.push(value);
            }, vm.SelectedListItems);

            //remove the ones that were moved from the source.
            for (var i = vm.AvailableListItems.length - 1; i >= 0; i--) {
                vm.AvailableListItems.splice(i, 1);
            }

        }

        function btnLeft() {
            //move selected.
            angular.forEach(vm.SelectedSelectedListItems, function (value) {
                this.push(value);
            }, vm.AvailableListItems);

            //remove the ones that were moved from the source container.
            angular.forEach(vm.SelectedSelectedListItems, function (value) {
                for (var i = vm.SelectedListItems.length - 1; i >= 0; i--) {
                    if (vm.SelectedListItems[i].permname == value.permname) {
                        vm.SelectedListItems.splice(i, 1);
                    }
                }
            });
            vm.SelectedSelectedListItems = [];

        }

        function btnAllLeft() {

            //move over all items
            angular.forEach(vm.SelectedListItems, function (value) {
                this.push(value);
            }, vm.AvailableListItems);

            //remove the ones that were moved from the source.
            for (var i = vm.SelectedListItems.length - 1; i >= 0; i--) {
                vm.SelectedListItems.splice(i, 1);
            }
            vm.SelectedSelectedListItems = [];

        }

        // 添加群组
        function addRoleGroup() {
            RolesManageService.addRole(vm.name).then(function (response) {
                if (response.data.status == 0) {
                    logger.success('操作成功', response.detail, '你已成功添加群组' + '"' + vm.name + '!');

                    $location.path('/app/user-group');
                } else {
                    alert('添加失败' + response.data.detail);
                }
            });
        }

    }
})();
/**
 * Created by huangxiang  on 2016/11/28 0028.
 * @author:
 * Module:
 * feature:
 */
(function () {
    angular.module('app.user-group')
        .controller('GroupManageController', GroupManageController);

    GroupManageController.$inject = ['$location', 'DTColumnDefBuilder', '$uibModal', 'RolesManageService', 'logger', 'datatablesOptions'];

    'use strict';
    /**
     * @jsdoc function
     * @param $location
     * @param DTColumnDefBuilder
     * @param $uibModal
     * @param RolesManageService
     * @param logger
     * @param datatablesOptions
     * @constructor
     */
    function GroupManageController($location, DTColumnDefBuilder, $uibModal, RolesManageService, logger, datatablesOptions) {

        var vm = this;
        vm.addNewRole = addNewRole;
        vm.modifyRole = modifyRole;
        vm.deleteRole = deleteRole;
        vm.queryAllRole = queryAllRole;

        vm.dtOptions = datatablesOptions.getDatatableOption();
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2).notSortable()
        ];

        /**
         * 跳转至添加群组页面
         */
        function addNewRole() {
            $location.path('/app/user-group/add-group');
        }

        /**
         * 跳转至修改群组页面
         */
        function modifyRole() {
            $location.path('/app/user-group/modify-group');
        }

        /**
         * 删除群组
         * @param role 群组id
         */
        function deleteRole(role) {
            RolesManageService.setCurrentRole(role);
            var modalInstance = $uibModal.open({
                backdrop: 'static',  // 点击空白处不隐藏并保持黑色模态背景，默认是true，false为不隐藏也没有模态背景
                templateUrl: 'delete_modal.html',
                controller: 'DeleteRoleController',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                logger.success('操作成功', '你已成功删除用户' + '‘' + role.groupname + '’！');
                vm.queryAllRole();
            });
        }

        /**
         * 查询所有群组
         */
        function queryAllRole() {
            RolesManageService.queryAllRole().then(function (response) {
                vm.roles = response.groupinfo;
            });
        }

        vm.queryAllRole();
        // 查询群组结束
        vm.animationsEnabled = true;
    }
})();
/**
 * role.delete.controller.js
 * @author: huangxiang
 * @create 2017-01-11 15:59
 */
(function(){
    angular.module('app.user-group')
        .controller('DeleteRoleController',DeleteRoleController);

    DeleteRoleController.$inject = ['$uibModalInstance','RolesManageService'];
    'use strict';
    function DeleteRoleController($uibModalInstance,RolesManageService) {
        var vm = this;
        vm.deleteRoleConfirm = function () {
            RolesManageService.deleteRole(RolesManageService.getCurrentRole().groupid)
                .then(function (response) {
                    $uibModalInstance.close('closed');
                });
        };
        vm.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
    }
})();
/**
 * Created by huangxiang  on 2016/11/28 0028.
 * @author:
 * Module:
 * feature:
 */
(function () {
    angular.module('app.user-group')
        .factory('RolesManageService', RolesManageService);

    RolesManageService.$inject = ['$http', 'URL_SEED'];

    'use strict';
    function RolesManageService($http, URL_SEED) {
        var ROLE_URL = URL_SEED.API_URL + 'account/role/';

        var currentRole = {
            groupid: 0,
            groupname: ''
        };

        return {
            queryOneRole: queryOneRole,
            queryAllRole: queryAllRole,
            addRole: addRole,
            modifyRole: modifyRole,
            deleteRole: deleteRole,
            setCurrentRole: setCurrentRole,
            getCurrentRole: getCurrentRole
        };

        /*查询单个群组*/
        function queryOneRole(groupId) {
            return $http({
                method: 'GET',
                url: ROLE_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {groupId: groupId},
                ignoreLoadingBar: true,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

        /*查询所有群组*/
        function queryAllRole() {
            return $http({
                method: 'GET',
                url: ROLE_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                ignoreLoadingBar: true,
                cache: true,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

        /*新增群组*/
        function addRole(groupname) {
            var operatorJson = angular.toJson({groupname: groupname});
            return $http({
                method: 'POST',
                url: ROLE_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: operatorJson,
                ignoreLoadingBar: true,
                withCredentials: true
            }).success(function (response) {
                return response.data;
            }).error(function (response) {
                return response.data;
            });
        }

        /*修改群组*/
        function modifyRole(operator, role, description, parking_lots) {
            var operatorJson = angular.toJson({
                operator_name: operator,
                role: role,
                description: description,
                parking_lots: parking_lots
            });
            return $http({
                method: 'PUT',
                url: ROLE_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: operatorJson,
                ignoreLoadingBar: true,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

        /*删除群组*/
        function deleteRole(groupId) {
            var operatorJSON = angular.toJson({groupId: groupId});
            return $http({
                method: 'DELETE',
                url: ROLE_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: operatorJSON,
                ignoreLoadingBar: true,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

        function setCurrentRole(role) {
            currentRole.groupid = role.groupid;
            currentRole.groupname = role.groupname;
        }

        function getCurrentRole() {
            return currentRole;
        }
    }
})();
/**=========================================================
 * Module: helpers.js
 * Provides helper functions for routes definition
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.routes')
        .provider('RouteHelpers', RouteHelpersProvider)
        ;

    RouteHelpersProvider.$inject = ['APP_REQUIRES'];
    function RouteHelpersProvider(APP_REQUIRES) {

      /* jshint validthis:true */
      return {
        // provider access level
        basepath: basepath,
        resolveFor: resolveFor,
        // controller access level
        $get: function() {
          return {
            basepath: basepath,
            resolveFor: resolveFor
          };
        }
      };

      // Set here the base of the relative path
      // for all app views
      function basepath(uri) {
        return 'app/views/' + uri;
      }

      // Generates a resolve object by passing script names
      // previously configured in constant.APP_REQUIRES
      function resolveFor() {
        var _args = arguments;
        return {
          deps: ['$ocLazyLoad','$q', function ($ocLL, $q) {
            // Creates a promise chain for each argument
            var promise = $q.when(1); // empty promise
            for(var i=0, len=_args.length; i < len; i ++){
              promise = andThen(_args[i]);
            }
            return promise;

            // creates promise to chain dynamically
            function andThen(_arg) {
              // also support a function that returns a promise
              if(typeof _arg === 'function')
                  return promise.then(_arg);
              else
                  return promise.then(function() {
                    // if is a module, pass the name. If not, pass the array
                    var whatToLoad = getRequired(_arg);
                    // simple error check
                    if(!whatToLoad) return $.error('Route resolve: Bad resource name [' + _arg + ']');
                    // finally, return a promise
                    return $ocLL.load( whatToLoad );
                  });
            }
            // check and returns required data
            // analyze module items with the form [name: '', files: []]
            // and also simple array of script files (for not angular js)
            function getRequired(name) {
              if (APP_REQUIRES.modules)
                  for(var m in APP_REQUIRES.modules)
                      if(APP_REQUIRES.modules[m].name && APP_REQUIRES.modules[m].name === name)
                          return APP_REQUIRES.modules[m];
              return APP_REQUIRES.scripts && APP_REQUIRES.scripts[name];
            }

          }]};
      } // resolveFor

    }


})();


/**=========================================================
 * Module: config.js
 * App routes and resources configuration
 =========================================================*/
(function () {
    angular
        .module('app.routes')
        .config(routesConfig);
    routesConfig.$inject = ['$stateProvider', '$locationProvider', '$urlRouterProvider', 'RouteHelpersProvider'];
    'use strict';
    function routesConfig($stateProvider, $locationProvider, $urlRouterProvider, helper) {
        // 去除URL中的#号 true:去除  false:关闭，即不去除
        $locationProvider.html5Mode({
            enabled: false, // 关闭
            requireBase: false
        });
        // defaults to dashboard
        $urlRouterProvider.otherwise('/page/login');
        // Application Routes
        $stateProvider
            .state('app', {
                url: '/app',
                abstract: true,
                templateUrl: helper.basepath('app/app.html'),
                resolve: helper.resolveFor('modernizr', 'icons')
            })
            .state('app.welcome', {
                url: '/welcome',
                title: '欢迎登录本系统',
                templateUrl: helper.basepath('common/welcome.html')
            })
            .state('app.no-auth',{
                url: '/no-auth',
                title: '没有访问权限',
                templateUrl: helper.basepath('common/403error.html')
            })
            //- 用户管理
            .state('app.operator', {
                url: '/operator',
                title: '用户管理',
                templateUrl: helper.basepath('operator/operator.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.add-operator', {
                url: '/add-operator',
                title: '新增用户',
                templateUrl: helper.basepath('operator/add-operator.html'),
                resolve: helper.resolveFor('lodash')
            })
            .state('app.modify-operator', {
                url: '/modify-operator',
                title: '修改用户',
                templateUrl: helper.basepath('operator/modify-operator.html'),
                resolve: helper.resolveFor('lodash')
            })
            .state('app.manage-group-user',{
                url: '/manage-group-user',
                title: '集团用户管理',
                templateUrl: helper.basepath('group/manage-group-user.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.modify-group-user',{
                url: '/modify-group-user',
                title: '修改集团用户权限',
                templateUrl: helper.basepath('group/modify-group-user.html'),
                resolve: helper.resolveFor('lodash')
            })
            //- 群组管理
            .state('app.user-group', {
                url: '/user-group',
                title: '群组列表',
                templateUrl: helper.basepath('group/user-group.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.add-group', {
                url: '/user-group/add-group',
                title: '群组管理|添加群组',
                templateUrl: helper.basepath('group/add-group.html')
            })
            .state('app.modify-group', {
                url: '/user-group/modify-group',
                title: '群组管理|修改群组',
                templateUrl: helper.basepath('group/modify-group.html')
            })
            //- 停车场管理
            .state('app.parking', {
                url: '/parking',
                title: '停车场管理',
                templateUrl: helper.basepath('parking/parking.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.add-new-parking', {
                url: '/parking/add-new-parking',
                title: '新增停车场',
                templateUrl: helper.basepath('parking/add-parking.html')
            })
            .state('app.modify-parking', {
                url: '/parking/modify-parking',
                title: '修改停车场信息',
                templateUrl: helper.basepath('parking/modify-parking.html')
            })
            .state('app.parking-pic', {
                url: '/parkPic/parking-pic',
                title: '停车场图片管理',
                templateUrl: helper.basepath('parkPic/parking-pic.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.parking-pic-upload', {
                url: '/parkPic/parking-pic-upload',
                title: '停车场图片上传',
                templateUrl: helper.basepath('parkPic/parking-pic-upload.html')
            })
            .state('app.parking-baidu-map', {
                url: '/parking/parking-baidu-map',
                title: '停车场地理位置',
                templateUrl: helper.basepath('parking/parking-baidu-map.html')
            })
            .state('app.parking-state', {
                url: '/parking/parking-state',
                title: '上传工具状态检测',
                templateUrl: helper.basepath('parking/parking-state.html'),
                resolve: helper.resolveFor('ui.grid', 'localytics.directives')
            })
            .state('app.parking-network', {
                url: '/parking/parking-network',
                title: '网络状态检测',
                templateUrl: helper.basepath('parking/parking-network.html'),
                resolve: helper.resolveFor('ui.grid', 'localytics.directives')
            })
            .state('app.parking-baidu-map-state', {
                url: '/parking/parking-baidu-map-state',
                title: '停车场地理位置(状态)',
                templateUrl: helper.basepath('parking/parking-baidu-map-state.html')
            })
            // 停车记录
            .state('app.vehicle-in', {
                url: '/parking/parking-vehicle-in',
                title: '停车入场记录',
                templateUrl: helper.basepath('parking/vehicle-in.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.vehicle-out', {
                url: '/parking/parking-vehicle-out',
                title: '停车出场记录',
                templateUrl: helper.basepath('parking/vehicle-out.html'),
                resolve: helper.resolveFor('ui.grid', 'localytics.directives')
            })
            // 缴费记录
            .state('app.online-prepayment', {
                url: '/prepayment/online-prepayment',
                title: '线上缴费纪录',
                templateUrl: helper.basepath('bill/online-payment.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.online-detail', {
                url: '/online-detail',
                title: '线上缴费纪录',
                templateUrl: helper.basepath('bill/online-bill-detail.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.online-wechatpay', {
                url: '/bill/online-wechatpay',
                title: '线上缴费纪录',
                templateUrl: helper.basepath('bill/online-wechatpay.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.online-alipay', {
                url: '/bill/online-alipay',
                title: '线上缴费纪录',
                templateUrl: helper.basepath('bill/online-alipay.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.online-dadapay', {
                url: '/bill/online-dadapay',
                title: '线上缴费纪录',
                templateUrl: helper.basepath('bill/online-dadapay.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            //充值记录
            .state('app.online-alipay-recharge', {
                url: '/bill/online-alipay-recharge',
                title: '线上缴费纪录',
                templateUrl: helper.basepath('bill/online-alipay-recharge.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.online-wechatpay-recharge', {
                url: '/bill/online-wechatpay-recharge',
                title: '线上缴费纪录',
                templateUrl: helper.basepath('bill/online-wechatpay-recharge.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.offline-prepayment', {
                url: '/prepayment/offline-prepayment',
                title: '线下缴费纪录',
                templateUrl: helper.basepath('bill/offline-payment.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            // 账单管理
            .state('app.online-bill',{
                url: '/parking-bill/online-bill',
                title: '线上账单查询',
                templateUrl: helper.basepath('bill/online-bill.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.account-balance',{
                url: '/parking-bill/account-balance',
                title: '对账',
                templateUrl: helper.basepath('account/account-balance.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.offline-bill', {
                url: '/parking-bill/offline-bill',
                title: '线下缴费账单',
                templateUrl: helper.basepath('bill/offline-bill.html'),
                resolve: helper.resolveFor('ui.grid', 'localytics.directives')
            })
            .state('app.reconciliation', {
                url: '/reconciliation',
                title: '对账',
                templateUrl: helper.basepath('account/reconciliation.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            // APP设置
            .state('app.apk-update', {
                url: '/app-setting/app-update',
                title: 'app在线升级',
                templateUrl: helper.basepath('app/apk-update.html'),
                resolve: helper.resolveFor('filestyle')
            })
            .state('app.app-pic-upload', {
                url: 'app-setting/app-pic-update',
                title: 'APP图片上传',
                templateUrl: helper.basepath('app/app-pic-upload.html'),
                resolve: helper.resolveFor('filestyle')
            })
            .state('app.mobile-user', {
                url: '/mobile-user',
                title: 'APP用户管理',
                templateUrl: helper.basepath('app/mobile-user-manage.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.user-pay', {
                url: '/user-pay',
                title: 'APP消费',
                templateUrl: helper.basepath('app/user_pay.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.mobile-user-comment', {
                url: '/mobile-user-comment',
                title: '用户反馈建议',
                templateUrl: helper.basepath('app/mobile-user-comment.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.replay-comment', {
                url: '/replay-comment',
                title: '用户反馈建议',
                templateUrl: helper.basepath('app/replay_comment.html')
            })
            // Pages Routes
            .state('page', {
                url: '/page',
                templateUrl: 'app/pages/page.html',
                resolve: helper.resolveFor('modernizr', 'icons'),
                controller: ['$rootScope', function ($rootScope) {
                    $rootScope.app.layout.isBoxed = false;
                }],
                controllerAs: 'vm'
            })
            .state('page.login', {
                url: '/login',
                title: '云平台登录',
                templateUrl: 'app/pages/login.html'
            })
            .state('page.lock', {
                url: '/lock',
                title: '锁定屏幕',
                templateUrl: 'app/pages/lock.html'
            })

            // wxpay routes
            .state('wxpay',{
                url: '/wxpay',
                templateUrl: 'app/wechat/wxpay.html',
                resolve: helper.resolveFor('modernizr','icons')
            })
            .state('wxpay.query',{
                url: '/wxpay/query',
                templateUrl: 'app/wechat/query.html'
            })
            .state('wxpay.dadapay',{
                url: '/wxpay/dadapay',
                templateUrl: 'app/wechat/dadapay.html'
            })
            //- 区域信息管理
            .state('app.region', {
                url: '/region',
                title: '区域管理',
                templateUrl: helper.basepath('region/region.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.add-new-region', {
                url: '/region/add-new-region',
                title: '新增停区域',
                templateUrl: helper.basepath('region/add-region.html')
            })
            .state('app.modify-region', {
                url: '/region/modify-region',
                title: '修改区域信息',
                templateUrl: helper.basepath('region/modify-region.html')
            })
            //- 商圈信息
            .state('app.town', {
                url: '/town',
                title: '区域管理',
                templateUrl: helper.basepath('town/town.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.add-new-town', {
                url: '/town/add-new-town',
                title: '新增停区域',
                templateUrl: helper.basepath('town/add-town.html')
            })
            .state('app.modify-town', {
                url: '/town/modify-town',
                title: '修改区域信息',
                templateUrl: helper.basepath('town/modify-town.html')
            })
            //- 停车场性质信息表
            .state('app.bustype', {
                url: '/bustype',
                title: '停车场性质信息表',
                templateUrl: helper.basepath('bustype/bustype.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.add-new-bustype', {
                url: '/bustype/add-new-bustype',
                title: '新增停车场性质信息表',
                templateUrl: helper.basepath('bustype/add-bustype.html')
            })
            .state('app.modify-bustype', {
                url: '/bustype/modify-bustype',
                title: '修改停车场性质信息表',
                templateUrl: helper.basepath('bustype/modify-bustype.html')
            })
            //控制台
            .state('app.console', {
                url: '/console',
                title: '控制台',
                templateUrl: helper.basepath('console/console.html'),
                resolve: helper.resolveFor('highcharts')
            })
            //- 优惠券相关页面
            .state('app.coupon', {
                url: '/coupon',
                title: '优惠券界面',
                templateUrl: helper.basepath('coupon/coupon.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.add-new-coupon', {
                url: '/coupon/add-new-coupon',
                title: '新增优惠券界面',
                templateUrl: helper.basepath('coupon/add-coupon.html')
            })
            .state('app.modify-coupon', {
                url: '/coupon/modify-coupon',
                title: '修改优惠券界面',
                templateUrl: helper.basepath('coupon/modify-coupon.html')
            })
            .state('app.coupon-man', {
                url: '/coupon-man',
                title: '用户优惠券情况',
                templateUrl: helper.basepath('couponman/coupon-man.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            //- 组织模块
            .state('app.organ', {
                url: '/organ',
                title: '组织管理',
                templateUrl: helper.basepath('organ/organ.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.add-new-organ', {
                url: '/organ/add-new-organ',
                title: '新增组织',
                templateUrl: helper.basepath('organ/add-organ.html')
            })
            .state('app.modify-organ', {
                url: '/organ/modify-organ',
                title: '修改组织信息',
                templateUrl: helper.basepath('organ/modify-organ.html')
            })
            //- 派出所信息
            .state('app.police', {
                url: '/police',
                title: '派出所信息',
                templateUrl: helper.basepath('police/police.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.add-new-police', {
                url: '/police/add-new-police',
                title: '新增派出所信息',
                templateUrl: helper.basepath('police/add-police.html')
            })
            .state('app.modify-police', {
                url: '/police/modify-police',
                title: '修改派出所信息',
                templateUrl: helper.basepath('police/modify-police.html')
            })
            //- 平台信息
            .state('app.platform', {
                url: '/platform',
                title: '平台信息',
                templateUrl: helper.basepath('platform/platform.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.add-new-platform', {
                url: '/platform/add-new-platform',
                title: '新增平台信息',
                templateUrl: helper.basepath('platform/add-platform.html')
            })
            .state('app.modify-platform', {
                url: '/platform/modify-platform',
                title: '修改平台信息',
                templateUrl: helper.basepath('platform/modify-platform.html')
            })
            //平台权限管理
            .state('app.platform-power', {
                url: '/platform-power',
                title: '平台权限管理',
                templateUrl: helper.basepath('platformpower/platform-power.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.modify-platform-power', {
                url: '/platform/modify-platform-power',
                title: '修改平台信息',
                templateUrl: helper.basepath('platformpower/modify-platform-power.html')
            })
            //- 市局派出所信息
            .state('app.bureau', {
                url: '/bureau',
                title: '派出所信息',
                templateUrl: helper.basepath('bureau/bureau.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.add-new-bureau', {
                url: '/bureau/add-new-bureau',
                title: '新增派出所信息',
                templateUrl: helper.basepath('bureau/add-bureau.html')
            })
            .state('app.modify-bureau', {
                url: '/bureau/modify-bureau',
                title: '修改派出所信息',
                templateUrl: helper.basepath('bureau/modify-bureau.html')
            })
            //- 社区信息
            .state('app.community', {
                url: '/community',
                title: '派出所信息',
                templateUrl: helper.basepath('community/community.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.add-new-community', {
                url: '/community/add-new-community',
                title: '新增社区信息',
                templateUrl: helper.basepath('community/add-community.html')
            })
            .state('app.modify-community', {
                url: '/community/modify-community',
                title: '修改社区信息',
                templateUrl: helper.basepath('community/modify-community.html')
            })
            //- 基础信息导入
            .state('app.export', {
                url: '/export',
                title: '基础数据导入',
                templateUrl: helper.basepath('export/export.html'),
                resolve: helper.resolveFor('export')
            })
            //- 停车场报表
            .state('app.analysis-pay', {
                url: '/analysis-pay',
                title: '停车场报表',
                templateUrl: helper.basepath('analysis/analysis-pay.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.analysis-region', {
                url: '/analysis-region',
                title: '区域报表',
                templateUrl: helper.basepath('analysis/analysis-region.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.analysis-town', {
                url: '/analysis-town',
                title: '商圈报表',
                templateUrl: helper.basepath('analysis/analysis-town.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.analysis-bustype', {
                url: '/analysis-bustype',
                title: '停车场类型报表',
                templateUrl: helper.basepath('analysis/analysis-bustype.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.analysis-user', {
                url: '/analysis-user',
                title: '用户统计报表',
                templateUrl: helper.basepath('analysis/analysis-user.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.analysis-account', {
                url: '/analysis-account',
                title: '财务统计报表',
                templateUrl: helper.basepath('analysis/analysis-account.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.analysis-organ', {
                url: '/analysis-organ',
                title: '组织统计报表',
                templateUrl: helper.basepath('analysis/analysis-organ.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.analysis-app-user', {
                url: '/analysis-pp-user',
                title: 'app用户推广统计',
                templateUrl: helper.basepath('analysis/analysis-app-user.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.paySettlement', {
                url: '/paySettlement',
                title: '结算页面',
                templateUrl: helper.basepath('paySettlement/paySettlement.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.paySettlement-detail', {
                url: '/paySettlement-detail',
                title: '结算页面',
                templateUrl: helper.basepath('paySettlement/paySettlement-detail.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            //停车场功能设置
            .state('app.park-power', {
                url: '/parkPower',
                title: '停车场功能设置',
                templateUrl: helper.basepath('parkpower/park-power.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.park-power-add', {
                url: '/parkPowerAdd',
                title: '停车场功能新增',
                templateUrl: helper.basepath('parkpower/add-park-power.html')
            })
            .state('app.park-power-modify', {
                url: '/parkPowerModify',
                title: '停车场功能修改',
                templateUrl: helper.basepath('parkpower/modify-park-power.html')
            })
            //停车场功能配置
            .state('app.park-action', {
                url: '/parkAction',
                title: '停车场功能配置',
                templateUrl: helper.basepath('parkingaction/park-action.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.park-action-add', {
                url: '/parkActionAdd',
                title: '停车场功能新增',
                templateUrl: helper.basepath('parkingaction/add-park-action.html')
            })
            .state('app.park-action-modify', {
                url: '/parkActionModify',
                title: '停车场功能修改',
                templateUrl: helper.basepath('parkingaction/modify-park-action.html')
            })
            .state('app.reconcile', {
                url: '/reconcile',
                title: '停车场对账',
                templateUrl: helper.basepath('reconcile/reconcile.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.settlement', {
                url: '/settlement',
                title: '停车场对账',
                templateUrl: helper.basepath('reconcile/settlement.html'),
                resolve: helper.resolveFor('ui.grid', 'localytics.directives','analysis-highcharts')
            })
            .state('app.organReconcile', {
                url: '/organReconcile',
                title: '停车场对账',
                templateUrl: helper.basepath('reconcile/organReconcile.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.iotdevice', {
                url: '/iotdevice',
                title: '设备管理',
                templateUrl: helper.basepath('iotdevice/iotdevice.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.add-iotdevice', {
                url: '/addIotdevice',
                title: '新增设备管理',
                templateUrl: helper.basepath('iotdevice/add-iotdevice.html')
            })
            .state('app.modify-iotdevice', {
                url: '/modifyIotdevice',
                title: '新增设备管理',
                templateUrl: helper.basepath('iotdevice/modify-iotdevice.html')
            })
            .state('app.park-state', {
                url: '/parkstate',
                title: '停车场状态',
                templateUrl: helper.basepath('park-state/park-state.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.net-state', {
                url: '/netstate',
                title: '停车场状态',
                templateUrl: helper.basepath('park-state/net-state.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.inducement', {
                url: '/inducement',
                title: '诱导屏设置',
                templateUrl: helper.basepath('inducement/inducement.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.dataTmp', {
                url: '/dataTmp',
                title: '第三方数据监控',
                templateUrl: helper.basepath('dataTmpObject/dataTmpObject.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.examine', {
                url: '/examine',
                title: '账单审核',
                templateUrl: helper.basepath('examine/examine.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.examineGroup', {
                url: '/examineGroup',
                title: '账单审核',
                templateUrl: helper.basepath('examine/examineGroup.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.groupBill', {
                url: '/groupBill',
                title: '组织用户账单查询',
                templateUrl: helper.basepath('examine/groupBill.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.parkBill', {
                url: '/parkBill',
                title: '停车场用户账单查询',
                templateUrl: helper.basepath('examine/parkBill.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.induCard', {
                url: '/induCard',
                title: '诱导屏卡设置',
                templateUrl: helper.basepath('inducement/induCard.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.induCard-add', {
                url: '/induCardAdd',
                title: '诱导屏卡设置',
                templateUrl: helper.basepath('inducement/add-inducard.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
            .state('app.induCardModify', {
                url: '/induCardModify',
                title: '诱导屏卡设置',
                templateUrl: helper.basepath('inducement/modify-inducard.html'),
                resolve: helper.resolveFor('datatables', 'datatables.bootstrap', 'datatables.buttons')
            })
    }
})();


(function () {
    angular
        .module('app.settings')
        .run(settingsRun);

    settingsRun.$inject = ['$rootScope', '$localStorage', '$cookies'];

    'use strict';
    function settingsRun($rootScope, $localStorage, $cookies) {


        // User Settings
        // -----------------------------------
        $rootScope.user = {
            name: $cookies.get('userName'),
            job: $cookies.get('userPermission'),
            picture: 'app/img/user.png',
            organization_name:$cookies.get('organization_name'),
            nick_name:$cookies.get('nick_name')
        };

        // Hides/show user avatar on sidebar from any element
        $rootScope.toggleUserBlock = function () {
            $rootScope.$broadcast('toggleUserBlock');
        };

        // Global Settings
        // -----------------------------------
        $rootScope.app = {
            name: '湘行天下',
            description: '长沙湘行智慧交通科技有限公司 ',
            year: ((new Date()).getFullYear()),
            layout: {
                isFixed: true,
                isCollapsed: false,
                isBoxed: false,
                isRTL: false,
                horizontal: false,
                isFloat: false,
                asideHover: false,
                theme: null,
                asideScrollbar: false,
                isCollapsedText: false
            },
            useFullLayout: false,
            hiddenFooter: false,
            offsidebarOpen: false,
            asideToggled: false,
            viewAnimation: 'ng-fadeInUp'
        };

        // Setup the layout mode
        $rootScope.app.layout.horizontal = ( $rootScope.$stateParams.layout === 'app-h');

        // Restore layout settings [*** UNCOMMENT TO ENABLE ***]
        if (angular.isDefined($localStorage.layout))
            $rootScope.app.layout = $localStorage.layout;
        else
            $localStorage.layout = $rootScope.app.layout;

        $rootScope.$watch('app.layout', function () {
            $localStorage.layout = $rootScope.app.layout;
        }, true);

        // Close submenu when sidebar change from collapsed to normal
        $rootScope.$watch('app.layout.isCollapsed', function (newValue) {
            if (newValue === false)
                $rootScope.$broadcast('closeSidebarMenu');
        });

    }

})();

/**=========================================================
 * Module: sidebar-menu.js
 * Handle sidebar collapsible elements
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.sidebar')
        .controller('SidebarController', SidebarController);

    SidebarController.$inject = ['$rootScope', '$scope', '$state', 'SidebarLoader', 'Utils'];
    function SidebarController($rootScope, $scope, $state, SidebarLoader,Utils) {

        activate();

        ////////////////

        function activate() {
          var collapseList = [];

          // demo: when switch from collapse to hover, close all items
          var watchOff1 = $rootScope.$watch('app.layout.asideHover', function(oldVal, newVal){
            if ( newVal === false && oldVal === true) {
              closeAllBut(-1);
            }
          });


          // Load menu from json file
          // -----------------------------------

          SidebarLoader.getMenu(sidebarReady);

          function sidebarReady(items) {
            $scope.menuItems = items;
          }

          // Handle sidebar and collapse items
          // ----------------------------------

          $scope.getMenuItemPropClasses = function(item) {
            return (item.heading ? 'nav-heading' : '') +
                   (isActive(item) ? ' active' : '') ;
          };

          $scope.addCollapse = function($index, item) {
            collapseList[$index] = $rootScope.app.layout.asideHover ? true : !isActive(item);
          };

          $scope.isCollapse = function($index) {
            return (collapseList[$index]);
          };
          $scope.toggleShow =function ($index) {
              if(collapseList[$index]) {
                return 'c-iconActive';
              };
          };
          $scope.toggleCollapse = function($index, isParentItem) {

            // collapsed sidebar doesn't toggle drodopwn
            if( Utils.isSidebarCollapsed() || $rootScope.app.layout.asideHover ) return true;

            // make sure the item index exists
            if( angular.isDefined( collapseList[$index] ) ) {
              if ( ! $scope.lastEventFromChild ) {
                collapseList[$index] = !collapseList[$index];
                closeAllBut($index);
              }
            }
            else if ( isParentItem ) {
              closeAllBut(-1);
            }

            $scope.lastEventFromChild = isChild($index);

            return true;

          };

          // Controller helpers
          // -----------------------------------

            // Check item and children active state
            function isActive(item) {

              if(!item) return;

              if( !item.sref || item.sref === '#') {
                var foundActive = false;
                angular.forEach(item.submenu, function(value) {
                  if(isActive(value)) foundActive = true;
                });
                return foundActive;
              }
              else
                return $state.is(item.sref) || $state.includes(item.sref);
            }

            function closeAllBut(index) {
              index += '';
              for(var i in collapseList) {
                if(index < 0 || index.indexOf(i) < 0)
                  collapseList[i] = true;
              }
            }

            function isChild($index) {
              /*jshint -W018*/
              return (typeof $index === 'string') && !($index.indexOf('-') < 0);
            }

            $scope.$on('$destroy', function() {
                watchOff1();
            });

        } // activate
    }

})();

/**=========================================================
 * Module: sidebar.js
 * Wraps the sidebar and handles collapsed state
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.sidebar')
        .directive('sidebar', sidebar);

    sidebar.$inject = ['$rootScope', '$timeout', '$window', 'Utils'];
    function sidebar ($rootScope, $timeout, $window, Utils) {
        var $win = angular.element($window);
        var directive = {
            // bindToController: true,
            // controller: Controller,
            // controllerAs: 'vm',
            link: link,
            restrict: 'EA',
            template: '<nav class="sidebar" ng-transclude></nav>',
            transclude: true,
            replace: true
            // scope: {}
        };
        return directive;

        function link(scope, element, attrs) {

          var currentState = $rootScope.$state.current.name;
          var $sidebar = element;

          var eventName = Utils.isTouch() ? 'click' : 'mouseenter' ;
          var subNav = $();

          $sidebar.on( eventName, '.nav > li', function() {

            if( Utils.isSidebarCollapsed() || $rootScope.app.layout.asideHover ) {

              subNav.trigger('mouseleave');
              subNav = toggleMenuItem( $(this), $sidebar);

              // Used to detect click and touch events outside the sidebar
              sidebarAddBackdrop();

            }

          });

          var eventOff1 = scope.$on('closeSidebarMenu', function() {
            removeFloatingNav();
          });

          // Normalize state when resize to mobile
          $win.on('resize.sidebar', function() {
            if( ! Utils.isMobile() )
          	asideToggleOff();
          });

          // Adjustment on route changes
          var eventOff2 = $rootScope.$on('$stateChangeStart', function(event, toState) {
            currentState = toState.name;
            // Hide sidebar automatically on mobile
            asideToggleOff();

            $rootScope.$broadcast('closeSidebarMenu');
          });

      	  // Autoclose when click outside the sidebar
          if ( angular.isDefined(attrs.sidebarAnyclickClose) ) {

            var wrapper = $('.wrapper');
            var sbclickEvent = 'click.sidebar';

            var watchOff1 = $rootScope.$watch('app.asideToggled', watchExternalClicks);

          }

          //////

          function watchExternalClicks(newVal) {
            // if sidebar becomes visible
            if ( newVal === true ) {
              $timeout(function(){ // render after current digest cycle
                wrapper.on(sbclickEvent, function(e){
                  // if not child of sidebar
                  if( ! $(e.target).parents('.aside').length ) {
                    asideToggleOff();
                  }
                });
              });
            }
            else {
              // dettach event
              wrapper.off(sbclickEvent);
            }
          }

          function asideToggleOff() {
            $rootScope.app.asideToggled = false;
            if(!scope.$$phase) scope.$apply(); // anti-pattern but sometimes necessary
      	  }

          scope.$on('$destroy', function() {
            // detach scope events
            eventOff1();
            eventOff2();
            watchOff1();
            // detach dom events
            $sidebar.off(eventName);
            $win.off('resize.sidebar');
            wrapper.off(sbclickEvent);
          });

        }

        ///////

        function sidebarAddBackdrop() {
          var $backdrop = $('<div/>', { 'class': 'dropdown-backdrop'} );
          $backdrop.insertAfter('.aside-inner').on('click mouseenter', function () {
            removeFloatingNav();
          });
        }

        // Open the collapse sidebar submenu items when on touch devices
        // - desktop only opens on hover
        function toggleTouchItem($element){
          $element
            .siblings('li')
            .removeClass('open')
            .end()
            .toggleClass('open');
        }

        // Handles hover to open items under collapsed menu
        // -----------------------------------
        function toggleMenuItem($listItem, $sidebar) {

          removeFloatingNav();

          var ul = $listItem.children('ul');

          if( !ul.length ) return $();
          if( $listItem.hasClass('open') ) {
            toggleTouchItem($listItem);
            return $();
          }

          var $aside = $('.aside');
          var $asideInner = $('.aside-inner'); // for top offset calculation
          // float aside uses extra padding on aside
          var mar = parseInt( $asideInner.css('padding-top'), 0) + parseInt( $aside.css('padding-top'), 0);
          var subNav = ul.clone().appendTo( $aside );

          toggleTouchItem($listItem);

          var itemTop = ($listItem.position().top + mar) - $sidebar.scrollTop();
          var vwHeight = $win.height();

          subNav
            .addClass('nav-floating')
            .css({
              position: $rootScope.app.layout.isFixed ? 'fixed' : 'absolute',
              top:      itemTop,
              bottom:   (subNav.outerHeight(true) + itemTop > vwHeight) ? 0 : 'auto'
            });

          subNav.on('mouseleave', function() {
            toggleTouchItem($listItem);
            subNav.remove();
          });

          return subNav;
        }

        function removeFloatingNav() {
          $('.dropdown-backdrop').remove();
          $('.sidebar-subnav.nav-floating').remove();
          $('.sidebar li.open').removeClass('open');
        }
    }


})();


/**
 * Created by huangxiang  on 2016/11/23 0023.
 * @author: huangxiang
 * Module:
 * feature:
 */
(function () {
    angular.module('app.sidebar')
        .service('loadSidebarMenu',loadSidebarMenu);

    loadSidebarMenu.$inject = ['$cookies'];

    // 根据不同的用户加载不同的菜单
    'use strict';
    function loadSidebarMenu($cookies) {
        return {
            getMenuJson: function () {
                console.log('getMenuJson执行了');
                var userPermission = $cookies.get('userPermission');
                console.log(userPermission);
                var menuJson = null;
                if(userPermission === 'operator_parkinglot'){
                    menuJson = 'server/operator-parkinglot-sidebar.json';
                }
                else if (userPermission === 'operator_group_user') { // 用户管理员
                    menuJson = 'server/operator-group-user-sidebar.json';
                }
                else if (userPermission === 'operator_bill') { // 账单管理员
                    menuJson = 'server/operator-bill-sidebar.json';
                }
                else if (userPermission === 'operator_end_user') { // 客服服务（APP用户）
                    menuJson = 'server/operator-end-user-sidebar.json';
                }
                else if (userPermission === 'operator_app') { // APP管理员
                    menuJson = 'server/operator-app-sidebar.json';
                }
                else if (userPermission === 'group_user') { // 集团用户
                    menuJson = 'server/group-user-sidebar.json';
                }
                else if (userPermission === 'sysadmin' || userPermission === 'administrator') {
                    menuJson = 'server/sysadmin-sidebar.json';
                }
                return menuJson;
            }
        };
    }
})();
(function () {
    'use strict';

    angular
        .module('app.sidebar')
        .service('SidebarLoader', SidebarLoader);

    SidebarLoader.$inject = ['$http','logger','loadSidebarMenu'];

    function SidebarLoader($http,logger,loadSidebarMenu) {
        this.getMenu = getMenu;

        ////////////////

        function getMenu(onReady, onError) {

            // 根据不同的用户权限加载不同的菜单
            var menuJson = loadSidebarMenu.getMenuJson(),
            menuURL = menuJson + '?v=' + (new Date().getTime()); // jumps cache

            // 一个菜单
            // var menuURL = 'server/sysadmin-sidebar.json' + '?v=' + (new Date().getTime()); // jumps cache

            onError = onError || function () {
                    logger.error('加载菜单失败','','当前用户可能未分配角色权限，请检查！');
                };

            $http
                .get(menuURL)
                .success(onReady)
                .error(onError);
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app.sidebar')
        .controller('UserBlockController', UserBlockController);

    UserBlockController.$inject = ['$scope','$rootScope','$cookies'];
    function UserBlockController($scope,$rootScope,$cookies) {

        activate();
        $scope.user = $rootScope.user;
        $scope.user.nick_name =  $cookies.get('nick_name');
        $scope.user.organization_name =  $cookies.get('organization_name');
        ////////////////

        function activate() {

            $scope.userBlockVisible = false;

            var detach = $scope.$on('toggleUserBlock', function (/*event, args*/) {

                $scope.userBlockVisible = !$scope.userBlockVisible;

            });

            $scope.$on('$destroy', detach);
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('app.translate')
        .config(translateConfig)
        ;
    translateConfig.$inject = ['$translateProvider'];
    function translateConfig($translateProvider){

      $translateProvider.useStaticFilesLoader({
          prefix : 'app/i18n/',
          suffix : '.json'
      });

      $translateProvider.preferredLanguage('en');
      $translateProvider.useLocalStorage();
      $translateProvider.usePostCompiling(true);
      $translateProvider.useSanitizeValueStrategy('sanitizeParameters');

    }
})();
(function() {
    'use strict';

    angular
        .module('app.translate')
        .run(translateRun)
        ;
    translateRun.$inject = ['$rootScope', '$translate'];
    
    function translateRun($rootScope, $translate){

      // Internationalization
      // ----------------------

      $rootScope.language = {
        // Handles language dropdown
        listIsOpen: false,
        // list of available languages
        available: {
          'en':       'English',
          'es_AR':    'Español'
        },
        // display always the current ui language
        init: function () {
          var proposedLanguage = $translate.proposedLanguage() || $translate.use();
          var preferredLanguage = $translate.preferredLanguage(); // we know we have set a preferred one in app.config
          $rootScope.language.selected = $rootScope.language.available[ (proposedLanguage || preferredLanguage) ];
        },
        set: function (localeId) {
          // Set the new idiom
          $translate.use(localeId);
          // save a reference for the current language
          $rootScope.language.selected = $rootScope.language.available[localeId];
          // finally toggle dropdown
          $rootScope.language.listIsOpen = ! $rootScope.language.listIsOpen;
        }
      };

      $rootScope.language.init();

    }
})();
/**=========================================================
 * Module: animate-enabled.js
 * Enable or disables ngAnimate for element with directive
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.utils')
        .directive('animateEnabled', animateEnabled);

    animateEnabled.$inject = ['$animate'];
    function animateEnabled ($animate) {
        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element, attrs) {
          scope.$watch(function () {
            return scope.$eval(attrs.animateEnabled, scope);
          }, function (newValue) {
            $animate.enabled(!!newValue, element);
          });
        }
    }

})();

/**
 * Created by huangxiang on 2016/11/21 0021.
 */
(function () {
    'use strict';
    angular.module('app.utils')
        .service('Base64', Base64);

    function Base64() {
        var keyStr = 'ABCDEFGHIJKLMNOP' +
            'QRSTUVWXYZabcdef' +
            'ghijklmnopqrstuv' +
            'wxyz0123456789+/' +
            '=';

        return {
            encode: function (input) {
                var output = "";
                var chr1, chr2, chr3 = "";
                var enc1, enc2, enc3, enc4 = "";

                var i = 0;

                do {

                    chr1 = input.charCodeAt(i++);
                    chr2 = input.charCodeAt(i++);
                    chr3 = input.charCodeAt(i++);

                    enc1 = chr1 >> 2;
                    enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                    enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                    enc4 = chr3 & 63;

                    if (isNaN(chr2)) {
                        enc3 = enc4 = 64;
                    } else if (isNaN(chr3)) {
                        enc4 = 64;
                    }

                    output = output +
                        keyStr.charAt(enc1) +
                        keyStr.charAt(enc2) +
                        keyStr.charAt(enc3) +
                        keyStr.charAt(enc4);
                    chr1 = chr2 = chr3 = "";
                    enc1 = enc2 = enc3 = enc4 = "";

                } while (i < input.length);

                return output;
            },

            decode: function (input) {
                var output = "";
                var chr1, chr2, chr3 = "";
                var enc1, enc2, enc3, enc4 = "";
                var i = 0;

                // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
                var base64test = /[^A-Za-z0-9\+\/\=]/g;
                if (base64test.exec(input)) {
                    alert("There were invalid base64 characters in the input text.\n" +
                        "Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\n" +
                        "Expect errors in decoding.");
                }
                input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

                do {
                    enc1 = keyStr.indexOf(input.charAt(i++));
                    enc2 = keyStr.indexOf(input.charAt(i++));
                    enc3 = keyStr.indexOf(input.charAt(i++));
                    enc4 = keyStr.indexOf(input.charAt(i++));

                    chr1 = (enc1 << 2) | (enc2 >> 4);
                    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                    chr3 = ((enc3 & 3) << 6) | enc4;

                    output = output + String.fromCharCode(chr1);

                    if (enc3 != 64) {
                        output = output + String.fromCharCode(chr2);
                    }
                    if (enc4 != 64) {
                        output = output + String.fromCharCode(chr3);
                    }

                    chr1 = chr2 = chr3 = "";
                    enc1 = enc2 = enc3 = enc4 = "";

                } while (i < input.length);

                return output;
            }
        }
    }
})();
/**=========================================================
 * Module: browser.js
 * Browser detection
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.utils')
        .service('Browser', Browser);

    Browser.$inject = ['$window'];
    function Browser($window) {
      return $window.jQBrowser;
    }

})();

/**=========================================================
 * Module: clear-storage.js
 * Removes a key from the browser storage via element click
 =========================================================*/

(function() {

    angular
        .module('app.utils')
        .directive('resetKey', resetKey);

    resetKey.$inject = ['$state', '$localStorage'];
    'use strict';
    function resetKey ($state, $localStorage) {
        var directive = {
            link: link,
            restrict: 'A',
            scope: {
              resetKey: '@'
            }
        };
        return directive;

        function link(scope, element) {
          element.on('click', function (e) {
              e.preventDefault();

              if(scope.resetKey) {
                delete $localStorage[scope.resetKey];
                $state.go($state.current, {}, {reload: true});
              }
              else {
                $.error('No storage key specified for reset.');
              }
          });
        }
    }

})();

(function (angular) {
    angular.module('app.utils')
        .service('datatablesOptions', datatablesOptionsFactory);
    datatablesOptionsFactory.$inject = ['DTOptionsBuilder'];
    'use strict';
    function datatablesOptionsFactory(DTOptionsBuilder) {
        var dtOptions = DTOptionsBuilder.newOptions()
            .withDOM('frtip')
            .withOption('ordering', false)
            .withOption('searching', false)
            .withOption('autoWidth', true)
            .withOption('scrollX', '90%')
            .withOption('scrollY', '70%')
            .withOption('deferRender', true)
            .withOption('paging', false)
            .withOption('info', false)
            .withOption('dom',  '<"top"i>rt<"bottom"Bflp><"clear">')
            .withOption('aLengthMenu', [50, 100, 250, 500, 1000])
            .withBootstrap()
            .withButtons([
            {
                exportData: {decodeEntities:true},
                extend: 'print',
                exportOptions: {
                    columns: ':visible'
                },
                message: '打印对账单',
                text: '<i class="fa fa-print"> 打印'
            },
            {
                exportData: {decodeEntities:true},
                extend: 'copy',
                exportOptions: {
                    columns: ':visible'
                },
                text: '<i class="fa fa-files-o"> 复制 '
            },
            {
                exportData: {decodeEntities:true},
                extend: 'excel',
                exportOptions: {
                    columns: ':visible'
                },
                text: '<i class="fa fa-file-text-o"> Excel'
            },
            {
                exportData: {decodeEntities:true},
                extend: 'csv',
                exportOptions: {
                    columns: ':visible'
                },
                text: '<i class="fa fa-file-text-o"> CSV'
            },
            {
                exportData: {decodeEntities:true},
                extend: 'pdf',
                exportOptions: {
                    columns: ':visible'
                },

                text: '<i class="fa fa-file-pdf-o"> PDF'
            },
            {
                exportData: {decodeEntities:true},
                extend: 'colvis',
                text: function (dt, button, config) {
                    return dt.i18n('button.colvis', '选择列');
                }

            }
        ])
            .withLanguage({
                'sProcessing': '处理中...',
                'sLengthMenu': '显示 _MENU_ 项结果',
                'sZeroRecords': '没有匹配结果',
                'sInfo': '显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项',
                'sInfoEmpty': '显示第 0 至 0 项结果，共 0 项',
                'sInfoFiltered': '(由 _MAX_ 项结果过滤)',
                'sInfoPostFix': '',
                'sSearch': '搜索:',
                'sUrl': '',
                'sEmptyTable': '表中数据为空',
                'sLoadingRecords': '载入中...',
                'sInfoThousands': ',',
                'oPaginate': {
                    'sFirst': '首页',
                    'sPrevious': '上页',
                    'sNext': '下页',
                    'sLast': '末页'
                },
                'oAria': {
                    'sSortAscending': ': 以升序排列此列',
                    'sSortDescending': ': 以降序排列此列'
                },
                'oTableTools': {
                    'sSwfPath': 'vendor/datatables-tabletools/swf/copy_csv_xls_pdf.swf'
                }
            })
        return {
            getDatatableOption: getDatatableOption
        };
        function getDatatableOption() {
            return dtOptions;
        }
    }
})(angular);
(function() {
    'use strict';
    angular
        .module('app.utils')
        .directive('axischarts', axischarts);
    axischarts.$inject = [];
    function axischarts() {
        return {
            scope: {
                id: "@",
                legend: "=",
                //item: "=",
                data: "="
            },
            restrict: 'ECA',
            template: '<div></div>',
            replace: true,
            link: function($scope, element, attrs, controller) {
                var myChart = echarts.init(document.getElementById($scope.id),'macarons');
                var a = [];
                var option = {
                    tooltip : {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross',
                            label: {
                                backgroundColor: '#6a7985'
                            }
                        }
                    },
                    legend: {
                        data:['新增用户','活跃用户','临时停车用户'],
                        y: 'bottom'
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '7%',
                        containLabel: true
                    },
                    xAxis : [
                        {
                            type : 'category',
                            boundaryGap : false,
                            data : ['1日','3日','6日','9日','12日','15日','18日','21日','24日','27日','30日']
                        }
                    ],
                    yAxis : [
                        {
                            type : 'value'
                        }
                    ],
                    series : [
                        {
                            name:'新增用户',
                            type:'line',
                            stack: '总量',
                            areaStyle: {normal: {}},
                            data:[585, 455, 123, 444, 236, 578, 160,452,157,467,352]
                        },
                        {
                            name:'活跃用户',
                            type:'line',
                            stack: '总量',
                            areaStyle: {normal: {}},
                            data:[585, 455, 123, 444, 236, 578, 160,452,157,467,352]
                        },
                        {
                            name:'临时停车用户',
                            type:'line',
                            stack: '总量',
                            areaStyle: {normal: {}},
                            data:[1585,3455,2123,1444,2236,1578,3160,5452,1157,3467,2352]
                        }
                    ]
                };

                myChart.setOption(option);
                $scope.$watch('data',function(newValue, oldValue, scope){
                    var data = $scope.data;$scope.active_user = [];$scope.add_user =[];$scope.user_all = [];$scope.time = [];
                    angular.forEach(data, function (value,index) {
                        $scope.active_user.push(value.active_user);
                        $scope.add_user.push(value.add_user);
                        $scope.user_all.push(value.user_all);
                        $scope.time.push(value.time);
                    });
                    var option = {
                        tooltip : {
                            trigger: 'axis',
                            axisPointer: {
                                type: 'cross',
                                label: {
                                    backgroundColor: '#6a7985'
                                }
                            }
                        },
                        legend: {
                            data:['新增用户','活跃用户','临时停车用户'],
                            y: 'bottom'
                        },
                        grid: {
                            left: '3%',
                            right: '4%',
                            bottom: '7%',
                            containLabel: true
                        },
                        xAxis : [
                            {
                                type : 'category',
                                boundaryGap : false,
                                data : $scope.time
                            }
                        ],
                        yAxis : [
                            {
                                type : 'value'
                            }
                        ],
                        series : [
                            {
                                name:'新增用户',
                                type:'line',
                                stack: '总量',
                                areaStyle: {normal: {}},
                                data:$scope.add_user
                            },
                            {
                                name:'活跃用户',
                                type:'line',
                                stack: '总量',
                                areaStyle: {normal: {}},
                                data:$scope.active_user
                            },
                            {
                                name:'临时停车用户',
                                type:'line',
                                stack: '总量',
                                areaStyle: {normal: {}},
                                data:$scope.temporary_user
                            }
                        ]
                    };
                    myChart.setOption(option);
                }, true);
            }
        };
    }
})();

(function() {
    'use strict';
    angular
        .module('app.utils')
        .directive('categorycharts', categorycharts);
    categorycharts.$inject = [];
    function categorycharts() {
        return {
            scope: {
                id: "@",
                legend: "=",
                //item: "=",
                data: "="
            },
            restrict: 'ECA',
            template: '<div></div>',
            replace: true,
            link: function($scope, element, attrs, controller) {
                var a = [];
                var option = {
                    tooltip : {
                        trigger: 'axis',
                        axisPointer : {            // 坐标轴指示器，坐标轴触发有效
                            type : 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis : [
                        {
                            type : 'category',
                            data : ['芙蓉区', '天心区', '岳麓区', '开福区', '雨花区', '望城区', '长沙县','浏阳市','宁乡县'],
                            axisTick: {
                                alignWithLabel: true
                            }
                        }
                    ],
                    yAxis : [
                        {
                            type : 'value'
                        }
                    ],
                    series : [
                        {
                            type:'bar',
                            barWidth: '60%',
                            data:[117, 116, 119, 81, 136, 4, 9,1,3],
                            itemStyle: {
                                normal: {
                                    barBorderRadius:[10, 10, 0, 0],
                                    color: function(params) {
                                        // build a color map as your need.
                                        var colorList = [
                                            '#C1232B','#B5C334','#FCCE10','#E87C25','#27727B',
                                            '#FE8463','#9BCA63','#FAD860','#F3A43B','#60C0DD',
                                            '#D7504B','#C6E579','#F4E001','#F0805A','#26C0C0'
                                        ];
                                        return colorList[params.dataIndex]
                                    }
                                }
                            }
                        }
                    ]
                };
                var myChart = echarts.init(document.getElementById($scope.id),'macarons');
                myChart.setOption(option);
            }
        };
    }
})();

(function() {
    'use strict';
    angular
        .module('app.utils')
        .directive('sexbar', sexbar);
    sexbar.$inject = [];
    function sexbar() {
        return {
            scope: {
                id: "@",
                legend: "=",
                //item: "=",
                data: "="
            },
            restrict: 'E',
            template: '<div></div>',
            replace: true,
            link: function($scope, element, attrs, controller) {
                var a = [];
                var option = {
                    tooltip: {
                        show: true,
                        formatter: "{b} : {c} ({d}%)"
                    },
                    // 数据内容数组
                    series: [
                        {
                            name:'',
                            type: 'pie',
                            radius :[50, 100],
                            center:['45%','60%'],
                            roseType : 'radius',
                            label: {
                                normal: {
                                    show: true
                                },
                                emphasis: {
                                    show: true
                                }
                            },
                            labelLine: {
                                normal: {
                                    show: true
                                },
                                emphasis: {
                                    show: true
                                }
                            },
                            data:$scope.data,
                            itemStyle : {
                                normal: {
                                    label: {
                                        show: false
                                    },
                                    labelLine: {
                                        show: false
                                    }
                                } ,
                                emphasis: {
                                    label: {
                                        show: true,
                                        position: 'outer'
                                    },
                                    labelLine: {
                                        show: true,
                                        lineStyle: {
                                            color: 'red'
                                        },
                                    },
                                }
                            }
                        }

                    ]

                };
                var myChart = echarts.init(document.getElementById($scope.id),'macarons');
                myChart.setOption(option);
            }
        };
    }

})();

(function() {
    'use strict';
    angular
        .module('app.utils')
        .directive('linecharts', linecharts);
    linecharts.$inject = [];
    function linecharts() {
        return {
            scope: {
                id: "@",
                legend: "=",
                //item: "=",
                data: "="
            },
            restrict: 'ECA',
            template: '<div></div>',
            replace: true,
            link: function($scope, element, attrs, controller) {
                var a = [];
                var option = {
                    tooltip: {
                        show: true,
                        formatter: "{b} : {c}"
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: false,
                        data: ['0:00:00', '1:00:00', '2:00:00', '3:00:00', '4:00:00', '5:00:00', '6:00:00','7:00:00','8:00:00','9:00:00','10:00:00','11:00:00','12:00:00', '13:00:00', '14:00:00', '15:00:00', '16:00:00', '17:00:00', '18:00:00','19:00:00','20:00:00','21:00:00','22:00:00','23:00:00']
                    },
                    yAxis: {
                        type: 'value',
                        axisLabel: {
                            formatter: '{value}'
                        }
                    },
                    series: [{
                        data: $scope.data,
                        type: 'line',
                        center: ['50%','50%'],
                        areaStyle: {
                            normal:{color:"#c6f2e4"}
                        },
                        itemStyle:{
                            normal:{color:'#71dfbc'}
                        }
                    }]
                };
                var myChart = echarts.init(document.getElementById($scope.id),'macarons');
                myChart.setOption(option);
            }
        };
    }

})();

(function() {
    'use strict';
    angular
        .module('app.utils')
        .directive('manylinecharts', manylinecharts);
    manylinecharts.$inject = [];
    function manylinecharts() {
        return {
            scope: {
                id: "@",
                legend: "=",
                //item: "=",
                data: "="
            },
            restrict: 'ECA',
            template: '<div></div>',
            replace: true,
            link: function($scope, element, attrs, controller) {
                var a = [];
                var option = {
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data:['芙蓉区','天心区','岳麓区','开福区','雨花区']
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: false,
                        data: ['0:00:00', '1:00:00', '2:00:00', '3:00:00', '4:00:00', '5:00:00', '6:00:00','7:00:00','8:00:00','9:00:00','10:00:00','11:00:00','12:00:00', '13:00:00', '14:00:00', '15:00:00', '16:00:00', '17:00:00', '18:00:00','19:00:00','20:00:00','21:00:00','22:00:00','23:00:00']
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name:'芙蓉区',
                            type:'line',
                            data:[121, 29, 2, 105, 167, 1080, 2555,2643,3192,3613,3042,2762,3713,3889,4136,5148,2621,2174,1855,1653,636,324,121]
                        },
                        {
                            name:'天心区',
                            type:'line',
                            data:[134, 38, 3, 105, 117, 864, 3577,2115,2873,2891,3955,3315,4456,2723,4964,4634,2097,1305,1855,1984,700,227,134]
                        },
                        {
                            name:'岳麓区',
                            type:'line',
                            data:[170, 21, 2, 105, 134, 864, 3833,2908,4150,5420,1826,1934,3713,5445,4136,7722,3670,3261,2597,2480,700,422,170]
                        },
                        {
                            name:'开福区',
                            type:'line',
                            data:[85, 29, 3, 63, 151, 648, 3833,2115,3192,2168,3347,4143,3713,2334,6204,5148,3146,2392,1484,1653,954,195,85]
                        },
                        {
                            name:'雨花区',
                            type:'line',
                            data:[158, 24, 2, 137, 134, 1188, 3577,3436,3512,3613,4259,3315,4085,4278,3309,3604,3146,3044,2597,2315,764,292,158]
                        }
                    ]
                };
                var myChart = echarts.init(document.getElementById($scope.id),'macarons');
                myChart.setOption(option);
            }
        };
    }
})();

(function() {
    'use strict';
    angular
        .module('app.utils')
        .directive('piecharts', piecharts);
    piecharts.$inject = [];
    function piecharts() {
        return {
            scope: {
                id: "@",
                legend: "=",
                //item: "=",
                data: "="
            },
            restrict: 'ECA',
            template: '<div></div>',
            replace: true,
            link: function($scope, element, attrs, controller) {
                var a = [];
                var option = {
                    tooltip: {
                        trigger: 'item',
                        formatter: "{b}: {c} ({d}%)"
                    },
                    series: [
                        {
                            type:'pie',
                            radius: [25, 55],
                            center:['45%','60%'],
                            label: {
                                normal: {
                                    formatter: '{b|{b}}',
                                    rich: {
                                        a: {
                                            color: '#999',
                                            lineHeight: 18,
                                            align: 'center'
                                        },
                                        hr: {
                                            borderColor: '#aaa',
                                            width: '100%',
                                            borderWidth: 0.5,
                                            height: 0
                                        },
                                        b: {
                                            fontSize: 12,
                                            lineHeight: 18
                                        },
                                        per: {
                                            color: '#eee',
                                            backgroundColor: '#334455',
                                            padding: [2, 4],
                                            borderRadius: 2
                                        }
                                    }
                                }
                            },
                            data:$scope.data
                        }
                    ]
                };
                var myChart = echarts.init(document.getElementById($scope.id),'macarons');
                myChart.setOption(option);
            }
        };
    }
})();

(function() {
    'use strict';
    angular
        .module('app.utils')
        .directive('radarcharts', radarcharts);
    radarcharts.$inject = [];
    function radarcharts() {
        return {
            scope: {
                id: "@",
                legend: "=",
                //item: "=",
                data: "="
            },
            restrict: 'ECA',
            template: '<div></div>',
            replace: true,
            link: function($scope, element, attrs, controller) {
                var myChart = echarts.init(document.getElementById($scope.id),'macarons');
                var a = [];
                var option = {
                    tooltip: {
                        trigger: 'axis'
                    },
                    radar: [
                        {
                            indicator: [
                                {text: '雨花区', max: 12000},
                                {text: '芙蓉区', max: 12000},
                                {text: '岳麓区', max: 12000},
                                {text: '天心区', max: 12000},
                                {text: '开福区', max: 12000},
                                {text: '其他区', max: 12000}
                            ],
                            center: ['30%','50%'],
                            radius: 80
                        }
                    ],
                    series: [
                        {
                            type: 'radar',
                            tooltip: {
                                trigger: 'item'
                            },
                            itemStyle: {normal: {areaStyle: {type: 'default'}}},
                            data: [
                                {
                                    value: [11061,10368, 9904,9719, 7342,14962]
                                }
                            ]
                        },

                    ]
                };
                myChart.setOption(option);
                $scope.$watch('data',function(newValue, oldValue, scope){
                    var maxNum = Math.max.apply(null,$scope.data);
                    var option = {
                        tooltip: {
                            trigger: 'axis'
                        },
                        radar: [
                            {
                                indicator: [
                                    {text: '雨花区', max: maxNum},
                                    {text: '芙蓉区', max: maxNum},
                                    {text: '岳麓区', max: maxNum},
                                    {text: '天心区', max: maxNum},
                                    {text: '开福区', max: maxNum},
                                    {text: '其他区', max: maxNum}
                                ],
                                center: ['30%','50%'],
                                radius: 80
                            }
                        ],
                        series: [
                            {
                                type: 'radar',
                                tooltip: {
                                    trigger: 'item'
                                },
                                itemStyle: {normal: {areaStyle: {type: 'default'}}},
                                data: [
                                    {
                                        value: $scope.data
                                    }
                                ]
                            },

                        ]
                    };
                    myChart.setOption(option);
                }, true);
            }
        };
    }
})();

(function() {
    'use strict';
    angular
        .module('app.utils')
        .directive('regionpiecharts', regionpiecharts);
    regionpiecharts.$inject = [];
    function regionpiecharts() {
        return {
            scope: {
                id: "@",
                legend: "=",
                //item: "=",
                data: "="
            },
            restrict: 'ECA',
            template: '<div></div>',
            replace: true,
            link: function($scope, element, attrs, controller) {
                var myChart = echarts.init(document.getElementById($scope.id),'macarons');
                var a = [];
                var option = {
                    backgroundColor:null,
                    color:$scope.data.color,
                    title: {
                        text: '',
                        top:'3%',
                        left:'1%',
                        textStyle:{
                            color: '#333',
                            fontStyle: 'normal',
                            fontWeight: 'normal',
                            fontFamily: 'sans-serif',
                            fontSize: 16
                        }
                    },
                    series: [{
                        name: '来源',
                        type: 'pie',
                        radius: ['60%', '85%'],
                        avoidLabelOverlap: false,
                        hoverAnimation:false,
                        label: {
                            normal: {
                                show: false,
                                position: 'center',
                                textStyle: {
                                    fontSize: $scope.data.fontSize,
                                    fontWeight: 'bold',
                                    color: '#333'
                                }
                                // formatter:'{b}\n{c}%'
                            }
                        },
                        data:[{
                            value: $scope.data.value,
                            name: $scope.data.name,
                            label:{
                                normal:{
                                    show:true
                                }
                            }
                            },
                            {
                                value:100-$scope.data.value,
                                name: ''
                            }
                        ]
                    }]
                };
                myChart.setOption(option);
                $scope.$watch('data',function(newValue, oldValue, scope){
                    var option = {
                        backgroundColor:null,
                        color:$scope.data.color,
                        title: {
                            text: '',
                            top:'3%',
                            left:'1%',
                            textStyle:{
                                color: '#333',
                                fontStyle: 'normal',
                                fontWeight: 'normal',
                                fontFamily: 'sans-serif',
                                fontSize: 16
                            }
                        },
                        series: [{
                            name: '来源',
                            type: 'pie',
                            radius: ['60%', '85%'],
                            avoidLabelOverlap: false,
                            hoverAnimation:false,
                            label: {
                                normal: {
                                    show: false,
                                    position: 'center',
                                    textStyle: {
                                        fontSize: $scope.data.fontSize,
                                        fontWeight: 'bold',
                                        color: '#333'
                                    }
                                    // formatter:'{b}\n{c}%'
                                }
                            },
                            data:[{
                                value: $scope.data.value,
                                name: $scope.data.name,
                                label:{
                                    normal:{
                                        show:true
                                    }
                                }
                            },
                                {
                                    value:100-$scope.data.value,
                                    name: ''
                                }
                            ]
                        }]
                    };
                    myChart.setOption(option);
                }, true);;
            }
        };
    }

})();

(function() {
    'use strict';
    angular
        .module('app.utils')
        .directive('shadowcharts', shadowcharts);
    shadowcharts.$inject = [];
    function shadowcharts() {
        return {
            scope: {
                id: "@",
                legend: "=",
                //item: "=",
                data: "="
            },
            restrict: 'ECA',
            template: '<div></div>',
            replace: true,
            link: function($scope, element, attrs, controller) {
                var a = [];
                var option = {
                    tooltip : {
                        trigger: 'axis',
                        axisPointer : {            // 坐标轴指示器，坐标轴触发有效
                            type : 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis:  {
                        type: 'value'
                    },
                    yAxis: {
                        type: 'category',
                        data: ['体育建筑','观览建筑','园林建筑','科研建筑','路边泊位','文教建筑','医疗建筑','交通建筑','行政办公建筑','旅馆建筑','商业建筑','居住建筑']
                    },
                    series: [
                        {
                            type: 'bar',
                            barMaxWidth: '100',
                            stack: '总量',
                            label: {
                                normal: {
                                    show: true,
                                    position: 'insideRight'
                                }
                            },
                            data: [2,4,6,6,8,10,16,19,38,53,158,269],
                            itemStyle: {
                                normal: {
                                    color: function(params) {
                                        // build a color map as your need.
                                        var colorList = [
                                            '#519faa','#7d8682','#ff766e','#c39008','#ffa578','#000','#088796','#8b0956','#443f3f','3305aa','#05d2eb','#9871ff'
                                        ];
                                        return colorList[params.dataIndex];
                                    }
                                }
                            }
                        }

                    ]
                };
                var myChart = echarts.init(document.getElementById($scope.id),'macarons');
                myChart.setOption(option);
            }
        };
    }
})();

(function() {
    'use strict';
    angular
        .module('app.utils')
        .directive('twobarcharts', twobarcharts);
    twobarcharts.$inject = [];
    function twobarcharts() {
        return {
            scope: {
                id: "@",
                legend: "=",
                //item: "=",
                data: "="
            },
            restrict: 'ECA',
            template: '<div></div>',
            replace: true,
            link: function($scope, element, attrs, controller) {
                var a = [];
                var option = {
                    title: {
                        text: '2018年'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross',
                            crossStyle: {
                                color: '#999'
                            }
                        }
                    },
                    legend: {
                        data:['APP用户','临时停车用户'],
                        y: 'bottom'
                    },
                    xAxis: [
                        {
                            type: 'category',
                            data: ['3月20日','21日','22日','23日','24日','25日','26日','27日','28日','29日','30日','31日','4月1日','2日'],
                            axisPointer: {
                                type: 'shadow'
                            }
                        }
                    ],
                    yAxis: [
                        {
                            type: 'value'
                        }
                    ],
                    series: [
                        {
                            name:'APP用户',
                            type:'bar',
                            data:[885, 565, 513, 851, 971, 698, 531,500,691,831,582,692,882,847]
                        },
                        {
                            name:'临时停车用户',
                            type:'bar',
                            data:[7771, 9234, 1885, 4958, 6747, 7414, 5903,2926,1175,2550,1013,3424,5326,6490]
                        }
                    ]
                };
                var myChart = echarts.init(document.getElementById($scope.id),'macarons');
                myChart.setOption(option);
            }
        };
    }
})();

(function() {
    'use strict';
    angular
        .module('app.utils')
        .directive('twocatcharts', twocatcharts);
    twocatcharts.$inject = [];
    function twocatcharts() {
        return {
            scope: {
                id: "@",
                legend: "=",
                //item: "=",
                data: "="
            },
            restrict: 'ECA',
            template: '<div></div>',
            replace: true,
            link: function($scope, element, attrs, controller) {
                var a = [];
                var option = {
                    color: ['#e54b4d', '#0181c8'],
                    tooltip : {
                        trigger: 'axis',
                        axisPointer : {            // 坐标轴指示器，坐标轴触发有效
                            type : 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
                        }
                    },
                    legend: {
                        data:['公用停车场','专用停车场'],
                        x: 'center', // 'center' | 'left' | {number},
                        y: 'top',
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis:  {
                        type: 'category',
                        data: ['芙蓉区','开福区','天心区','雨花区','岳麓区','其他区域']
                    },
                    yAxis: {
                        type: 'value',
                    },
                    series: [
                        {
                            name:'公用停车场',
                            type:'bar',
                            data:[144, 140, 100, 159, 136,136]
                        },
                        {
                            name:'专用停车场',
                            type:'bar',
                            data:[245, 114, 210, 315, 270,270]
                        }
                    ]
                };
                var myChart = echarts.init(document.getElementById($scope.id),'macarons');
                myChart.setOption(option);
            }
        };
    }
})();

/**=========================================================
 * Module: fullscreen.js
 * Toggle the fullscreen mode on/off
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.utils')
        .directive('toggleFullscreen', toggleFullscreen);

    toggleFullscreen.$inject = ['Browser'];
    function toggleFullscreen (Browser) {
        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element) {
          // Not supported under IE
          if( Browser.msie ) {
            element.addClass('hide');
          }
          else {
            element.on('click', function (e) {
                e.preventDefault();

                if (screenfull.enabled) {
                  
                  screenfull.toggle();
                  
                  // Switch icon indicator
                  if(screenfull.isFullscreen)
                    $(this).children('em').removeClass('fa-expand').addClass('fa-compress');
                  else
                    $(this).children('em').removeClass('fa-compress').addClass('fa-expand');

                } else {
                  $.error('Fullscreen not enabled');
                }

            });
          }
        }
    }


})();

/**
 * Created by huangxiang  on 2016/12/16 0016.
 * @author: huangxiang
 * Module: get-park-list.factory.js
 * feature: 获取所有的停车场数据并保存以便于多个controller调用
 */
(function () {
    angular.module('app.utils')
        .factory('ParkList', ParkList);

    ParkList.$inject = ['ManageParkingService', '$log'];

    'use strict';

    /**
     * 获取停车场数据的factory
     * @param ManageParkingService 与服务器通信的service
     * @param $log
     * @constructor
     */
    function ParkList(ManageParkingService, $log) {
        var Parks = [];
        var parkingAsync = [];

        getParkList();
        return {
            getParkId:getParkId,
            getParkAsyn:getParkAsyn
        };

        function getParkList() {
            ManageParkingService.queryParking().then(function (response) {
                parkingAsync = response.parking_lots;
                angular.forEach(response.parking_lots, function (value) {
                    Parks.push(value.id);
                });

                $log.info(parkingAsync);
                $log.info(Parks);
            });
        }

        function getParkId() {
            console.log(Parks);
            return Parks;
        }
        
        function getParkAsyn() {
            console.log(parkingAsync);
            return parkingAsync;
        }
    }
})();

/**=========================================================
 * Module: load-css.js
 * Request and load into the current page a css file
 =========================================================*/

(function () {
    'use strict';

    angular
        .module('app.utils')
        .directive('loadCss', loadCss);

    function loadCss() {
        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element, attrs) {
            element.on('click', function (e) {
                if (element.is('a')) e.preventDefault();
                var uri = attrs.loadCss,
                    link;

                if (uri) {
                    link = createLink(uri);
                    if (!link) {
                        $.error('Error creating stylesheet link element.');
                    }
                }
                else {
                    $.error('No stylesheet location defined.');
                }

            });
        }

        function createLink(uri) {
            var linkId = 'autoloaded-stylesheet',
                oldLink = $('#' + linkId).attr('id', linkId + '-old');

            $('head').append($('<link/>').attr({
                'id': linkId,
                'rel': 'stylesheet',
                'href': uri
            }));

            if (oldLink.length) {
                oldLink.remove();
            }

            return $('#' + linkId);
        }
    }

})();

/**=========================================================
 * Module: now.js
 * Provides a simple way to display the current time formatted
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.utils')
        .directive('now', now);

    now.$inject = ['dateFilter', '$interval'];
    function now (dateFilter, $interval) {
        var directive = {
            link: link,
            restrict: 'EA'
        };
        return directive;

        function link(scope, element, attrs) {
          var format = attrs.format;

          function updateTime() {
            var dt = dateFilter(new Date(), format);
            element.text(dt);
          }

          updateTime();
          var intervalPromise = $interval(updateTime, 1000);

          scope.$on('$destroy', function(){
            $interval.cancel(intervalPromise);
          });

        }
    }

})();

/**
 * Created by huangxiang  on 2016/12/15 0015.
 * @author: huangxiang
 * Module: park-select.directive.js
 * feature: 停车场选择自定义通用模块
 */
(function () {

    angular.module('app.utils')
        .directive('parkSelect', parkSelect);

    parkSelect.$inject = [];

    function parkSelect() {
        return {
            restrict: 'EAC',
            templateUrl: '../park/app/views/partials/park-select.html',
            controller: 'SelectParkController',
            controllerAs: 'ctrl',
            bindToController: true
        };
    }

})();   
/**
 * Created by huangxiang  on 2016/11/22 0022.
 * @author: huangxiang
 * Module: propsFilter.filter.js
 * feature: filter
 */
(function () {
    "use strict";
    angular.module('app.utils')
        .filter('propsFilter', function () {
            return function (items, props) {
                var out = [];

                if (angular.isArray(items)) {
                    items.forEach(function (item) {
                        var itemMatches = false;

                        var keys = Object.keys(props);
                        for (var i = 0; i < keys.length; i++) {
                            var prop = keys[i];
                            var text = props[prop].toLowerCase();
                            if (item[prop].toString().toLowerCase().indexOf(text) !== -1) {
                                itemMatches = true;
                                break;
                            }
                        }

                        if (itemMatches) {
                            out.push(item);
                        }
                    });
                } else {
                    // Let the output be the input untouched
                    out = items;
                }

                return out;
            };
        })
})();

/**
 * Created by huangxiang  on 2016/12/16 0016.
 * @author: huangxiang
 * Module: select-park.controller.js
 * feature: 停车场下拉选择设置
 */
(function () {
    angular.module('app.utils')
        .controller('SelectParkController', SelectParkController);

    SelectParkController.$inject = ['$scope', 'ParkList', '$log'];

    function SelectParkController($scope, ParkList, $log) {

        var vm = this;

        /*停车场选择-------------------------------------------------*/
        vm.disabled = undefined;
        vm.searchEnabled = undefined;

        vm.setInputFocus = function () {
            $scope.$broadcast('UiselectDemo1');
        };
        vm.enable = function () {
            vm.disabled = false;
        };

        vm.disabled = function () {
            vm.disabled = true;
        };

        vm.enableSearch = function () {
            vm.searchEnabled = true;
        };

        vm.disableSearch = function () {
            vm.searchEnabled = false;
        };

        vm.someGroupFn = function (item) {

            if (item.name[0] >= 'A' && item.name[0] <= 'M')
                return 'From A - M';

            if (item.name[0] >= 'N' && item.name[0] <= 'Z')
                return 'From N - Z';

        };

        vm.firstLetterGroupFn = function (item) {
            return item.name[0];
        };

        vm.reverseOrderFilterFn = function (groups) {
            return groups.reverse();
        };
        vm.parkingAsync = {selected: 'wladimir@email.com'};
        vm.parkingAsync = ParkList.getParkAsyn();

        $log.warn(ParkList.getParkAsyn());

        var allParkLots = ParkList.getParkId();

        $log.warn(allParkLots);


        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.seletPark.id = vm.eventResult.model.id;
        };

        vm.seletPark = {
            id: undefined
        };
        /*停车场选择-------------------------------------------------*/

        vm.menuState = {
            show: false
        };
        vm.toggleMenu = function () {
            vm.menuState.show = !vm.menuState.show;
        };

        /*清除查找条件*/
        vm.clearAndRefresh = function () {
            vm.eventResult.model = undefined;
            vm.parkingAsync.selected = undefined;
            vm.seletPark.id = undefined;
            vm.search_plate_number = undefined;
            vm.loadFistPage();
        };
    }
})();

/**
 * statuscode.constants.js
 * @author: huangxiang
 * @create 2017-04-12 11:18
 * @feather 该常量文件描述的是http状态码为200的情况下，本应用后台返回的异常状态码
 */
(function(){

    angular.module('app.utils')
        .constant('StatusCode',{
            /*系统级别状态码*/
            SUCCESS: 0,  // 成功请求
            UNKNOWN_ERR: 10000, // 未知原因错误
            ERROR_PARAM: 10001,  // 参数错误
            LOST_PARAM: 10002, // 缺少必要参数
            DATABASE_ERROR: 10003, // 数据库错误
            NETWORK_ERROR: 10004,  // 网络错误
            NEED_LOGIN: 10005,  // 需要登录才能进行下一步操作
            NON_RIGHT: 10006,  // 没有权限
            INVALID_OPT: 10007, // 无效的操作
            FILE_OPERATOR_ERROR: 10008,  // 文件操作出错
            RSA_SIGN_ERROR: 10009,  // 签名出错
            /*账号模块*/
            VERIFY_CODE_EXPIRED: 20000,  // 验证码过期
            VERIFY_CODE_INVALID: 20001,  // 验证码无效
            VERIFY_CODE_WAIT: 20002,    // 请稍等验证码下发
            PHONE_NUMBER_REGISTERED: 20003,  // 该手机号码已经注册
            PHONE_NUMBER_NOT_REGISTERED: 20004, // 该手机号码未被注册
            USER_NO_PROFILE: 20005, // 该用户没有配置数据
            PAY_PASSWORD_ERROR: 20006,  // 支付密码错误
            PAY_PASSWORD_NOT_EXIST: 20007, // 没有支付密码
            TRADE_NUM_NOT_EXIST: 20008, // 该订单号不存在
            USER_PASSWORD_ERROR: 20009, // 用户密码错误
            NON_ADMINISTRATOR: 20010, // 不是管理员
            NO_SUCH_USER: 20011, // 没有该用户
            NO_SUCH_ROLE: 20012, // 没有该角色
            USERNAME_EXISTS: 20013, // 用户名已经存在
            NOT_OPERATOR: 20014, // 不是操作员
            NONE_AUTH_DEL_ROLE: 20015, // 没有权限删除用户组
            GROUPNAME_EXISTS: 20016, // 该用户组已经存在
            USER_NOT_ACTIVE: 20017, // 该用户未被激活
            /*支付模块*/
            NON_UNPAID_BILL: 30001, // 没有未支付的订单
            PAY_CHANNEL_NOT_SUPPORT: 30002, // 该支付方式不支持
            SERVICE_NOT_SUPPORT: 30003, // 该服务不支持
            SUCH_BILL_EXISTS: 30004, // 该账单已经存在
            NON_ENOUGH_BALANCE: 30005, // 余额不足
            NON_SUCH_BILL: 30006, // 没有该账单
            NON_BILL: 30007, // 没有账单
            BILL_PAID: 30008, // 订单已支付
            /*web后台模块*/
            NON_VALID_PACKNAME: 40001,  //不是有效的app包名
            NON_APP_REALEASE: 40002, // 没有app发布
            NON_SUCH_PARKLOT: 40003, // 没有该停车场
            SUCH_PARKLOT_EXITS: 40004, // 该停车场已经存在
            NON_PARKLOT: 40005, // 没有停车场
            NON_VEHICLEIN_RECORD: 40006, // 没有停车入场记录
            NON_VEHICLEOUT_RECORD: 40007, // 没有停车出场记录
            NON_OFFLINEPAY_RECORD: 40008, // 没有线下缴费记录
            NON_ONLINEPAY_RECORD: 40009, // 没有线上缴费记录
            NON_SUCH_PARKGATE: 40010, // 没有该停车场入口
            NON_PARKGATE: 40011, // 该停车场没有入口
            INVALID_PLATE_NUMBER: 40012, // 不正确的车牌号
            NON_VEHICLE_FOUND: 40013, // 不存在该号牌的车辆
            SUCH_PARKGATE_EXISTS: 40014, //该停车场入口已经存在
            NON_RECHARGE_RECORD: 40015, // 没有充值记录
            /*停车场模块*/
            NO_INOUT_RECORD: 50001, // 没有进出场记录
            /*app用户概况模块*/
            ONLY_APPUSER: 70001,  //仅限于APP用户
            HAS_NON_VEHICLE: 70002, //没有车辆
            HAS_NON_USER_PROFILE: 70003, //没有用户配置数据
            /*app版本模块*/
            NON_FILE_EXISTS: 80001, // 文件不存在
            NON_START_IMAGE: 80002, // 没有启动页图片
            NON_INDEX_IMAGE: 80003, // 没有首页页面图片
            NON_COVER_IMAGE: 80004, // 没有封面页图片
            SUCH_VERSION_EXISTS: 80005, // 该版本已经存在
            /*路边停车模块*/
            LUBO_REQUEST_ERROR: 90001 // 从路泊获取信息失败
            /*更多*/
        });
})();
/**=========================================================
 * Module: table-checkall.js
 * Tables check all checkbox
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.utils')
        .directive('checkAll', checkAll);

    function checkAll () {
        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element) {
          element.on('change', function() {
            var $this = $(this),
                index= $this.index() + 1,
                checkbox = $this.find('input[type="checkbox"]'),
                table = $this.parents('table');
            // Make sure to affect only the correct checkbox column
            table.find('tbody > tr > td:nth-child('+index+') input[type="checkbox"]')
              .prop('checked', checkbox[0].checked);

          });
        }
    }

})();

(function() {
    'use strict';
    angular
        .module('app.utils')
        .directive('time', time);
    time.$inject = [];
    function time() {
        return {
            scope: {
                id: "@",
                legend: "=",
                //item: "=",
                data: "="
            },
            restrict: 'ECA',
            template: '<div></div>',
            replace: true,
            link: function($scope, element, attrs, controller) {
                var select = document.getElementById($scope.id);
                var thisYear = new Date().getFullYear();
                for(var i=1900;i<=thisYear;i++){
                    var option = document.createElement("option");
                    option.value = i;
                    option.innerText = i;
                    select.appendChild(option);
                }
            }
        };
    }

})();

/**=========================================================
 * Module: trigger-resize.js
 * Triggers a window resize event from any element
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.utils')
        .directive('triggerResize', triggerResize);

    triggerResize.$inject = ['$window', '$timeout'];
    function triggerResize ($window, $timeout) {
        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element, attributes) {
          element.on('click', function(){
            $timeout(function(){
              // all IE friendly dispatchEvent
              var evt = document.createEvent('UIEvents');
              evt.initUIEvent('resize', true, false, $window, 0);
              $window.dispatchEvent(evt);
              // modern dispatchEvent way
              // $window.dispatchEvent(new Event('resize'));
            }, attributes.triggerResize || 300);
          });
        }
    }

})();

/**
 * Created by huangxiang  on 2016/12/15 0015.
 * @author: huangxiang
 * Module: uigrid.service.js
 * feature: ui-grid表格设置
 */
(function () {
    angular.module('app.utils')
        .factory('UiGridOptions', UiGridOptions);
    UiGridOptions.$inject = ['$document'];
    function UiGridOptions($document) {
        var vm = this;
        vm.dtOptions = {
            data: [], // 设置数据源
            excludeProperties: '__metadata',
            useExternalSorting: true,
            exporterOlderExcelCompatibility: true, // 因为其默认导出excel格式为utf-16，将该属性设置为true可以避免乱码
            /*分页属性设置*/
            /*分页属性设置完毕*/
            /*选中属性设置*/
            // enableFooterTotalSelected: true, // 是否显示选中的总数，默认为true, 如果显示，showGridFooter 必须为true
            enableFullRowSelection: false,  //是否点击行任意位置后选中,默认为false,当为true时，checkbox可以显示但是不可选中
            isRowSelectable: function (row) { //GridRow
                if (row.entity.age > 45) {
                    row.grid.api.selection.selectRow(row.entity); // 选中行
                }
            },
            // modifierKeysToMultiSelect: false,//默认false,为true时只能 按ctrl或shift键进行多选, multiSelect 必须为true;
            // multiSelect: true,// 是否可以选择多个,默认为true;
            // noUnselect: false,//默认false,选中后是否可以取消选中
            selectionRowHeaderWidth: 30,//默认30 ，设置选择列的宽度；
            /*选中属性设置完毕*/
            enablePinning: true,
            enablePaging: true,
            enableSorting: true,
            showFooter: true,
            totalServerItems: 'totalServerItems',
            pagingOptions: vm.pagingOptions,
            filterOptions: vm.filterOptions,
            showFilter: false,
            enableFiltering: false,
            showGridFooter: true,
            fastWatch: true,
            showColumnFooter: true,
            enableGridMenu: true,
            enableGridFooter: true,
            exporterCvsFilename: 'myFile.cvx',
            exporterPdfDefaultStyle: {fontSize: 12},
            exporterPdfTableStyle: {margin: [30, 30, 30, 30]},
            exporterPdfTableHeaderStyle: {fontSize: 10, bold: true, italics: true, color: 'red'},
            exporterPdfOrientation: 'portrait',
            exporterPdfPageSize: 'LETTER',
            exporterPdfMaxGridWidth: 500,
            exporterPdfHeader: {text: '长沙智慧交通集团', style: 'headerStyle'},
            exporterPdfFooter: function (currentPage, pageCount) {
                return {text: currentPage.toString() + ' of ' + pageCount.toString(), style: 'footerStyle'};
            },
            exporterPdfCustomFormatter: function (docDefinition) {
                docDefinition.styles.headerStyle = {fontSize: 22, bold: true};
                docDefinition.styles.footerStyle = {fontSize: 10, bold: true};
                return docDefinition;
            },
            exporterCsvLinkElement: angular.element($document[0].querySelectorAll('.custom-csv-link-location'))
        };
        return {
            getUiGridOption: getUiGridOption
        };

        function getUiGridOption() {
            return vm.dtOptions;
        }

    }
})();
/**=========================================================
 * Module: utils.js
 * Utility library to use across the theme
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.utils')
        .service('Utils', Utils);

    Utils.$inject = ['$window', 'APP_MEDIAQUERY'];
    function Utils($window, APP_MEDIAQUERY) {

        var $html = angular.element('html'),
            $win  = angular.element($window),
            $body = angular.element('body');

        return {
          // DETECTION
          support: {
            transition: (function() {
                    var transitionEnd = (function() {

                        var element = document.body || document.documentElement,
                            transEndEventNames = {
                                WebkitTransition: 'webkitTransitionEnd',
                                MozTransition: 'transitionend',
                                OTransition: 'oTransitionEnd otransitionend',
                                transition: 'transitionend'
                            }, name;

                        for (name in transEndEventNames) {
                            if (element.style[name] !== undefined) return transEndEventNames[name];
                        }
                    }());

                    return transitionEnd && { end: transitionEnd };
                })(),
            animation: (function() {

                var animationEnd = (function() {

                    var element = document.body || document.documentElement,
                        animEndEventNames = {
                            WebkitAnimation: 'webkitAnimationEnd',
                            MozAnimation: 'animationend',
                            OAnimation: 'oAnimationEnd oanimationend',
                            animation: 'animationend'
                        }, name;

                    for (name in animEndEventNames) {
                        if (element.style[name] !== undefined) return animEndEventNames[name];
                    }
                }());

                return animationEnd && { end: animationEnd };
            })(),
            requestAnimationFrame: window.requestAnimationFrame ||
                                   window.webkitRequestAnimationFrame ||
                                   window.mozRequestAnimationFrame ||
                                   window.msRequestAnimationFrame ||
                                   window.oRequestAnimationFrame ||
                                   function(callback){ window.setTimeout(callback, 1000/60); },
            /*jshint -W069*/
            touch: (
                ('ontouchstart' in window && navigator.userAgent.toLowerCase().match(/mobile|tablet/)) ||
                (window.DocumentTouch && document instanceof window.DocumentTouch)  ||
                (window.navigator['msPointerEnabled'] && window.navigator['msMaxTouchPoints'] > 0) || //IE 10
                (window.navigator['pointerEnabled'] && window.navigator['maxTouchPoints'] > 0) || //IE >=11
                false
            ),
            mutationobserver: (window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver || null)
          },
          // UTILITIES
          isInView: function(element, options) {
              /*jshint -W106*/
              var $element = $(element);

              if (!$element.is(':visible')) {
                  return false;
              }

              var window_left = $win.scrollLeft(),
                  window_top  = $win.scrollTop(),
                  offset      = $element.offset(),
                  left        = offset.left,
                  top         = offset.top;

              options = $.extend({topoffset:0, leftoffset:0}, options);

              if (top + $element.height() >= window_top && top - options.topoffset <= window_top + $win.height() &&
                  left + $element.width() >= window_left && left - options.leftoffset <= window_left + $win.width()) {
                return true;
              } else {
                return false;
              }
          },

          langdirection: $html.attr('dir') === 'rtl' ? 'right' : 'left',

          isTouch: function () {
            return $html.hasClass('touch');
          },

          isSidebarCollapsed: function () {
            return $body.hasClass('aside-collapsed') || $body.hasClass('aside-collapsed-text');
          },

          isSidebarToggled: function () {
            return $body.hasClass('aside-toggled');
          },

          isMobile: function () {
            return $win.width() < APP_MEDIAQUERY.tablet;
          }

        };
    }
})();

/**
 * Created by huangxiang  on 2017/3/24 0024.
 * @author: huangxiang
 * Module: welcome.controller.js
 * feature: 主页设置
 */
(function () {
    angular.module('app.welcome')
        .controller('WelcomeController',WelcomeController);

    WelcomeController.$inject = [];

    'use strict';
    function WelcomeController() {

        var vm = this;

        vm.myInterval = 1000;
        vm.noWrapSlides = false;

        vm.active = 0;

        vm.slides = [
            {
                image:'/park/app/img/carousel/banner_1.jpg',
                text: ['Nice image','Awesome photograph','That is so cool','I love that'],
                id: 1
            },
            {
                image:'/park/app/img/carousel/banner_2.jpg',
                text: ['Nice image','Awesome photograph','That is so cool','I love that'],
                id: 2
            },
            {
                image:'/park/app/img/carousel/banner_3.jpg',
                text: ['Nice image','Awesome photograph','That is so cool','I love that'],
                id: 3
            }
        ];

    }
})();

/**
 * park.add.controller.js
 * @author: huangxiang
 * @create 2016-12-23 16:43
 */
(function () {
    angular.module('app.basicinfo')
        .controller('AddOrganCtr', AddOrganCtr);
    AddOrganCtr.$inject = ['$location', 'organService', 'logger'];
    'use strict';
    function AddOrganCtr($location, organService, logger) {
        var vm = this;
        vm.addOrgan = addOrgan; // 添加停车场
        vm.backToPrevious = backToPrevious; // 返回上一层菜单
        function addOrgan() {
            organService.addOrgan(vm.organ.orgname,vm.organ.orgphone,vm.organ.orgleader,vm.organ.leaderphone,vm.organ.address,vm.organ.contactname,vm.organ.contactphone,vm.organ.orgemail,vm.organ.orggrade,vm.organ.registernum,vm.organ.orgtype,vm.organ.paytype,vm.organ.isactive,vm.organ.memo).then(function (response) {
                if (response.status === 0) {
                    logger.success('添加成功'+'组织：'+vm.organ.name,'操作成功');
                    $location.path('/app/organ');
                }else if (response.status === 40004) {
                    logger.error('添加失败' + vm.organ.name + '"' + '失败!', vm.organ.status, '该组织已经存在！');
                }else if(response.status === 10002) {
                    logger.error('添加失败' + vm.organ.name + '"' + '失败!', vm.organ.status, '请输入带*的必填字段！');
                }else{
                    logger.error('添加失败');
                }
            });
        }
        function backToPrevious() {
            $location.path('/app/organ');
        }
    }
})();
(function () {
    angular.module('app.basicinfo')
        .controller('OrganController',OrganController);
    OrganController.$inject = ['$location', 'organService', 'DTColumnDefBuilder', 'datatablesOptions','organFactory', '$uibModal','logger','$document'];
    'use strict';
    function OrganController($location,organService,DTColumnDefBuilder,datatablesOptions,organFactory,$uibModal,logger,$document) {
        var vm = this;
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            next_start_index:0,
            previous_start_index:0,
            maxid: 0,
            minid: 0
        };
        vm.number={
            start:0,
            next:0
        };
        vm.addOrgan = addOrgan;//新增公交车公司
        vm.modifyOrgan = modifyOrgan;//修改组织
        vm.deleteOrgan = deleteOrgan;//删除组织
        vm.backToPrevious = backToPrevious;//返回上一级
        vm.readRecords = readRecords;
        vm.readRecords(0);
        vm.dtOptions = datatablesOptions.getDatatableOption(); // 获取datatables表格设置
        // 创建表格列
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3),
            DTColumnDefBuilder.newColumnDef(4),
            DTColumnDefBuilder.newColumnDef(5),
            DTColumnDefBuilder.newColumnDef(6),
            DTColumnDefBuilder.newColumnDef(7),
            DTColumnDefBuilder.newColumnDef(8),
            DTColumnDefBuilder.newColumnDef(9),
            DTColumnDefBuilder.newColumnDef(10),
            DTColumnDefBuilder.newColumnDef(11),
            DTColumnDefBuilder.newColumnDef(12).notSortable()
        ];
        /**
         * 新增组织
         */
        function addOrgan() {
            $location.path('/app/organ/add-new-organ');
        }
        //停车场所有人
        var selectOrganman = [];//所选择的停车场所有人
        vm.OrganmanAsync = [];
        var allOrganmans = [];
        organService.queryOrgan().then(function (response) {
            vm.OrganmanAsync = response.records;
            angular.forEach(response.records, function (value) {
                allOrganmans.push(value.id);
            });
        });
        vm.onSelectCallbackOrganman = function (item) {
            vm.eventResult = {model: item};
            vm.seletOrganmanId = vm.eventResult.model.id;
        };
        /**
         * 修改组织
         */
        function modifyOrgan(organ) {
            organFactory.setOrgan(organ);
            $location.path('/app/organ/modify-organ');
        }
        /**
         * 打开删除组织的modal;
         */
        function deleteOrgan(organ) {
            organFactory.setOrgan(organ);
            var modalInstance = $uibModal.open({
                backdrop: 'static',
                templateUrl: 'deleteOrgan.html',
                size: 'sm',
                controller: 'organDeteleCtr',
                controllerAs: 'vm'
            });
            modalInstance.result.then(function () {
                vm.queryOrgan();
            });
        }
        /*
        * 返回上一级
         */
        function backToPrevious() {
            $location.path('/app/organ');
        }

        //查询组织
        function readRecords(start_index){
            if(start_index == 0){//首页index
                organService.readRecords(0,'',vm.seletOrganmanId).then(function (response) {
                    if(response.status == 0){
                        vm.organ = response.records;
                        vm.parkNumber = response.parklot_sum;
                        angular.forEach(response.records, function (value,index) {
                            vm.organ[index].number =index+1;
                        });
                        vm.number.start = vm.organ[0].number;
                        vm.number.next = vm.organ[vm.organ.length - 1].number;
                        vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                        vm.pagination.previous_start_index = response.records[0].id;
                        vm.pagination.maxid = response.maxid;
                        if (response.records.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        }else{
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        }
                    }else {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    }
                });
            }else if(start_index == 1){//上一页
                if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                    logger.warning('已经到首页！','','没有上一页');
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }else{
                    organService.readRecords(vm.pagination.previous_start_index,0,vm.seletOrganmanId).then(function (response) {
                        if(response.status == 0) {
                            vm.organ = response.records;
                            vm.parkNumber = response.parklot_sum;
                            angular.forEach(response.records, function (value, index) {
                                vm.organ[index].number = vm.number.start + index - response.records.length + 1;
                            });
                            vm.number.start = vm.organ[0].number;
                            vm.number.next = vm.organ[vm.organ.length - 1].number;
                            vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                            vm.pagination.previous_start_index = response.records[0].id;
                            vm.pagination.maxid = response.maxid;
                            if (response.records.length < 50) {
                                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                            } else {
                                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                            }
                        }else {
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        }
                    });
                }
            }else if(start_index == 2){//下一页
                if (vm.pagination.next_start_index <= vm.pagination.minid) {
                    logger.warning('已经到最后一页！','','没有下一页');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                }else{
                    organService.readRecords(vm.pagination.next_start_index,1,vm.seletOrganmanId).then(function (response) {
                        if(response.status == 0) {
                            vm.organ = response.records;
                            vm.parkNumber = response.parklot_sum;
                            angular.forEach(response.records, function (value, index) {
                                vm.organ[index].number = vm.number.number + index;
                            });
                            vm.number.start = vm.organ[0].number;
                            vm.number.next = vm.organ[vm.organ.length - 1].number;
                            vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                            vm.pagination.previous_start_index = response.records[0].id;
                            vm.pagination.minid = response.minid;
                            if (response.records.length < 50) {
                                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                            } else {
                                angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                                angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                                angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                                angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            }
                        }else {
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                        }
                    });
                }
            }else if(start_index == 3){//加载最后一页
                organService.readRecords(-1,'',vm.seletOrganmanId).then(function (response) {
                    if(response.status == 0) {
                        vm.organ = response.records;
                        vm.parkNumber = response.parklot_sum;
                        angular.forEach(response.records, function (value, index) {
                            vm.organ[index].number = response.records[0].id + index;
                        });
                        vm.number.start = vm.organ[0].number;
                        vm.number.next = vm.organ[vm.organ.length - 1].number;
                        vm.pagination.next_start_index = response.records[response.records.length - 1].id;
                        vm.pagination.previous_start_index = response.records[0].id;
                        vm.pagination.minid = response.minid;
                        if (response.records.length < 50) {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        } else {
                            angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                            angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                            angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        }
                    }else {
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    }
                });
            }
        }
        vm.clearAndRefresh = function () {
            vm.seletOrganmanId = '';
            vm.OrganmanAsync.selected = '';
            vm.readRecords(0);
        };
        vm.queryOne = queryOne;
        function queryOne() {
            organService.queryOne(vm.seletOrganmanId).then(function (response) {
                if(response.status == 0) {
                    vm.organ = response.records;
                    vm.parkNumber = response.parklot_sum;
                    vm.organ[0].number = response.records[0].id;
                }
            });
        }
    }
})();
/**
 * park.modal.controller.js
 * @author: huangxiang
 * @create 2016-12-23 15:52
 */
(function(){
    angular.module('app.basicinfo')
        .controller('organDeteleCtr',organDeteleCtr);
    organDeteleCtr.$inject = ['$uibModalInstance','organService','organFactory','logger'];
    'use strict';
    function organDeteleCtr($uibModalInstance,organService,organFactory,logger) {
        var vm = this;
        vm.deleteOrgan = deleteOrgan;
        vm.cancel = cancel;
        function deleteOrgan() {
            organService.deleteOrgan(organFactory.getOrgan().id).then(function (response) {
                if(response.status === 0){
                    $uibModalInstance.close('closed');
                    logger.success('成功刪除'+organFactory.name,response.data,'操作成功！');
                }else {
                    logger.error('删除失败'+organFactory.name + '失败！！',response.data,'操作失败！');
                }
            });
        }
        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
/**
 * basic.region.factory.js
 * @author: yumaotao
 * @create 2017/11/21
 */
(function () {
    angular.module('app.basicinfo')
        .factory('organFactory', organFactory);
    'use strict';
    function organFactory(){
        var organ = {
            id:'',//序号
            orgname:'',         // 组织名称
            orglogo : '',         // 组织logo
            orgphone : '',         // 组织电话
            orgleader : '',       // 组织领导者
            leaderphone : '',      // 领导电话
            address : '',         // 组织地址
            contactname : '',      // 联系人姓名
            contactphone : '',     // 联系人电话
            orgemail : '',        // 联系人邮箱
            businesslicence : '', // 组织营业执照
            orggrade : '',         // 组织等级
            registernum : '',     // 组织注册码
            orgtype : '',          // 组织类型
            paytype : '',          // 组织支付类型(预付费/后付费)
            isactive : '',         // 是否激活
            memo : ''          // 备注
        };
        return {
            setOrgan: setOrgan,
            getOrgan: getOrgan
        };
        function setOrgan(cOrgan) {
            organ.id = cOrgan.id;
            organ.orgname = cOrgan.orgname,         // 组织名称
            organ.orglogo = cOrgan.orglogo,         // 组织logo
            organ.orgphone = cOrgan.orgphone,         // 组织电话
            organ.orgleader = cOrgan.orgleader,       // 组织领导者
            organ.leaderphone = cOrgan.leaderphone,      // 领导电话
            organ.address = cOrgan.address,         // 组织地址
            organ.contactname = cOrgan.contactname,      // 联系人姓名
            organ.contactphone = cOrgan.contactphone,     // 联系人电话
            organ.orgemail = cOrgan.orgemail,        // 联系人邮箱
            organ.businesslicence = cOrgan.businesslicence, // 组织营业执照
            organ.orggrade = cOrgan.orggrade,         // 组织等级
            organ.registernum = cOrgan.registernum,     // 组织注册码
            organ.orgtype = cOrgan.orgtype,          // 组织类型
            organ.paytype = cOrgan.paytype,          // 组织支付类型(预付费/后付费)
            organ.isactive = cOrgan.isactive,         // 是否激活
            organ.memo = cOrgan.memo          // 备注
        }
        function getOrgan() {
            return organ;
        }
    }
})();
/**
 * Created by huangxiang  on 2016/11/23 0023.
 * @author:
 * Module:
 * feature:
 */
(function () {
    "use strict";
    angular.module('app.basicinfo')
        .controller('ModifyOrganCtr', ModifyOrganCtr);
    ModifyOrganCtr.$inject = ['$scope', '$timeout', '$location', 'organFactory', 'organService', 'toastr'];
    function ModifyOrganCtr($scope, $timeout, $location, organFactory, organService, toastr) {
        var vm = this;
        vm.getOrgan =  getOrgan;
        vm.getOrgan();
        function getOrgan() {
            $timeout(function () {
                vm.organ = organFactory.getOrgan();
            }, 500);
        };
        // 点击确认修改区域的操作
        vm.modifyOrgan = function () {
            organService.modifyOrgan(vm.organ.id,vm.organ.orgname,vm.organ.orgphone,vm.organ.orgleader,vm.organ.leaderphone,vm.organ.address,vm.organ.contactname,vm.organ.contactphone,vm.organ.orgemail,vm.organ.orggrade,vm.organ.registernum,vm.organ.orgtype,vm.organ.paytype,vm.organ.isactive,vm.organ.memo).then(function (response) {
                if (response.status == 0) {
                    toastr.success('修改成功!!', response, {
                        closeButton: true,
                        progressBar: true,
                        positionClass: 'toast-top-center'
                    });
                    $location.path('/app/organ');
                }
            });
        };
        // 返回上一层
        vm.backToPrevious = function () {
            $location.path('/app/organ');
        };
    }
})();
/**
 * bill.online.service.js.js
 * @author: huangxiang
 * @create 2016-12-29 16:01
 */
(function () {
    angular.module('app.basicinfo')
        .factory('organService', organService);
    organService.$inject = ['$http', 'URL_SEED'];
    'use strict';
    function organService($http, URL_SEED) {
        var ORGAN_URL = URL_SEED.API_URL + 'operation/organman/';//组织机构的增删改查
        return {
            queryOrgan:queryOrgan,//查询区域信息
            addOrgan: addOrgan,//新增区域信息
            deleteOrgan:deleteOrgan,//删除区域信息
            modifyOrgan:modifyOrgan,//修改区域信息
            readRecords:readRecords,//分页查询
            queryOne:queryOne
        };
        //查询组织信息
        function queryOrgan() {
            return $http({
                method: 'GET',
                url: ORGAN_URL,
                params: {
                    querytype: 'all',
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        //新增组织信息
        function addOrgan(orgname,orgphone,orgleader,leaderphone,address,contactname,contactphone,orgemail,orggrade,registernum,orgtype,paytype,isactive,memo) {
            var region = angular.toJson({
                orgname : orgname,         // 组织名称
                orgphone : orgphone,         // 组织电话
                orgleader : orgleader,       // 组织领导者
                leaderphone : leaderphone,      // 领导电话
                address : address,         // 组织地址
                contactname : contactname,      // 联系人姓名
                contactphone : contactphone,     // 联系人电话
                orgemail : orgemail,        // 联系人邮箱
                orggrade : orggrade,         // 组织等级
                registernum : registernum,     // 组织注册码
                orgtype : orgtype,          // 组织类型
                paytype : paytype,          // 组织支付类型(预付费/后付费)
                isactive : isactive,         // 是否激活
                memo : memo          // 备注
            });
            return $http({
                method: 'POST',
                url: ORGAN_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: region,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        //删除组织信息
        function deleteOrgan(id) {
            var organ = angular.toJson({orgid: id});
            return $http({
                method: 'DELETE',
                url: ORGAN_URL,
                headers: {
                    'Content-type': 'application/json'
                },
                data: organ,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        //修改区域信息
        function modifyOrgan(id,orgname,orgphone,orgleader,leaderphone,address,contactname,contactphone,orgemail,orggrade,registernum,orgtype,paytype,isactive,memo) {
            var organ = angular.toJson({
                orgid:id,
                orgname : orgname,         // 组织名称
                orgphone : orgphone,         // 组织电话
                orgleader : orgleader,       // 组织领导者
                leaderphone : leaderphone,      // 领导电话
                address : address,         // 组织地址
                contactname : contactname,      // 联系人姓名
                contactphone : contactphone,     // 联系人电话
                orgemail : orgemail,        // 联系人邮箱
                orggrade : orggrade,         // 组织等级
                registernum : registernum,     // 组织注册码
                orgtype : orgtype,          // 组织类型
                paytype : paytype,          // 组织支付类型(预付费/后付费)
                isactive : isactive,         // 是否激活
                memo : memo          // 备注
            });
            return $http({
                method: 'PUT',
                url: ORGAN_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: organ,
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function readRecords(start_index,pagedirect,id) {
            return $http({
                method: 'GET',
                url: ORGAN_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    start_index:start_index,
                    pagedirect : pagedirect,
                    orgid:id,
                    max_results: 50
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }
        function queryOne(id) {
            return $http({
                method: 'GET',
                url: ORGAN_URL,
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    orgid:id,
                    querytype:'one'
                },
                withCredentials: true
            }).then(function (response) {
                return response.data;
            });
        }

    }
})();
(function () {
    'use strict';
    angular.module('app.parking')
        .controller('parkStateController', parkStateController);
    parkStateController.$inject = ['ManageParkingService', 'ParkingStateService', 'DTColumnDefBuilder', 'datatablesOptions','$document','logger','URL_SEED'];
    function parkStateController(ManageParkingService, ParkingStateService, DTColumnDefBuilder, datatablesOptions,$document,logger,URL_SEED) {
        var vm = this;
        vm.queryBaiDuMapParking = queryBaiDuMapParking;
        vm.queryBaiDuMapParking();
        vm.pagination = {
            pagetype: {
                next_page: 1,
                pervious_page: 0
            },
            next_start_index:0,
            previous_start_index:0,
            maxid: 0,
            minid: 0
        };
        vm.readRecords = readRecords;
        vm.dtOptions = datatablesOptions.getDatatableOption();
        vm.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1),
            DTColumnDefBuilder.newColumnDef(2),
            DTColumnDefBuilder.newColumnDef(3)
        ];
        vm.parkingAsync = [];
        var allParkLots = [];
        var start_index = 0;
        function queryBaiDuMapParking() {
            ManageParkingService.queryBaiDuMapParking(start_index).then(function (response) {
                if(response.parking_lots.length !== 0) {
                    start_index =  response.parking_lots[response.parking_lots.length - 1].id;
                    angular.forEach(response.parking_lots, function (value) {
                        vm.parkingAsync.push(value);
                        allParkLots.push(value.id);
                    });
                    queryBaiDuMapParking();
                }
            });
        }
        vm.onSelectCallback = function (item) {
            vm.eventResult = {model: item};
            vm.seletParkId = vm.eventResult.model.id;
        };
        moment.locale('zh-cn', {
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD/MM/YYYY',
                LL: 'D MMMM YYYY',
                LLL: 'D MMMM YYYY LT',
                LLLL: 'dddd D MMMM YYYY LT'
            }
        });
        vm.coupon ={
            valid_begintime:undefined,
            valid_endtime:undefined
        };
        // /*时间日历设置-----------------------------------------------*/
        vm.endDateBeforeRender = endDateBeforeRender;
        vm.endDateOnSetTime = endDateOnSetTime;
        vm.startDateBeforeRender = startDateBeforeRender;
        vm.startDateOnSetTime = startDateOnSetTime;
        function startDateOnSetTime() {
            $scope.$broadcast('start-date-changed');
        }
        function endDateOnSetTime() {
            $scope.$broadcast('end-date-changed');
        }
        function startDateBeforeRender($dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart);
                $dates.filter(function (date) {
                    return date.localDateValue() >= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        }
        function endDateBeforeRender($view, $dates) {
            if (vm.dateRangeStart) {
                var activeDate = moment(vm.dateRangeStart).subtract(1, $view).add(1, 'minute');
                $dates.filter(function (date) {
                    return date.localDateValue() <= activeDate.valueOf();
                }).forEach(function (date) {
                    date.selectable = false;
                });
            }
        };
        vm.beforeRender = function ($view, $dates, $leftDate, $upDate, $rightDate) {
            var index = Math.floor(Math.random() * $dates.length);
            $dates[index].selectable = false;
        };
        /*时间日历设置------------------------------------------------*/
        function readRecords(start_index){
            if(vm.coupon.valid_begintime && vm.coupon.valid_endtime) {
                vm.valid_begintime = moment(new Date(new Date(vm.coupon.valid_begintime))).format('YYYY-MM-DD');
                vm.valid_endtime = moment(new Date(new Date(vm.coupon.valid_endtime))).format('YYYY-MM-DD');
            }
            if(start_index == 0){//首页index
                ParkingStateService.readRecords(0,'',vm.seletParkId, vm.valid_begintime,vm.valid_endtime).then(function (response) {
                    vm.tool_online_num = [];
                    vm.tool_offline_num = [];
                    vm.network_online_num = [];
                    vm.network_offline_num = [];
                    angular.forEach(response.parking_lots, function (value,index) {
                        if(value.httpstatus == 0){
                            value.htttpName = '已接入';
                            vm.tool_online_num.push(value);
                        }else if(value.httpstatus == 1){
                            value.htttpName = '已接入';
                            vm.tool_offline_num.push(value);
                        }else{
                            value.htttpName = '未接入';
                            vm.tool_offline_num.push(value);
                        }
                        if(value.mqttstatus == 0){
                            value.mtttpName = '已接入';
                            vm.network_online_num.push(value);
                        }else if(value.mqttstatus == 1){
                            value.mtttpName = '已接入';
                            vm.network_offline_num.push(value);
                        }else{
                            value.mtttpName = '未接入';
                            vm.network_offline_num.push(value);
                        }
                    });
                    vm.pagination.next_start_index = response.parking_lots[response.parking_lots.length - 1].id;
                    vm.pagination.previous_start_index = response.parking_lots[0].id;
                    vm.pagination.maxid = response.maxid;
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                });
            }else if(start_index == 1){//上一页
                if (vm.pagination.previous_start_index >= vm.pagination.maxid) {
                    logger.warning('已经到首页！','','没有上一页');
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = true;
                }else{
                    ParkingStateService.readRecords(vm.pagination.previous_start_index,0,vm.seletParkId, vm.valid_begintime,vm.valid_endtime).then(function (response) {
                        vm.tool_online_num = [];
                        vm.tool_offline_num = [];
                        vm.network_online_num = [];
                        vm.network_offline_num = [];
                        angular.forEach(response.parking_lots, function (value,index) {
                            if(value.httpstatus == 0){
                                value.htttpName = '已接入';
                                vm.tool_online_num.push(value);
                            }else if(value.httpstatus == 1){
                                value.htttpName = '已接入';
                                vm.tool_offline_num.push(value);
                            }else{
                                value.htttpName = '未接入';
                                vm.tool_offline_num.push(value);
                            }
                            if(value.mqttstatus == 0){
                                value.mtttpName = '已接入';
                                vm.network_online_num.push(value);
                            }else if(value.mqttstatus == 1){
                                value.mtttpName = '已接入';
                                vm.network_offline_num.push(value);
                            }else{
                                value.mtttpName = '未接入';
                                vm.network_offline_num.push(value);
                            }
                        });
                        vm.pagination.next_start_index = response.parking_lots[response.parking_lots.length - 1].id;
                        vm.pagination.previous_start_index = response.parking_lots[0].id;
                        vm.pagination.maxid = response.maxid;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                    });
                }
            }else if(start_index == 2){//下一页
                if (vm.pagination.next_start_index <= vm.pagination.minid) {
                    logger.warning('已经到最后一页！','','没有下一页');
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                }else{
                    ParkingStateService.readRecords(vm.pagination.next_start_index,1,vm.seletParkId, vm.valid_begintime,vm.valid_endtime).then(function (response) {
                        vm.tool_online_num = [];
                        vm.tool_offline_num = [];
                        vm.network_online_num = [];
                        vm.network_offline_num = [];
                        angular.forEach(response.parking_lots, function (value,index) {
                            if(value.httpstatus == 0){
                                value.htttpName = '已接入';
                                vm.tool_online_num.push(value);
                            }else if(value.httpstatus == 1){
                                value.htttpName = '已接入';
                                vm.tool_offline_num.push(value);
                            }else{
                                value.htttpName = '未接入';
                                vm.tool_offline_num.push(value);
                            }
                            if(value.mqttstatus == 0){
                                value.mtttpName = '已接入';
                                vm.network_online_num.push(value);
                            }else if(value.mqttstatus == 1){
                                value.mtttpName = '已接入';
                                vm.network_offline_num.push(value);
                            }else{
                                value.mtttpName = '未接入';
                                vm.network_offline_num.push(value);
                            }
                        });
                        vm.pagination.next_start_index = response.parking_lots[response.parking_lots.length - 1].id;
                        vm.pagination.previous_start_index = response.parking_lots[0].id;
                        vm.pagination.minid = response.minid;
                        angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                        angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    });
                }
            }else if(start_index == 3){//加载最后一页
                ParkingStateService.readRecords(-1,'',vm.seletParkId, vm.valid_begintime,vm.valid_endtime).then(function (response) {
                    vm.tool_online_num = [];
                    vm.tool_offline_num = [];
                    vm.network_online_num = [];
                    vm.network_offline_num = [];
                    angular.forEach(response.parking_lots, function (value,index) {
                        if(value.httpstatus == 0){
                            value.htttpName = '已接入';
                            vm.tool_online_num.push(value);
                        }else if(value.httpstatus == 1){
                            value.htttpName = '已接入';
                            vm.tool_offline_num.push(value);
                        }else{
                            value.htttpName = '未接入';
                            vm.tool_offline_num.push(value);
                        }
                        if(value.mqttstatus == 0){
                            value.mtttpName = '已接入';
                            vm.network_online_num.push(value);
                        }else if(value.mqttstatus == 1){
                            value.mtttpName = '已接入';
                            vm.network_offline_num.push(value);
                        }else{
                            value.mtttpName = '未接入';
                            vm.network_offline_num.push(value);
                        }
                    });
                    vm.pagination.next_start_index = response.parking_lots[response.parking_lots.length - 1].id;
                    vm.pagination.previous_start_index = response.parking_lots[0].id;
                    vm.pagination.minid = response.minid;
                    angular.element($document[0].getElementById('nextPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('lastPageBtn'))[0].disabled = true;
                    angular.element($document[0].getElementById('firstPageBtn'))[0].disabled = false;
                    angular.element($document[0].getElementById('previousPageBtn'))[0].disabled = false;
                });
            }
        }
        vm.readRecords(0);
        vm.clearAndRefresh = function () {
            vm.seletParkId = ''; vm.valid_begintime = '';vm.valid_endtime = '';
            vm.parkingAsync.selected = '';
            vm.queryParkings(0);
        };
    }
})();